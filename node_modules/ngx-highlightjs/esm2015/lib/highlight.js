/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, Inject, Optional, EventEmitter, ElementRef, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { animationFrameScheduler } from 'rxjs';
import { HighlightJS } from './highlight.service';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './highlight.service';
import * as ɵngcc2 from '@angular/platform-browser';
export class Highlight {
    /**
     * @param {?} el
     * @param {?} _hljs
     * @param {?} _sanitizer
     * @param {?} _options
     */
    constructor(el, _hljs, _sanitizer, _options) {
        this._hljs = _hljs;
        this._sanitizer = _sanitizer;
        this._options = _options;
        // Stream that emits when code string is highlighted
        this.highlighted = new EventEmitter();
        this._nativeElement = el.nativeElement;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.code &&
            changes.code.currentValue &&
            changes.code.currentValue !== changes.code.previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    }
    /**
     * Highlighting with language detection and fix markup.
     * @param {?} code Accepts a string with the code to highlight
     * @param {?=} languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @return {?}
     */
    highlightElement(code, languages) {
        // Set code text before highlighting
        this.setTextContent(code);
        this._hljs.highlightAuto(code, languages).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            // Set highlighted code
            this.setInnerHTML(res.value);
            // Check if user want to show line numbers
            if (this.lineNumbers && this._options && this._options.lineNumbers) {
                this.addLineNumbers();
            }
            // Forward highlight response to the highlighted output
            this.highlighted.emit(res);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    addLineNumbers() {
        // Clean up line numbers observer
        this.destroyLineNumbersObserver();
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        () => {
            // Add line numbers
            this._hljs.lineNumbersBlock(this._nativeElement).subscribe();
            // If lines count is 1, the line numbers library will not add numbers
            // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
            this._lineNumbersObs = new MutationObserver((/**
             * @return {?}
             */
            () => {
                if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                    this._nativeElement.classList.add('hljs-line-numbers');
                }
                this.destroyLineNumbersObserver();
            }));
            this._lineNumbersObs.observe(this._nativeElement, { childList: true });
        }));
    }
    /**
     * @private
     * @return {?}
     */
    destroyLineNumbersObserver() {
        if (this._lineNumbersObs) {
            this._lineNumbersObs.disconnect();
            this._lineNumbersObs = null;
        }
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    setTextContent(content) {
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        () => this._nativeElement.textContent = content));
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    setInnerHTML(content) {
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        () => this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content)));
    }
}
Highlight.ɵfac = function Highlight_Factory(t) { return new (t || Highlight)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HighlightJS), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(HIGHLIGHT_OPTIONS, 8)); };
Highlight.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Highlight, selectors: [["", "highlight", ""]], hostVars: 2, hostBindings: function Highlight_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("hljs", true);
    } }, inputs: { code: ["highlight", "code"], languages: "languages", lineNumbers: "lineNumbers" }, outputs: { highlighted: "highlighted" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
Highlight.ctorParameters = () => [
    { type: ElementRef },
    { type: HighlightJS },
    { type: DomSanitizer },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
];
Highlight.propDecorators = {
    code: [{ type: Input, args: ['highlight',] }],
    languages: [{ type: Input }],
    lineNumbers: [{ type: Input }],
    highlighted: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Highlight, [{
        type: Directive,
        args: [{
                host: {
                    '[class.hljs]': 'true'
                },
                selector: '[highlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.HighlightJS }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HIGHLIGHT_OPTIONS]
            }] }]; }, { highlighted: [{
            type: Output
        }], code: [{
            type: Input,
            args: ['highlight']
        }], languages: [{
            type: Input
        }], lineNumbers: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    Highlight.prototype._nativeElement;
    /**
     * @type {?}
     * @private
     */
    Highlight.prototype._lineNumbersObs;
    /** @type {?} */
    Highlight.prototype.code;
    /** @type {?} */
    Highlight.prototype.languages;
    /** @type {?} */
    Highlight.prototype.lineNumbers;
    /** @type {?} */
    Highlight.prototype.highlighted;
    /**
     * @type {?}
     * @private
     */
    Highlight.prototype._hljs;
    /**
     * @type {?}
     * @private
     */
    Highlight.prototype._sanitizer;
    /**
     * @type {?}
     * @private
     */
    Highlight.prototype._options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,