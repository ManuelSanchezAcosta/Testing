/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, from, EMPTY, zip } from 'rxjs';
import { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./highlight.model";
// @dynamic
import * as ɵngcc0 from '@angular/core';
export class HighlightLoader {
    /**
     * @param {?} doc
     * @param {?} platformId
     * @param {?} _options
     */
    constructor(doc, platformId, _options) {
        this._options = _options;
        // Stream that emits when hljs library is loaded and ready to use
        this._ready = new BehaviorSubject(null);
        this.ready = this._ready.asObservable().pipe(filter((/**
         * @param {?} hljs
         * @return {?}
         */
        (hljs) => !!hljs)), take(1));
        // Check if hljs is already available
        if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {
            this._ready.next(doc.defaultView.hljs);
        }
        else {
            // Load hljs library
            this._loadLibrary().pipe(switchMap((/**
             * @param {?} hljs
             * @return {?}
             */
            (hljs) => {
                if (this._options && this._options.lineNumbers) {
                    // Make hljs available on window object (required for the line numbers library)
                    doc.defaultView.hljs = hljs;
                    // Load line numbers library
                    return loadLineNumbers().pipe(tap((/**
                     * @return {?}
                     */
                    () => this._ready.next(hljs))));
                }
                else {
                    this._ready.next(hljs);
                    return EMPTY;
                }
            })), catchError((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                console.error('Unable to load hljs library', e);
                return EMPTY;
            }))).subscribe();
        }
    }
    /**
     * Lazy-Load highlight.js library
     * @private
     * @return {?}
     */
    _loadLibrary() {
        return (this._options && this._options.languages && Object.keys(this._options.languages).length)
            ? from(loadCoreLibrary()).pipe(switchMap((/**
             * @param {?} hljs
             * @return {?}
             */
            (hljs) => this._loadLanguages(hljs))))
            : from(loadAllLibrary());
    }
    /**
     * Lazy-load highlight.js languages
     * @private
     * @param {?} hljs
     * @return {?}
     */
    _loadLanguages(hljs) {
        /** @type {?} */
        const languages = Object.entries(this._options.languages).map((/**
         * @param {?} __0
         * @return {?}
         */
        ([langName, langLoader]) => importModule(langLoader()).pipe(tap((/**
         * @param {?} langFunc
         * @return {?}
         */
        (langFunc) => hljs.registerLanguage(langName, langFunc))))));
        return zip(...languages).pipe(map((/**
         * @return {?}
         */
        () => hljs)));
    }
}
HighlightLoader.ɵfac = function HighlightLoader_Factory(t) { return new (t || HighlightLoader)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8)); };
HighlightLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HighlightLoader, factory: HighlightLoader.ɵfac, providedIn: 'root' });
/** @nocollapse */
HighlightLoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
];
/** @nocollapse */ HighlightLoader.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function HighlightLoader_Factory() { return new HighlightLoader(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i2.HIGHLIGHT_OPTIONS, 8)); }, token: HighlightLoader, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightLoader, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HIGHLIGHT_OPTIONS]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    HighlightLoader.prototype._ready;
    /** @type {?} */
    HighlightLoader.prototype.ready;
    /**
     * @type {?}
     * @private
     */
    HighlightLoader.prototype._options;
}
/**
 * Import highlight.js core library
 * @return {?}
 */
function loadCoreLibrary() {
    return importModule(import('highlight.js/lib/highlight'));
}
/**
 * Import highlight.js library with all languages
 * @return {?}
 */
function loadAllLibrary() {
    return importModule(import('highlight.js'));
}
/**
 * Import line numbers library
 * @return {?}
 */
function loadLineNumbers() {
    return importModule(import('highlightjs-line-numbers.js'));
}
/**
 * Map loader response to module object
 * @type {?}
 */
const importModule = (/**
 * @param {?} moduleLoader
 * @return {?}
 */
(moduleLoader) => {
    return from(moduleLoader).pipe(filter((/**
     * @param {?} module
     * @return {?}
     */
    (module) => !!module && !!module.default)), map((/**
     * @param {?} module
     * @return {?}
     */
    (module) => module.default)));
});
const ɵ0 = importModule;
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,