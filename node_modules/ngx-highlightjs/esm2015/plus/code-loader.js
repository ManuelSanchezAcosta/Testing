/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { EMPTY } from 'rxjs';
import { catchError, publishReplay, refCount } from 'rxjs/operators';
import { GIST_OPTIONS } from './gist.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./gist.model";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export class CodeLoader {
    /**
     * @param {?} _http
     * @param {?} _options
     */
    constructor(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param {?} id Gist ID
     * @return {?}
     */
    getCodeFromGist(id) {
        /** @type {?} */
        let params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });
    }
    /**
     * Get code by URL
     * @param {?} url File raw link
     * @return {?}
     */
    getCodeFromUrl(url) {
        return this.fetchFile(url, { responseType: 'text' });
    }
    /**
     * Check if OAuth option is provided
     * @private
     * @return {?}
     */
    isOAuthProvided() {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    }
    /**
     * @private
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    fetchFile(url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            publishReplay(1), refCount(), catchError((/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            })));
        }
        return EMPTY;
    }
}
CodeLoader.ɵfac = function CodeLoader_Factory(t) { return new (t || CodeLoader)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(GIST_OPTIONS, 8)); };
CodeLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CodeLoader, factory: CodeLoader.ɵfac, providedIn: 'root' });
/** @nocollapse */
CodeLoader.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GIST_OPTIONS,] }] }
];
/** @nocollapse */ CodeLoader.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CodeLoader_Factory() { return new CodeLoader(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GIST_OPTIONS, 8)); }, token: CodeLoader, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeLoader, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [GIST_OPTIONS]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    CodeLoader.prototype._http;
    /**
     * @type {?}
     * @private
     */
    CodeLoader.prototype._options;
}
/**
 * @param {?} url
 * @return {?}
 */
function isUrl(url) {
    /** @type {?} */
    const regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1sb2FkZXIuanMiLCJzb3VyY2VzIjpbIm5neC1oaWdobGlnaHRqcy9wbHVzL2NvZGUtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBUSxZQUFZLEVBQWUsTUFBTSxjQUFjLENBQUM7QUFDL0Q7QUFFcUI7QUFHUjs7O0FBRGIsTUFBTSxPQUFPLFVBQVU7QUFDdkI7QUFBUztBQUF5QjtBQUE0QjtBQUFTLElBQXJFLFlBQW9CLEtBQWlCLEVBQTRDLFFBQXFCO0FBQ3hHLFFBRHNCLFVBQUssR0FBTCxLQUFLLENBQVk7QUFBRSxRQUEwQyxhQUFRLEdBQVIsUUFBUSxDQUFhO0FBQUUsSUFDeEcsQ0FBQztBQUNIO0FBRUE7QUFDRTtBQUVEO0FBQW9CO0FBQVMsSUFBNUIsZUFBZSxDQUFDLEVBQVU7QUFBSztBQUN6QixZQUFBLE1BQWtCO0FBQzFCLFFBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7QUFDaEMsWUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFILFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFB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QSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBaERBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFQQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFnREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEdpc3QsIEdJU1RfT1BUSU9OUywgR2lzdE9wdGlvbnMgfSBmcm9tICcuL2dpc3QubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29kZUxvYWRlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCwgQE9wdGlvbmFsKCkgQEluamVjdChHSVNUX09QVElPTlMpIHByaXZhdGUgX29wdGlvbnM6IEdpc3RPcHRpb25zKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgcGx1cyBjb2RlXHJcbiAgICogQHBhcmFtIGlkIEdpc3QgSURcclxuICAgKi9cclxuICBnZXRDb2RlRnJvbUdpc3QoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8R2lzdD4ge1xyXG4gICAgbGV0IHBhcmFtczogSHR0cFBhcmFtcztcclxuICAgIGlmICh0aGlzLmlzT0F1dGhQcm92aWRlZCgpKSB7XHJcbiAgICAgIHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCkuc2V0KCdjbGllbnRfaWQnLCB0aGlzLl9vcHRpb25zLmNsaWVudElkKS5zZXQoJ2NsaWVudF9zZWNyZXQnLCB0aGlzLl9vcHRpb25zLmNsaWVudFNlY3JldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5mZXRjaEZpbGUoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vZ2lzdHMvJHtpZH1gLCB7IHBhcmFtcywgcmVzcG9uc2VUeXBlOiAnanNvbicgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgY29kZSBieSBVUkxcclxuICAgKiBAcGFyYW0gdXJsIEZpbGUgcmF3IGxpbmtcclxuICAgKi9cclxuICBnZXRDb2RlRnJvbVVybCh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5mZXRjaEZpbGUodXJsLCB7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgT0F1dGggb3B0aW9uIGlzIHByb3ZpZGVkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc09BdXRoUHJvdmlkZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISF0aGlzLl9vcHRpb25zICYmICEhdGhpcy5fb3B0aW9ucy5jbGllbnRJZCAmJiAhIXRoaXMuX29wdGlvbnMuY2xpZW50U2VjcmV0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmZXRjaEZpbGUodXJsOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAvLyBDaGVjayBpZiBVUkwgaXMgdmFsaWRcclxuICAgIGlmIChpc1VybCh1cmwpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh1cmwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgICAgLy8gQ2F0Y2ggcmVzcG9uc2VcclxuICAgICAgICBwdWJsaXNoUmVwbGF5KDEpLFxyXG4gICAgICAgIHJlZkNvdW50KCksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyOiBFcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignW05neEhpZ2hsaWdodF06IFVuYWJsZSB0byBmZXRjaCB0aGUgVVJMIScsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVNUFRZO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzVXJsKHVybDogc3RyaW5nKSB7XHJcbiAgY29uc3QgcmVnRXhwID0gLyhmdHB8aHR0cHxodHRwcyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcUyspKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8vO1xyXG4gIHJldHVybiByZWdFeHAudGVzdCh1cmwpO1xyXG59XHJcbiJdfQ==