{"version":3,"file":"ngx-highlightjs.js","sources":["ngx-highlightjs/lib/highlight.model.ts","ngx-highlightjs/lib/highlight.loader.ts","ngx-highlightjs/lib/highlight.service.ts","ngx-highlightjs/lib/highlight.ts","ngx-highlightjs/lib/highlight.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface HighlightLibrary {\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): string;\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement): void;\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): void;\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting(): void;\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: () => any): void;\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): string[];\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): any;\r\n\r\n  /**\r\n   * Add line numbers to code element\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: Element): void;\r\n}\r\n\r\nexport interface HighlightConfig {\r\n  /** tabReplace: a string used to replace TAB characters in indentation. */\r\n  tabReplace?: string;\r\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\r\n  useBR?: boolean;\r\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\r\n  classPrefix?: string;\r\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\r\n  languages?: string[];\r\n}\r\n\r\nexport interface HighlightResult {\r\n  language?: string;\r\n  second_best?: any;\r\n  top?: any;\r\n  value?: string;\r\n  relevance?: number;\r\n}\r\n\r\nexport interface HighlightOptions {\r\n  config?: HighlightConfig;\r\n  languages?: { [name: string]: () => Promise<any> };\r\n  lineNumbers?: boolean;\r\n}\r\n\r\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\r\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\nimport { BehaviorSubject, Observable, from, EMPTY, zip } from 'rxjs';\r\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\r\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\r\n\r\n// @dynamic\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightLoader {\r\n  // Stream that emits when hljs library is loaded and ready to use\r\n  private readonly _ready = new BehaviorSubject(null);\r\n  readonly ready = this._ready.asObservable().pipe(\r\n    filter((hljs: HighlightLibrary) => !!hljs),\r\n    take(1)\r\n  );\r\n\r\n  constructor(@Inject(DOCUMENT) doc: any,\r\n              @Inject(PLATFORM_ID) platformId: object,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    // Check if hljs is already available\r\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\r\n      this._ready.next(doc.defaultView.hljs);\r\n    } else {\r\n      // Load hljs library\r\n      this._loadLibrary().pipe(\r\n        switchMap((hljs: HighlightLibrary) => {\r\n          if (this._options && this._options.lineNumbers) {\r\n            // Make hljs available on window object (required for the line numbers library)\r\n            doc.defaultView.hljs = hljs;\r\n            // Load line numbers library\r\n            return loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\r\n          } else {\r\n            this._ready.next(hljs);\r\n            return EMPTY;\r\n          }\r\n        }),\r\n        catchError((e: any) => {\r\n          console.error('Unable to load hljs library', e);\r\n          return EMPTY;\r\n        })\r\n      ).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lazy-Load highlight.js library\r\n   */\r\n  private _loadLibrary(): Observable<any> {\r\n    return (this._options && this._options.languages && Object.keys(this._options.languages).length)\r\n      ? from(loadCoreLibrary()).pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)))\r\n      : from(loadAllLibrary());\r\n  }\r\n\r\n  /**\r\n   * Lazy-load highlight.js languages\r\n   */\r\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\r\n    const languages = Object.entries(this._options.languages).map(([langName, langLoader]) =>\r\n      importModule(langLoader()).pipe(\r\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\r\n      )\r\n    );\r\n    return zip(...languages).pipe(map(() => hljs));\r\n  }\r\n}\r\n\r\n/**\r\n * Import highlight.js core library\r\n */\r\nfunction loadCoreLibrary(): Observable<HighlightLibrary> {\r\n  return importModule(import('highlight.js/lib/highlight'));\r\n}\r\n\r\n/**\r\n * Import highlight.js library with all languages\r\n */\r\nfunction loadAllLibrary(): Observable<HighlightLibrary> {\r\n  return importModule(import('highlight.js'));\r\n}\r\n\r\n/**\r\n * Import line numbers library\r\n */\r\nfunction loadLineNumbers(): Observable<any> {\r\n  return importModule(import('highlightjs-line-numbers.js'));\r\n}\r\n\r\n/**\r\n * Map loader response to module object\r\n */\r\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\r\n  return from(moduleLoader).pipe(\r\n    filter((module: any) => !!module && !!module.default),\r\n    map((module: any) => module.default)\r\n  );\r\n};\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\nimport { HighlightLoader } from './highlight.loader';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightJS {\r\n\r\n  private _hljs!: HighlightLibrary;\r\n\r\n  // A reference for hljs library\r\n  get hljs(): HighlightLibrary | null {\r\n    return this._hljs;\r\n  }\r\n\r\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\r\n    // Load highlight.js library on init\r\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\r\n      this._hljs = hljs;\r\n      if (options && options.config) {\r\n        // Set global config if present\r\n        hljs.configure(options.config);\r\n        if (hljs.listLanguages().length < 1) {\r\n          console.error('[HighlightJS]: No languages were registered!');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): Observable<string> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.configure(config))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting(): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\r\n    return this._loader.ready.pipe(\r\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): Observable<string[]> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Display line numbers\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\r\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  Inject,\r\n  Optional,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SecurityContext\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { animationFrameScheduler } from 'rxjs';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.hljs]': 'true'\r\n  },\r\n  selector: '[highlight]'\r\n})\r\nexport class Highlight implements OnChanges {\r\n\r\n  // Highlighted Code\r\n  private readonly _nativeElement: HTMLElement;\r\n\r\n  // Temp observer to observe when line numbers has been added to code element\r\n  private _lineNumbersObs: any;\r\n\r\n  // Highlight code input\r\n  @Input('highlight') code!: string;\r\n\r\n  // An optional array of language names and aliases restricting detection to only those languages.\r\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\r\n  @Input() languages!: string[];\r\n\r\n  // Show line numbers\r\n  @Input() lineNumbers!: boolean;\r\n\r\n  // Stream that emits when code string is highlighted\r\n  @Output() highlighted = new EventEmitter<HighlightResult>();\r\n\r\n  constructor(el: ElementRef,\r\n              private _hljs: HighlightJS,\r\n              private _sanitizer: DomSanitizer,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    this._nativeElement = el.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (\r\n      changes.code &&\r\n      changes.code.currentValue &&\r\n      changes.code.currentValue !== changes.code.previousValue\r\n    ) {\r\n      this.highlightElement(this.code, this.languages);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection and fix markup.\r\n   * @param code Accepts a string with the code to highlight\r\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightElement(code: string, languages?: string[]): void {\r\n    // Set code text before highlighting\r\n    this.setTextContent(code);\r\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\r\n      // Set highlighted code\r\n      this.setInnerHTML(res.value);\r\n      // Check if user want to show line numbers\r\n      if (this.lineNumbers && this._options && this._options.lineNumbers) {\r\n        this.addLineNumbers();\r\n      }\r\n      // Forward highlight response to the highlighted output\r\n      this.highlighted.emit(res);\r\n    });\r\n  }\r\n\r\n  private addLineNumbers() {\r\n    // Clean up line numbers observer\r\n    this.destroyLineNumbersObserver();\r\n    animationFrameScheduler.schedule(() => {\r\n      // Add line numbers\r\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\r\n      // If lines count is 1, the line numbers library will not add numbers\r\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\r\n      this._lineNumbersObs = new MutationObserver(() => {\r\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\r\n          this._nativeElement.classList.add('hljs-line-numbers');\r\n        }\r\n        this.destroyLineNumbersObserver();\r\n      });\r\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\r\n    });\r\n  }\r\n\r\n  private destroyLineNumbersObserver() {\r\n    if (this._lineNumbersObs) {\r\n      this._lineNumbersObs.disconnect();\r\n      this._lineNumbersObs = null;\r\n    }\r\n  }\r\n\r\n  private setTextContent(content: string) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.textContent = content\r\n    );\r\n  }\r\n\r\n  private setInnerHTML(content: string) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content)\r\n    );\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Highlight } from './highlight';\r\n\r\n@NgModule({\r\n  declarations: [Highlight],\r\n  exports: [Highlight]\r\n})\r\nexport class HighlightModule {\r\n}\r\n"]}