{"version":3,"file":"ngx-highlightjs-plus.js","sources":["ngx-highlightjs/plus/gist.model.ts","ngx-highlightjs/plus/code-loader.ts","ngx-highlightjs/plus/gist.ts","ngx-highlightjs/plus/code-from-url.ts","ngx-highlightjs/plus/highlight-plus.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface GistOptions {\r\n  clientId: string;\r\n  clientSecret: string;\r\n}\r\n\r\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\r\n\r\ninterface Owner {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface User {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface ChangeStatus {\r\n  total: number;\r\n  additions: number;\r\n  deletions: number;\r\n}\r\n\r\ninterface History {\r\n  user: User;\r\n  version: string;\r\n  committed_at: Date;\r\n  change_status: ChangeStatus;\r\n  url: string;\r\n}\r\n\r\ninterface Files {\r\n  [fileName: string]: {\r\n    filename: string;\r\n    type: string;\r\n    language: string;\r\n    raw_url: string;\r\n    size: number;\r\n    truncated: boolean;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface Gist {\r\n  url: string;\r\n  forks_url: string;\r\n  commits_url: string;\r\n  id: string;\r\n  node_id: string;\r\n  git_pull_url: string;\r\n  git_push_url: string;\r\n  html_url: string;\r\n  files: Files;\r\n  public: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n  description: string;\r\n  comments: number;\r\n  user?: any;\r\n  comments_url: string;\r\n  owner: Owner;\r\n  forks: any[];\r\n  history: History[];\r\n  truncated: boolean;\r\n}\r\n\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\r\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeLoader {\r\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\r\n  }\r\n\r\n  /**\r\n   * Get plus code\r\n   * @param id Gist ID\r\n   */\r\n  getCodeFromGist(id: string): Observable<Gist> {\r\n    let params: HttpParams;\r\n    if (this.isOAuthProvided()) {\r\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\r\n    }\r\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\r\n  }\r\n\r\n  /**\r\n   * Get code by URL\r\n   * @param url File raw link\r\n   */\r\n  getCodeFromUrl(url: string): Observable<string> {\r\n    return this.fetchFile(url, { responseType: 'text' });\r\n  }\r\n\r\n  /**\r\n   * Check if OAuth option is provided\r\n   */\r\n  private isOAuthProvided(): boolean {\r\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\r\n  }\r\n\r\n  private fetchFile(url: string, options: any): Observable<any> {\r\n    // Check if URL is valid\r\n    if (isUrl(url)) {\r\n      return this._http.get(url, options).pipe(\r\n        // Catch response\r\n        publishReplay(1),\r\n        refCount(),\r\n        catchError((err: Error) => {\r\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\r\n          return EMPTY;\r\n        })\r\n      );\r\n    }\r\n    return EMPTY;\r\n  }\r\n\r\n}\r\n\r\nfunction isUrl(url: string) {\r\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n  return regExp.test(url);\r\n}\r\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\r\nimport { CodeLoader } from './code-loader';\r\nimport { Gist } from './gist.model';\r\n\r\n@Directive({\r\n  selector: '[gist]'\r\n})\r\nexport class GistDirective {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  @Input()\r\n  private set gist(value: string) {\r\n    if (value) {\r\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\r\n    }\r\n  }\r\n\r\n  @Output() gistLoad = new EventEmitter<Gist>();\r\n}\r\n\r\n@Pipe({\r\n  name: 'gistFile'\r\n})\r\nexport class GistFilePipe implements PipeTransform {\r\n  transform(gist: Gist, fileName: string): string | null {\r\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CodeLoader } from './code-loader';\r\n\r\n@Pipe({\r\n  name: 'codeFromUrl'\r\n})\r\nexport class CodeFromUrlPipe implements PipeTransform {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  transform(url: string): Observable<string> {\r\n    return this._loader.getCodeFromUrl(url);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n// Uncomment the following line for development\r\n// import { HighlightModule } from '../../src/public-api';\r\nimport { GistFilePipe, GistDirective } from './gist';\r\nimport { CodeFromUrlPipe } from './code-from-url';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HighlightModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ],\r\n  exports: [\r\n    HighlightModule,\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ]\r\n})\r\nexport class HighlightPlusModule {\r\n}\r\n"]}