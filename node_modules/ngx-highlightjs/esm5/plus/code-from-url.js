/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { CodeLoader } from './code-loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './code-loader';
var CodeFromUrlPipe = /** @class */ (function () {
    function CodeFromUrlPipe(_loader) {
        this._loader = _loader;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    CodeFromUrlPipe.prototype.transform = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this._loader.getCodeFromUrl(url);
    };
    /** @nocollapse */
    CodeFromUrlPipe.ctorParameters = function () { return [
        { type: CodeLoader }
    ]; };
CodeFromUrlPipe.ɵfac = function CodeFromUrlPipe_Factory(t) { return new (t || CodeFromUrlPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CodeLoader)); };
CodeFromUrlPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "codeFromUrl", type: CodeFromUrlPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeFromUrlPipe, [{
        type: Pipe,
        args: [{
                name: 'codeFromUrl'
            }]
    }], function () { return [{ type: ɵngcc1.CodeLoader }]; }, null); })();
    return CodeFromUrlPipe;
}());
export { CodeFromUrlPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CodeFromUrlPipe.prototype._loader;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1mcm9tLXVybC5qcyIsInNvdXJjZXMiOlsibmd4LWhpZ2hsaWdodGpzL3BsdXMvY29kZS1mcm9tLXVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBRTNDO0FBR2dCLElBRWQseUJBQW9CLE9BQW1CO0FBQ3pDLFFBRHNCLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBRSxJQUN6QyxDQUFDO0FBQ0g7QUFDTztBQUF1QjtBQUM1QjtBQUFTLElBRFQsbUNBQVM7QUFBUTtBQUF1QjtBQUM1QjtBQUFTLElBRHJCLFVBQVUsR0FBVztBQUFLLFFBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUMsSUFBRSxDQUFDLENBUE07QUFBRTs0QkFIVixJQUFJLFNBQUMsekNBRzZCO0dBRmpDLElBQUksRUFBRSxhQUFhLHRCQUlnQixnQkFQNUIsVUFBVTtBQUFJO0NBSXRCOzs7Ozs7OzJFQUorQjtBQUFFLElBYWxDLHNCQUFDO0FBQ0EsQ0FEQSxBQVhELElBV0M7QUFDRCxTQVRhLGVBQWU7QUFBSztBQUFjO0FBQVM7QUFFekM7QUFBaUI7QUFBUyxJQUEzQixrQ0FBMkI7O0FBVEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBVkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFYQSxBQVdBLEFBUkEsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29kZUxvYWRlciB9IGZyb20gJy4vY29kZS1sb2FkZXInO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdjb2RlRnJvbVVybCdcclxufSlcclxuZXhwb3J0IGNsYXNzIENvZGVGcm9tVXJsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sb2FkZXI6IENvZGVMb2FkZXIpIHtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybSh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVyLmdldENvZGVGcm9tVXJsKHVybCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==