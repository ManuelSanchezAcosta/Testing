/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Pipe, Input, Output, EventEmitter } from '@angular/core';
import { CodeLoader } from './code-loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './code-loader';
var GistDirective = /** @class */ (function () {
    function GistDirective(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    Object.defineProperty(GistDirective.prototype, "gist", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value) {
                this._loader.getCodeFromGist(value).subscribe((/**
                 * @param {?} gist
                 * @return {?}
                 */
                function (gist) { return _this.gistLoad.emit(gist); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    GistDirective.ctorParameters = function () { return [
        { type: CodeLoader }
    ]; };
    GistDirective.propDecorators = {
        gist: [{ type: Input }],
        gistLoad: [{ type: Output }]
    };
GistDirective.ɵfac = function GistDirective_Factory(t) { return new (t || GistDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CodeLoader)); };
GistDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GistDirective, selectors: [["", "gist", ""]], inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GistDirective, [{
        type: Directive,
        args: [{
                selector: '[gist]'
            }]
    }], function () { return [{ type: ɵngcc1.CodeLoader }]; }, { gistLoad: [{
            type: Output
        }], gist: [{
            type: Input
        }] }); })();
    return GistDirective;
}());
export { GistDirective };
if (false) {
    /** @type {?} */
    GistDirective.prototype.gistLoad;
    /**
     * @type {?}
     * @private
     */
    GistDirective.prototype._loader;
}
var GistFilePipe = /** @class */ (function () {
    function GistFilePipe() {
    }
    /**
     * @param {?} gist
     * @param {?} fileName
     * @return {?}
     */
    GistFilePipe.prototype.transform = /**
     * @param {?} gist
     * @param {?} fileName
     * @return {?}
     */
    function (gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    };
GistFilePipe.ɵfac = function GistFilePipe_Factory(t) { return new (t || GistFilePipe)(); };
GistFilePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gistFile", type: GistFilePipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GistFilePipe, [{
        type: Pipe,
        args: [{
                name: 'gistFile'
            }]
    }], function () { return []; }, null); })();
    return GistFilePipe;
}());
export { GistFilePipe };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5qcyIsInNvdXJjZXMiOlsibmd4LWhpZ2hsaWdodGpzL3BsdXMvZ2lzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBaUIsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUczQztBQUdVLElBRVIsdUJBQW9CLE9BQW1CO0FBQ3pDLFFBRHNCLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBRSxRQVUvQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztBQUNoRCxJQVZFLENBQUM7QUFDSCxJQUNFLHNCQUNZLCtCQUFJO0FBQUs7QUFDbkI7QUFDRztBQUE2QjtBQUF3QjtBQUFhLFFBSHZFLFVBQ2lCLEtBQWE7QUFDaEMsWUFGRSxpQkFLQztBQUNILFlBSkksSUFBSSxLQUFLLEVBQUU7QUFDZixnQkFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTO0FBQU87QUFBb0M7QUFJOUU7QUFBcUIsZ0JBSmUsVUFBQyxJQUFVLElBQUssT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBeEIsQ0FBd0IsRUFBQyxDQUFDO0FBQzlGLGFBQUs7QUFDTCxRQUFFLENBQUM7QUFDRjtBQUN5QjtBQUV6QixPQUpFLEFBVk07QUFBRTswQkFIVixTQUFTLFNBQUMsNUNBS1I7UUFKRCxRQUFRLEVBQUUsUUFBUSwxQkFPWCxnQkFYQSxVQUFVO0FBQUk7SUFLdEIsSkFMaUM7QUFDUCx1QkFVeEIsS0FBSztBQUNOLDJCQU1DLE1BQU07QUFBSzs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUUsSUFDdEIsb0JBQUM7QUFDQSxDQURBLEFBaEJELElBZ0JDO0FBQ0QsU0FkYSxhQUFhO0FBQ3pCO0FBQ1k7QUFBc0IsSUFVakMsaUNBQThDO0FBQ2hEO0FBRUk7QUFDUztBQUVQO0FBQVMsSUFoQkQsZ0NBQTJCO0FBQUU7QUFhM0M7QUFHZ0IsSUFIaEI7QUFDa0IsSUFNbEIsQ0FBQztBQUNEO0FBQVM7QUFBd0I7QUFBNEI7QUFBb0I7QUFBUyxJQUp4RixnQ0FBUztBQUFRO0FBQXdCO0FBQ2hDO0FBQW9CO0FBQVMsSUFEdEMsVUFBVSxJQUFVLEVBQUUsUUFBZ0I7QUFBSyxRQUN6QyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzlGLElBQUUsQ0FBQztrREFORixJQUFJLFNBQUMsdUJBQ0osSUFBSTtBQUFFLFVBQVUsbUJBQ2pCOzs7Ozs7Z0RBQ1E7QUFBRSxJQUlYLG1CQUFDO0FBQ0EsQ0FEQSxBQVBELElBT0M7O0FBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVEEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQURBLEFBQ0EsQUFBQSxBQURBLEFBS0EsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFiQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEEsQUFBQSxBQVdBLEFBQUEsQUFPQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBaEJBLEFBZ0JBLEFBYkEsQUFBQSxBQVlBLEFBQUEsQUFWQSxBQUFBLEFBYUEsQUFBQSxBQU9BLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUtBLEFBQUEsQUFBQSxBQVBBLEFBT0EsQUFKQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBQaXBlLCBJbnB1dCwgT3V0cHV0LCBQaXBlVHJhbnNmb3JtLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29kZUxvYWRlciB9IGZyb20gJy4vY29kZS1sb2FkZXInO1xyXG5pbXBvcnQgeyBHaXN0IH0gZnJvbSAnLi9naXN0Lm1vZGVsJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2dpc3RdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR2lzdERpcmVjdGl2ZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2xvYWRlcjogQ29kZUxvYWRlcikge1xyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBwcml2YXRlIHNldCBnaXN0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICB0aGlzLl9sb2FkZXIuZ2V0Q29kZUZyb21HaXN0KHZhbHVlKS5zdWJzY3JpYmUoKGdpc3Q6IEdpc3QpID0+IHRoaXMuZ2lzdExvYWQuZW1pdChnaXN0KSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgZ2lzdExvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPEdpc3Q+KCk7XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ2lzdEZpbGUnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHaXN0RmlsZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0oZ2lzdDogR2lzdCwgZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgcmV0dXJuIChnaXN0ICYmIGdpc3QuZmlsZXMgJiYgZ2lzdC5maWxlc1tmaWxlTmFtZV0pID8gZ2lzdC5maWxlc1tmaWxlTmFtZV0uY29udGVudCA6IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==