{"version":3,"file":"angular-archwizard.umd.js","sources":["angular-archwizard/node_modules/tslib/tslib.es6.js","angular-archwizard/out/directives/wizard-step-title.directive.ts","angular-archwizard/out/util/wizard-step.interface.ts","angular-archwizard/out/navigation/navigation-mode.interface.ts","angular-archwizard/out/navigation/free-navigation-mode.ts","angular-archwizard/out/util/wizard-completion-step.interface.ts","angular-archwizard/out/navigation/semi-strict-navigation-mode.ts","angular-archwizard/out/navigation/strict-navigation-mode.ts","angular-archwizard/out/navigation/navigation-mode.provider.ts","angular-archwizard/out/navigation/wizard-state.model.ts","angular-archwizard/out/components/wizard.component.ts","angular-archwizard/out/components/wizard-completion-step.component.ts","angular-archwizard/out/components/wizard-navigation-bar.component.ts","angular-archwizard/out/components/wizard-step.component.ts","angular-archwizard/out/directives/enable-back-links.directive.ts","angular-archwizard/out/util/step-offset.interface.ts","angular-archwizard/out/util/step-id.interface.ts","angular-archwizard/out/util/step-index.interface.ts","angular-archwizard/out/directives/go-to-step.directive.ts","angular-archwizard/out/directives/next-step.directive.ts","angular-archwizard/out/directives/optional-step.directive.ts","angular-archwizard/out/directives/previous-step.directive.ts","angular-archwizard/out/directives/reset-wizard.directive.ts","angular-archwizard/out/directives/selected-step.directive.ts","angular-archwizard/out/directives/wizard-completion-step.directive.ts","angular-archwizard/out/directives/wizard-step.directive.ts","angular-archwizard/out/archwizard.module.ts"],"names":["Directive","TemplateRef","EventEmitter","isBoolean","ContentChild","Input","Output","HostBinding","tslib_1.__extends","Injectable","tslib_1.__values","Component","ViewEncapsulation","ContentChildren","forwardRef","Host","Optional","HostListener","NgModule","CommonModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAkF;AACzB;AACqB;AACH;AACzB;AAE0B;AACV;AACN;AAClC;AAEwC;AAC7C;AAC6C;AAGlE,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;AAAI,KACxC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;AAAI,IAChF,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAExE,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;AAAE,IAC9B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAAC,IACrB,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;AAAC,IACxC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AAAC,CACzF;AAQA;AAUA;AAOA;AAIA;AAIA;AASA;AA4BA;AAIA;AAEM,SAAS,QAAQ,CAAC,CAAC,EAAE;AAAE,IAC1B,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AAAC,IACnE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAAC,IACzB,OAAO;AAAE,QACL,IAAI,EAAE,YAAY;AAAE,YAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;AAAC,YACpC,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;AAAC,SAC5C;AAAC,KACL,CAAC;AAAC,CACN;AAEM,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;AAAE,IAC3B,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAAC,IAC5D,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AAAC,IAClB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AAAC,IAClC,IAAI;AAAE,QACF,OAAO,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAAC,KAC/E;AAAC,IACF,OAAO,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE;AAAC,YAChC;AAAE,QACN,IAAI;AAAE,YACF,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAAC,SACrD;AAAC,gBACM,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;AAAC,KACrC;AAAC,IACF,OAAO,EAAE,CAAC;AAAC,CACd;AAEM,SAAS,QAAQ,GAAG;AAAE,IACzB,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE;AAAE,QAChD,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAAC,IAC1C,OAAO,EAAE,CAAC;AAAC,CACd;AAAC;AC7GF,IAAA,wBAAA,kBAAA,YAAA;AAAE,IAMA,SAAF,wBAAA,CAAqB,WAA6B,EAAlD;AAAE,QAAmB,IAArB,CAAA,WAAgC,GAAX,WAAW,CAAkB;AAAC;;;;;;;;4EAAI;AACvD;AACmC,KARlC;4CAHD,EAAA,IAAA,EAACA,pDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,kBACT,5BAKE,IAvBJ,EAAA,IAAA,EAAmBC,gBAAW,GAA9B;GAkBU,EAAE,LAlBV;ACQF,IAAA,UAAA,kBAAA,YAAA;WDUsE,cACrE,EAAD,3BCXE;CDWF,DCX8B,QA0B9B,IAAA,CAAA,gBAAA,GAA8C,EAAE,MAAM,EAAE,EAAE,EAAE,CAA5D;AAAC,QAKD,IAAA,CAAA,SAAA,GAAqB,KAAK,CAA1B;AAAC,QAKD,IAAA,CAAA,QAAA,GAAoB,KAAK,CAAzB;AAAC,QAKD,IAAA,CAAA,eAAA,GAA2B,KAAK,CAAhC;AAAC,QAKD,IAAA,CAAA,QAAA,GAAoB,KAAK,CAAzB;AAAC,QAMD,IAAA,CAAA,QAAA,GAA8H,IAAI,CAAlI;AAAC,QAMD,IAAA,CAAA,OAAA,GAA6H,IAAI,CAAjI;AAAC,QAOD,IAAA,CAAA,SAAA,GAAoD,IAAIC,iBAAY,EAAmB,CAAvF;AAAC,QAOD,IAAA,CAAA,QAAA,GAAmD,IAAIA,iBAAY,EAAmB,CAAtF;AAAC;AAAM,IAOP,MAAA,CAAA,cAAA,CAAa,UAAb,CAAA,SAAA,EAAA,QAAmB,EAAnB;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC1B;AAGA;AAA0B;AAA2B;AAAQ,IAQ5C,UAAjB,CAAA,iBAAkC,GAAxB,UAAyB,SAES,EACT,SAA0B,EAH7D;AAAE,QAIE,IAAIC,cAAS,CAAC,SAAS,CAAC,EAAE;AAC9B,YAAM,OAAO,OAAO,CAAC,OAAO,EAAC,SAAoB,EAAC,CAAC;AACnD,SAAK;AAAC,aAAK,IAAI,SAAS,YAAY,QAAQ,EAAE;AAC9C,YAAM,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AACnD,SAAK;AAAC,aAAK;AACX,YAAM,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,eAAtC,GAAsD,SAAS,GAA/D,uCAAsG,CAAC,CAAC,CAAC;AACzG,SAAK;AACL;AAEE,IAKO,UAAT,CAAA,SAAA,CAAA,KAAc,GAAL,UAAM,SAA0B,EAAzC;AAAE,QACE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnC;AAEE,IAKO,UAAT,CAAA,SAAA,CAAA,IAAa,GAAJ,UAAK,SAA0B,EAAxC;AAAE,QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClC;AAEE,IASO,UAAT,CAAA,SAAA,CAAA,YAAqB,GAAZ,UAAa,SAA0B,EAAhD;AAAE,QACE,OAAO,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAClE;AAEE,IASO,UAAT,CAAA,SAAA,CAAA,WAAoB,GAAX,UAAY,SAA0B,EAA/C;AAAE,QACE,OAAO,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACjE;;;;;;;;;;AAEA;AAAC;AAAuB;AAAM;AAA8B,IA/I5D,mBAAA,EAAA,CAAA,EAAA,IAAA,EAAGC,iBAAY,EAAf,IAAA,EAAA,CAAgB,wBAAwB,EAAxC,EAAA,EAAA;AAAE,IAMF,QAAA,EAAA,CAAA,EAAA,IAAA,EAAGC,UAAK,EAAR,EAAA;AAAE,IAOF,WAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAMF,kBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IA0BF,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAMF,SAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAOF,WAAA,EAAA,CAAA,EAAA,IAAA,EAAGC,WAAM,EAAT,EAAA;AAAE,IAOF,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IAOF,QAAA,EAAA,CAAA,EAAA,IAAA,EAAGC,gBAAW,EAAd,IAAA,EAAA,CAAe,QAAQ,EAAvB,EAAA,EAAA;AAAE;AAAG;AACD;AAAiB;AACf;AAAa;AAAG;AAIkB;AACrC;ACvFH,IAAA,cAAA,kBAAA,YAAA;AAAE,IACA,SAAF,cAAA,CAAwB,WAAwB,EAAhD;AAAE,QAAsB,IAAxB,CAAA,WAAmC,GAAX,WAAW,CAAa;AAAC,KAC9C;AACH,IAqCE,cAAF,CAAA,SAAA,CAAA,gBAAkB,GAAhB,UAAiB,WAAgC,EAAE,YAAiC,EAAtF;AAAE,QACE,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,EAAE;AAC5C,YAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AACtF,SAAK;AACL,KAAG,CAAH;AAAC,IAKC,cAAF,CAAA,SAAA,CAAA,YAAc,GAAZ,UAAa,WAAgC,EAAE,YAAiC,EAAlF;AAAE,QACE,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AACxC,YAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AACtF,SAAK;AACL,KAAG,CAAH;AAAC,IACD,OAAA,cAAC,CAAD;AAAC,CAAA,EAAD,CAAA,CAAC;ACpDD,IAAA,kBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAsCC,SAAxCA,CAAAA,kBAAAA,EAAAA,MAAAA,CAAAA,CAAsD;AAAC,IAMrD,SAAF,kBAAA,CAAc,WAAwB,EAAtC;AAAE,QACF,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EAAU,WAAW,CAAC,IAAtB,IAAA,CAAA;AAAC,KACE;AACH,IAUE,kBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAgBG;AACH,QAhBI,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC/D,QACI,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAClF,QACI,IAAM,kBAAkB,GAAG,UAAC,QAAiB,EAAjD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3G,SAAK,CAAC;AACN,QACI,IAAM,uBAAuB,GAAG,UAAC,QAAiB,EAAtD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACjI,SAAK,CAAC;AACN,QACI,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AACnC,aAAO,IAAI,CAAC,kBAAkB,CAAC;AAC/B,aAAO,IAAI,CAAC,uBAAuB,CAAC,CAAC;AACrC,KAAG,CAAH;AAAC,IAkBC,kBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,UAAS,gBAAwB,EAAE,WAAgC,EAAE,YAAiC,EAAxG;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAgCG;AACH,QAhCI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,iBAAiB,EAA7D;AAAE,YACI,IAAI,iBAAiB,EAAE;AAC7B,gBACQ,IAAM,eAAe,GAAoB,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AACvG,gBAEQ,IAAI,WAAW,EAAE;AACzB,oBAAU,WAAW,CAAC,IAAI,EAAE,CAAC;AAC7B,iBAAS;AACT,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;AACtD,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtD,gBACQ,KAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AAC7D,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAC5D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrD,gBAEQ,IAAI,YAAY,EAAE;AAC1B,oBAAU,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,iBAAS;AACT,aAAO;AAAC,iBAAK;AACb,gBACQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAChE,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACjE,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG,CAAH;AAAC,IAEC,kBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QACE,OAAO,IAAI,CAAC;AAChB,KAAG,CAAH;AAAC,IAOC,kBAAF,CAAA,SAAA,CAAA,KAAO,GAAL,YAAF;AAAE,QAEE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE;AACtE,YAAM,MAAM,IAAI,KAAK,CAAC,+CAAtB,GAAsE,IAAI,CAAC,WAAW,CAAC,gBAAkB,CAAC,CAAC;AAC3G,SAAK;AACL,QAEI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI,EAA7C;AAAE,YACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,YAAM,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC5B,SAAK,CAAC,CAAC;AACP,QAEI,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;AAC1E,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjD,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;AACjE,KAAG,CAAH;AAAC,IACD,OAAA,kBAAC,CAAD;AAAC,CAAA,CAjHuC,cAAc,CAiHtD,CAAA,CAAC;ACnHD,IAAA,oBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAiDA,SAAnDA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA,CAA6D;AAAC;AAIvD;AAGK,QAHZ,KAAA,CAAA,QAAA,GAAoB,IAAIN,iBAAY,EAAmB,CAAvD;AAAC,QAKD,KAAA,CAAA,OAAA,GAAwE,KAAK,CAA7E;AAAC;AAAsB;AAAM,IAKpB,oBAAT,CAAA,SAAA,CAAA,KAAc,GAAL,UAAM,SAA0B,EAAzC;AAAE,QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnC;AAEE,IAGO,oBAAT,CAAA,SAAA,CAAA,IAAa,GAAJ,UAAK,SAA0B,EAAxC;AAAE,QAEE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC3B,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClC;;;yGAEA;AAAC,IADD,OAAA,oBAAC,CAAD;AAAC,CAAA,CA3BkD,UAAU,CA2B7D,CAAA,CAAC;ACtBD,IAAA,wBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAA4CM,SAA9CA,CAAAA,wBAAAA,EAAAA,MAAAA,CAAAA,CAA4D;AAAC,IAM3D,SAAF,wBAAA,CAAc,WAAwB,EAAtC;AAAE,QACF,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EAAU,WAAW,CAAC,IAAtB,IAAA,CAAA;AAAC,KACE;AACH,IAWE,wBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CA+BG;AACH,QA/BI,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC/D,QACI,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAClF,QACI,IAAM,kBAAkB,GAAG,UAAC,QAAiB,EAAjD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3G,SAAK,CAAC;AACN,QACI,IAAM,uBAAuB,GAAG,UAAC,QAAiB,EAAtD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACjI,SAAK,CAAC;AACN,QAEI,IAAM,eAAe,GAAG,UAAC,QAAiB,EAA9C;AAAE,YACI,IAAI,QAAQ,EAAE;AACpB,gBAAQ,IAAM,uBAAuB,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW;AACpE,qBAAW,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,EAA9B,EAAmC,OAAA,KAAK,GAAG,gBAAgB,CAA3D,EAA2D,CAAC;AAC5D,qBAAW,KAAK,CAAC,UAAA,IAAI,EAArB,EAAyB,OAAA,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAzE,EAAyE,CAAC,CAAC;AAC3E,gBACQ,OAAO,OAAO,CAAC,OAAO,CACpB,EAAE,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,YAAY,oBAAoB,CAAC,IAAI,uBAAuB,CAAC,CAAC;AAC3H,aAAO;AAAC,iBAAK;AACb,gBAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACtC,aAAO;AACP,SAAK,CAAC;AACN,QACI,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AACnC,aAAO,IAAI,CAAC,kBAAkB,CAAC;AAC/B,aAAO,IAAI,CAAC,uBAAuB,CAAC;AACpC,aAAO,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7B,KAAG,CAAH;AAAC,IAkBC,wBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,UAAS,gBAAwB,EAAE,WAAgC,EAAE,YAAiC,EAAxG;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAgCG;AACH,QAhCI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,iBAAiB,EAA7D;AAAE,YACI,IAAI,iBAAiB,EAAE;AAC7B,gBACQ,IAAM,eAAe,GAAoB,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AACvG,gBAEQ,IAAI,WAAW,EAAE;AACzB,oBAAU,WAAW,CAAC,IAAI,EAAE,CAAC;AAC7B,iBAAS;AACT,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;AACtD,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtD,gBACQ,KAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AAC7D,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAC5D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrD,gBAEQ,IAAI,YAAY,EAAE;AAC1B,oBAAU,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,iBAAS;AACT,aAAO;AAAC,iBAAK;AACb,gBACQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAChE,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACjE,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG,CAAH;AAAC,IAKC,wBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QACE,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,YAAY,oBAAoB,EAAE;AAC3F,YACM,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,EAA7D,EAAkE,OAAA,KAAK,GAAG,gBAAgB,CAA1F,EAA0F,CAAC;AAC3F,iBAAS,KAAK,CAAC,UAAA,IAAI,EAAnB,EAAuB,OAAA,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAvE,EAAuE,CAAC,CAAC;AACzE,SAAK;AAAC,aAAK;AACX,YACM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,KAAG,CAAH;AAAC,IAKC,wBAAF,CAAA,SAAA,CAAA,KAAO,GAAL,YAAF;AAAE,QAEE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE;AACtE,YAAM,MAAM,IAAI,KAAK,CAAC,+CAAtB,GAAsE,IAAI,CAAC,WAAW,CAAC,gBAAkB,CAAC,CAAC;AAC3G,SAAK;AACL,QAEI,IAAM,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,oBAAoB;AACpI,YAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC;AAChD,QACI,IAAI,qBAAqB,EAAE;AAC/B,YAAM,MAAM,IAAI,KAAK,CAAC,yBAAtB,GAAgD,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAjF,+BAAgH,CAAC,CAAC;AAClH,SAAK;AACL,QAEI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI,EAA7C;AAAE,YACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,YAAM,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC5B,SAAK,CAAC,CAAC;AACP,QAEI,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;AAC1E,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjD,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;AACjE,KAAG,CAAH;AAAC,IACD,OAAA,wBAAC,CAAD;AAAC,CAAA,CAjJ6C,cAAc,CAiJ5D,CAAA,CAAC;AClJD,IAAA,oBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAwCA,SAA1CA,CAAAA,oBAAAA,EAAAA,MAAAA,CAAAA,CAAwD;AAAC,IAMvD,SAAF,oBAAA,CAAc,WAAwB,EAAtC;AAAE,QACF,OAAI,MAAJ,CAAA,IAAA,CAAA,IAAA,EAAU,WAAW,CAAC,IAAtB,IAAA,CAAA;AAAC,KACE;AACH,IAWE,oBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CA4BG;AACH,QA5BI,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC/D,QACI,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAClF,QACI,IAAM,kBAAkB,GAAG,UAAC,QAAiB,EAAjD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3G,SAAK,CAAC;AACN,QACI,IAAM,uBAAuB,GAAG,UAAC,QAAiB,EAAtD;AAAE,YACI,OAAO,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACjI,SAAK,CAAC;AACN,QACI,IAAM,wBAAwB,GAAG,UAAC,QAAiB,EAAvD;AAAE,YACI,IAAI,QAAQ,EAAE;AACpB,gBAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW;AAC3D,qBAAW,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,EAA9B,EAAmC,OAAA,KAAK,GAAG,gBAAgB,IAAI,KAAK,KAAK,KAAI,CAAC,WAAW,CAAC,gBAAgB,CAA1G,EAA0G,CAAC;AAC3G,qBAAW,KAAK,CAAC,UAAA,IAAI,EAArB,EAAyB,OAAA,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAxD,EAAwD,CAAC,CAChD,CAAC;AACV,aAAO;AAAC,iBAAK;AACb,gBAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACtC,aAAO;AACP,SAAK,CAAC;AACN,QACI,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AACnC,aAAO,IAAI,CAAC,kBAAkB,CAAC;AAC/B,aAAO,IAAI,CAAC,uBAAuB,CAAC;AACpC,aAAO,IAAI,CAAC,wBAAwB,CAAC,CAAC;AACtC,KAAG,CAAH;AAAC,IAmBC,oBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,UAAS,gBAAwB,EAAE,WAAgC,EAAE,YAAiC,EAAxG;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAoCG;AACH,QApCI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,iBAAiB,EAA7D;AAAE,YACI,IAAI,iBAAiB,EAAE;AAC7B,gBAAQ,IAAM,eAAe,GAAoB,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AACvG,gBAEQ,IAAI,WAAW,EAAE;AACzB,oBAAU,WAAW,CAAC,IAAI,EAAE,CAAC;AAC7B,iBAAS;AACT,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;AACtD,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtD,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW;AACpC,qBAAW,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,EAA9B,EAAmC,OAAA,KAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,KAAK,GAAG,gBAAgB,CAAnH,EAAmH,CAAC;AACpH,qBAAW,OAAO,CAAC,UAAA,IAAI,EAAvB,EAA2B,OAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAjD,EAAiD,CAAC,CAAC;AACnD,gBACQ,KAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AAC7D,gBAEQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAC5D,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrD,gBAEQ,IAAI,YAAY,EAAE;AAC1B,oBAAU,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,iBAAS;AACT,aAAO;AAAC,iBAAK;AACb,gBACQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAChE,gBAAQ,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACjE,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG,CAAH;AAAC,IAEC,oBAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,gBAAwB,EAAtC;AAAE,QAEE,OAAO,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;AAChE,KAAG,CAAH;AAAC,IAOC,oBAAF,CAAA,SAAA,CAAA,KAAO,GAAL,YAAF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAyBG;AACH,QAxBI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE;AACtE,YAAM,MAAM,IAAI,KAAK,CAAC,+CAAtB,GAAsE,IAAI,CAAC,WAAW,CAAC,gBAAkB,CAAC,CAAC;AAC3G,SAAK;AACL,QAEI,IAAM,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW;AAC3D,aAAO,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,EAA1B,EAA+B,OAAA,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,gBAAgB,CAAxE,EAAwE,CAAC;AACzE,aAAO,IAAI,CAAC,UAAA,IAAI,EAAhB,EAAoB,OAAA,CAAC,IAAI,CAAC,QAAQ,CAAlC,EAAkC,CAAC,CAAC;AACpC,QACI,IAAI,kBAAkB,EAAE;AAC5B,YAAM,MAAM,IAAI,KAAK,CAAC,yBAAtB,GAAgD,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAjF,uCAAwH,CAAC,CAAC;AAC1H,SAAK;AACL,QAEI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI,EAA7C;AAAE,YACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC7B,YAAM,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC5B,SAAK,CAAC,CAAC;AACP,QAEI,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;AAC1E,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjD,QAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;AACjE,KAAG,CAAH;AAAC,IACD,OAAA,oBAAC,CAAD;AAAC,CAAA,CA7IyC,cAAc,CA6IxD,CAAA,CAAC;AC5ID,SAAA,qBAAA,CAAsC,cAAsB,EAAE,WAAwB,EAAtF;AAAE,IACA,QAAQ,cAAc;AACxB,QAAI,KAAK,MAAM;AACf,YAAM,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;AACjD,QAAI,KAAK,aAAa;AACtB,YAAM,OAAO,IAAI,wBAAwB,CAAC,WAAW,CAAC,CAAC;AACvD,QAAI,KAAK,QAAQ,CAAC;AAClB,QAAI;AACJ,YAAM,OAAO,IAAI,oBAAoB,CAAC,WAAW,CAAC,CAAC;AACnD,KAAG;AACH,CAAC;ACPD,IAAA,WAAA,kBAAA,YAAA;AAAE,IAgFA,SAAF,WAAA,GAAA;AAAE,QA5EF,IAAA,CAAA,iBAAA,GAA8B,CAAC,CAA/B;AAAC,QAKD,IAAA,CAAA,WAAA,GAA0C,EAAE,CAA5C;AAAC,QAgCD,IAAA,CAAA,gBAAA,GAA4B,CAAC,CAAC,CAA9B;AAAC,KAwCE;AACH,IAjEA,MAAA,CAAA,cAAA,CAAa,WAAb,CAAA,SAAA,EAAA,kBAA6B,EAA7B;AAAE,QAUF,GAAA,EAAA,YAAA;AAAE,YACE,IAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,IAAI,EAAvD,EAA2D,OAAA,IAAI,CAAC,eAAe,CAA/E,EAA+E,CAAC,CAAC;AACjF,YACI,IAAI,gBAAgB,EAAE;AAC1B,gBAAM,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;AACnD,aAAK;AAAC,iBAAK;AACX,gBAAM,OAAO,IAAI,CAAC,iBAAiB,CAAC;AACpC,aAAK;AACL;AAEK,QApBL,GAAA,EAAA,UAA8B,gBAAgB,EAA9C;AAAE,YACE,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;AAC9C;AAGA;AAA0B;AACF;AACvB,IAqCD,MAAA,CAAA,cAAA,CAAa,WAAb,CAAA,SAAA,EAAA,aAAwB,EAAxB;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;AAC7C,gBAAM,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACrD,aAAK;AAAC,iBAAK;AACX,gBAAM,OAAO,IAAI,CAAC;AAClB,aAAK;AACL;AAGA;AAA0B;AACV;AAAQ,IAExB,MAAA,CAAA,cAAA,CAAa,WAAb,CAAA,SAAA,EAAA,WAAsB,EAAtB;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAA,IAAI,EAAtC,EAA0C,OAAA,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAzE,EAAyE,CAAC,CAAC;AAC3E;AAGA;AAEG;AAIF;AAAQ,IAIP,WAAF,CAAA,SAAA,CAAA,oBAAsB,GAApB,UAAqB,qBAA6B,EAApD;AAAE,QACE,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;AAC7E,KAAG,CAAH;AAAC,IAOC,WAAF,CAAA,SAAA,CAAA,iBAAmB,GAAjB,UAAkB,kBAAqC,EAAzD;AAAE,QAEE,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,EAAE;AACnE,YAAM,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAClG,SAAK;AACL,QACI,IAAI,CAAC,WAAW,GAAG,kBAAkB,CAAC;AAC1C,KAAG,CAAH;AAAC,IAQC,WAAF,CAAA,SAAA,CAAA,OAAS,GAAP,UAAQ,SAAiB,EAA3B;AAAE,QACE,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,SAAS,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;AAChG,KAAG,CAAH;AAAC,IAOC,WAAF,CAAA,SAAA,CAAA,eAAiB,GAAf,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;AACnD,KAAG,CAAH;AAAC,IAOC,WAAF,CAAA,SAAA,CAAA,WAAa,GAAX,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;AACnD,KAAG,CAAH;AAAC,IAOC,WAAF,CAAA,SAAA,CAAA,UAAY,GAAV,YAAF;AAAE,QACE,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;AAChG,KAAG,CAAH;AAAC,IAUC,WAAF,CAAA,SAAA,CAAA,cAAgB,GAAd,UAAe,SAAiB,EAAlC;AAAE,QACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAClC,YAAM,MAAM,IAAI,KAAK,CAAC,4CAAtB,GAAmE,SAAS,GAA5E,GAA+E,CAAC,CAAC;AACjF,SAAK;AACL,QACI,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACvC,KAAG,CAAH;AAAC,IASC,WAAF,CAAA,SAAA,CAAA,oBAAsB,GAApB,UAAqB,MAAc,EAArC;AAAE,QACE,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAA,IAAI,EAA1C,EAA8C,OAAA,IAAI,CAAC,MAAM,KAAK,MAAM,CAApE,EAAoE,CAAC,CAAC;AACtE,KAAG,CAAH;AAAC,IASC,WAAF,CAAA,SAAA,CAAA,cAAgB,GAAd,UAAe,IAAgB,EAAjC;AAAE,QACE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC1C,KAAG,CAAH;AAAC,IAQC,WAAF,CAAA,SAAA,CAAA,kBAAoB,GAAlB,UAAmB,eAAuB,EAA5C;AAAE,QACE,IAAI,eAAgC,CAAC;AACzC,QACI,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE;AACjD,YAAM,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC;AACjD,SAAK;AAAC,aAAK,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE;AACxD,YAAM,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC;AAClD,SAAK;AAAC,aAAK;AACX,YAAM,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC;AAC7C,SAAK;AACL,QACI,OAAO,eAAe,CAAC;AAC3B,KAAG;;;;;gDAAH;AAAC;AAEkB,KA1Mf;+BAAJ,EAAA,IAAA,EAACC,eAAU,EAAX,xDAAK;AC4EL,IAAA,eAAA,kBAAA,YAAA;AAAE,IAiFA,SAAF,eAAA,CAAqB,KAAkB,EAAvC;AAAE,QAAmB,IAArB,CAAA,KAA0B,GAAL,KAAK,CAAa;AAAC,QArExC,IAAA,CAAA,cAAA,GAA0B,KAAK,CAA/B;AAAC,QAOD,IAAA,CAAA,YAAA,GAAwB,OAAO,CAA/B;AAAC,QAOD,IAAA,CAAA,eAAA,GAA2B,eAAe,CAA1C;AAAC,QAOD,IAAA,CAAA,cAAA,GAA0B,QAAQ,CAAlC;AAAC,QAMD,IAAA,CAAA,gBAAA,GAA4B,CAAC,CAA7B;AAAC,QAMD,IAAA,CAAA,oBAAA,GAAgC,KAAK,CAArC;AAAC,KAqCE;AACH,IA7BA,MAAA,CAAA,cAAA,CAAa,eAAb,CAAA,SAAA,EAAA,uBAAkC,EAAlC;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,cAAc,KAAK,KAAK,IAAI,IAAI,CAAC,cAAc,KAAK,QAAQ,CAAC;AAC7E;AAGA;AAA0B;AAA2B;AAAQ,IAM7D,MAAA,CAAA,cAAA,CAAa,eAAb,CAAA,SAAA,EAAA,qBAAgC,EAAhC;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,cAAc,KAAK,MAAM,IAAI,IAAI,CAAC,cAAc,KAAK,OAAO,CAAC;AAC7E;AAGA;AAA0B;AAEpB;AAAQ,IAAd,MAAA,CAAA,cAAA,CAAa,eAAb,CAAA,SAAA,EAAA,YAAuB,EAAvB;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;AACrC;AAGA;AAEI;AAA2B;AAAQ,IAUrC,eAAF,CAAA,SAAA,CAAA,WAAa,GAAX,UAAY,OAAsB,EAApC;AAAE;AAAc,YACZ,KAAuB,IAAA,EAA3B,GAA2BC,QAA3B,CAA2B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,EAA/C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA+C,EAA/C,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;AAAE,gBAAO,IAAM,QAAQ,GAAvB,EAAA,CAAA,KAAuB,CAAvB;AAAC,gBACK,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACrC,gBACM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AAC/B,oBAAQ,QAAQ,QAAQ;AACxB,wBAAU,KAAK,kBAAkB;AACjC,4BAAY,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAC5E,4BAAY,MAAM;AAClB,wBAAU,KAAK,sBAAsB;AACrC,4BAAY,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,MAAM,CAAC,YAAY,CAAC;AAClE,4BAAY,MAAM;AAClB,wBAAU,KAAK,gBAAgB;AAC/B,4BAAY,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACjE,4BAAY,MAAM;AAClB,wBACU,QAAQ;AAClB,qBAAS;AACT,iBAAO;AACP,aAAK;AACL;AAEK;AAGa;AACb;AAAkB;AACjB;AAAc;AACb;AAAU;AAAqB,KARnC,CAAH;AAAC,IAKC,eAAF,CAAA,SAAA,CAAA,kBAAoB,GAAlB,YAAF;AAAE,QAAA,IAAF,KAAA,GAAA,IAAA,CAcG;AACH,QAbI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,kBAAkB,EAAzD;AAAE,YACI,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,CAAC;AACjE,SAAK,CAAC,CAAC;AACP,QAEI,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;AAChE,QAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;AACxD,QAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;AAC7D,QAAI,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACzD,QAEI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;AAC5B,KAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAH;AAAC;AAEsB,KAlItB;mCA1CD,EAAA,IAAA,EAACC,3CA0CC;CA1CQ,EAAV,IAAA,EAAA,CAAW,VA0C+C,IAhF1D,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAuCE,AAvCA;EAuCQ,EAAE,WAAW,kBACrB,jCAxCM;MAwCE,EAAE,RAxC+B,IAoF3C,aAAA,EAAA,CAAA,EAAA,IAAA,EAAGE,oBAAe,EAAlB,IAAA,EAAA,CAAmB,UAAU,EAA7B,EAAA,EAAA;AAAE,IAOF,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAGR,UAAK,EAAR,EAAA;AAAE,IAOF,cAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAOF,iBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAOF,gBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAMF,kBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IAMF,sBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,UAAK,EAAR,EAAA;AAAE,IASF,uBAAA,EAAA,CAAA,EAAA,IAAA,EAAGE,gBAAW,EAAd,IAAA,EAAA,CAAe,kBAAkB,EAAjC,EAAA,EAAA;AAAE,IAWF,qBAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,gBAAW,EAAd,IAAA,EAAA,CAAe,gBAAgB,EAA/B,EAAA,EAAA;AAAE;ACrGF,IAAA,6BAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAiDC,SAAnDA,CAAAA,6BAAAA,EAAAA,MAAAA,CAAAA,CAAuE;AAAC,IAAxE,SAAA,6BAAA,GAAA;AAAE;AACD;;;;8CD+BA,kBACC,MAAM,EAAE,CAAC;;;;;;;;;;;AAAgyB,CAAC,kBAC1yB,aAAa,EAAEI,sBAAiB,CAAC,IAAI;AACrC,SAAS,EAAE,CAAC,WAAW,CAAC,cACzB,EAAD,EAAA;;;;;;0BClCI;AAAC;AAA0C,CAF/C,CAAmD,oBAAoB,CAAvE,CAAA,CAAA,AAAC;iDAXD,EAAA,IAAA,EAACD,cAAS,EAAV,zEAWE;EAXF,EAAA,CAAW,kBACT,QAAQ,EAAE,2BAA2B,5DCCvC,IAAA,4BAAA,kBAAA,YAAA;cDAE,QAAQ,EAAE,6BACX,rDCDC,IAoBA,SAAF,4BAAA,CAAqB,WAAwB,EAA7C;cDlBE,MAAM,EAAE,CAAC,vBCkBT,QAAmB,IAArB,CAAA,WAAgC,GAAX,WAAW,CAAa;kCDlBiB,CAAC,nCCkBjB,QAd9C,IAAA,CAAA,SAAA,GAAqB,eAAe,CAApC;AAAC,KAeE;KDlBD,aAAa,EAAEC,sBAAiB,CAAC,IAAI,kBACrC,SAAS,EAAE,5ECkBb,IAXA,MAAA,CAAA,cAAA,CAAa,4BAAb,CAAA,SAAA,EAAA,gBAA2B,EAA3B;YDNI,EAAC,OAAO,EAAE,vBCMZ,QAAF,GAAA,EAAA,YAAA;MDNwB,EAAE,WAAW,EAAEE,eAAU,CAAC,YAAlD,EAAwD,nDCMtD,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;MDPa,NCQxD;wBDRqF,CAArF,zBCWA;CDXqF,CAAC,EAAC,sBACnF,1BCYA;CDZC,DCY0B;ADZnB,EAAE,oBAAoB,EAAE,WAAW,EAAEA,eAAU,CAAC,YAA5D,EAAkE,OAAA,1ECY3B,IAUrC,MAAF,CAAA,cAAA,CAAM,4BAAN,CAAA,SAAA,EAAA,aAAiB,EAAjB;oBDtB+F,CAA/F,EAA+F,CAAC,EAAC,1BCsB/F,QAAF,GAAA,EAAE,YAAF;iBDrBG,cACF,EAAD,EAAA,nCCoBE,YACE,QAAQ,IAAI,CAAC,SAAS;AAC1B,gBAAM,KAAK,eAAe;AAC1B,oBAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;AAC9D,gBAAM,KAAK,eAAe,CAAC;AAC3B,gBAAM;AACN,oBAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;AAC5C,aAAK;AACL,SAAG;AAEH;AACoB;AAA2B,KAH/C,CAAA,CAAG;AACH,IAME,MAAF,CAAA,cAAA,CAAM,4BAAN,CAAA,SAAA,EAAA,qBAAyB,EAAzB;AAAE,QAAF,GAAA,EAAE,YAAF;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC;AAC/C,SAAG;AAEH;AACoB;AAA2B,KAH/C,CAAA,CAAG;AACH,IAOS,4BAAT,CAAA,SAAA,CAAA,SAAkB,GAAT,UAAU,UAAsB,EAAzC;AAAE,QACE,OAAO,UAAU,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;AACvF;AAEE,IAMO,4BAAT,CAAA,SAAA,CAAA,MAAe,GAAN,UAAO,UAAsB,EAAtC;AAAE,QACE,OAAO,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;AACxF;AAEE,IAMO,4BAAT,CAAA,SAAA,CAAA,SAAkB,GAAT,UAAU,UAAsB,EAAzC;AAAE,QACE,OAAO,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;AAChH;AAEE,IAMO,4BAAT,CAAA,SAAA,CAAA,SAAkB,GAAT,UAAU,UAAsB,EAAzC;AAAE,QACE,OAAO,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;AACtF;AAEE,IAMO,4BAAT,CAAA,SAAA,CAAA,UAAmB,GAAV,UAAW,UAAsB,EAA1C;AAAE,QACE,OAAO,UAAU,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAA;AAC9G;AAEE,IAUO,4BAAT,CAAA,SAAA,CAAA,WAAoB,GAAX,UAAY,UAAsB,EAA3C;AAAE,QACE,OAAO,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,oBAAoB;AACzE,YAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACnF;;;;;;;;;;;;;;;;;;;;;oBAEA;AAAC;AAAyC,KAhHzC;gDA5BD,EAAA,IAAA,EAACH,xDA4BC;CA5BQ,EAAV,IAAA,EAAA,CAAW,VA8BU,IA9CrB,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAiBE,AAjBA;EAiBQ,EAAE,0BAA0B,9BAjB9B;AAkBN,QAAQ,EAAE,VAlB4C,IAiDxD,WAAA,EAAA,CAAA,EAAA,IAAA,EAAGN,UAAK,EAAR,EAAA;AAAE;ACUF,IAAA,mBAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAuCG,SAAzCA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA,CAAmD;AAAC,IAApD,SAAA,mBAAA,GAAA;AAAE;AAEiB;;;;0IDrBlB,kBACC,MAAM,EAAE;AAAC;;;;;;;;;;;;;;;0BCoBa;AAAC;AAAgC,CAFzD,CAAyC,UAAU,CAAnD,CAAA,CAAA,AAAC;uCAVD,EAAA,IAAA,EAACG,cAAS,EAAV,/DAUE;EAVF,EAAA,CAAW,kBACT,QAAQ,EAAE,gBAAgB,jDCxB5B,IAAA,wBAAA,kBAAA,YAAA;ODyBE,QAAQ,EAAE,6BACX,9CC1BC,IAaA,SAAF,wBAAA,CAA8B,cAA9B,EAAA;QDcE,MAAM,EAAE,CAAC,jBCdT,QAA4B,IAA9B,CAAA,cAA4C,GAAd,cAAc,CAA5C;WDcmD,CAAC,kBAClD,aAAa,EAAEC,7CCfhB,QAPD,IAAA,CAAA,QAAA,GAAoB,IAAIV,iBAAY,EAAmB,CAAvD;AAAC,KAOsE;YDerC,CAAC,IAAI,kBACrC,SAAS,EAAE,9CCfb,IAIE,wBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,YAAF;IDYI,EAAC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAEY,xCCZrC,QACE,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;WDWU,CAAC,YAAlD,EAAwD,OAAA,mBAAmB,CAA3E,rDCVA,QAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;CDU0B,CAAC,EAAC,JCT7E,KAAG;eDUA,cACF,EAAD,EAAA;;;;;;;;;;;oBCXA;AAAC;AAE+B,KAvB/B;4CAHD,EAAA,IAAA,EAACd,pDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,kBACT,QAAQ,EAAE,qBAAqB,3DAI9B,IA5BH,EAAA,IAAA,EAAQ,oBAAoB,EAA5B,UAAA,EAAA,CAAA,EAAA,IAAA,EAuCee,SAAI,EAvCnB,EAAA,EAAA;CAyBC,EAAD,EAAA,LAzBE;AAAM;AAA4C,IA+BpD,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGT,WAAM,EAAT,EAAA;AAAE;ACZF,SAAA,YAAA,CAA6B,KAAU,EAAvC;AAAE,IACA,OAAO,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;AAC5C,CAAC;ACHD,SAAA,QAAA,CAAyB,KAAU,EAAnC;AAAE,IACA,OAAO,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,YAAY,UAAU,CAAC,CAAC;AAC1E,CAAC;ACFD,SAAA,WAAA,CAA4B,KAAU,EAAtC;AAAE,IACA,OAAO,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC3C,CAAC;ACyBD,IAAA,iBAAA,kBAAA,YAAA;AAAE,IAsDA,SAAF,iBAAA,CAAsB,WAAwB,EAAsB,UAApE,EAAA;AAAE,QAAoB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAa;AAAC,QAAqB,IAApE,CAAA,UAA8E,GAAV,UAAU,CAA9E;AAAC,QAjDD,IAAA,CAAA,WAAA,GAA2C,IAAIJ,iBAAY,EAAE,CAA7D;AAAC,QAMD,IAAA,CAAA,YAAA,GAA4C,IAAIA,iBAAY,EAAE,CAA9D;AAAC,KA4CE;AACH,IArCA,MAAA,CAAA,cAAA,CAAa,iBAAb,CAAA,SAAA,EAAA,UAAqB,EAArB;AAAE,QAQF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B;AAGA,QAbA,GAAA,EAAA,UAAsB,OAA2B,EAAjD;AAAE,YAEE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;AAC/B;AAGA;AAA0B;AAEtB;AAAQ,IAiBZ,MAAA,CAAA,cAAA,CAAc,iBAAd,CAAA,SAAA,EAAA,gBAA4B,EAA5B;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;AAC3C;AAGA;AAEI;AAA2B;AAAQ,IAYrC,MAAF,CAAA,cAAA,CAAM,iBAAN,CAAA,SAAA,EAAA,iBAAqB,EAArB;AAAE,QAAF,GAAA,EAAE,YAAF;AAAE,YACE,IAAI,eAAuB,CAAC;AAChC,YACI,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACtC,gBAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;AAClD,aAAK;AAAC,iBAAK,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAC1C,gBAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACtF,aAAK;AAAC,iBAAK,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;AAC1E,gBAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;AACtG,aAAK;AAAC,iBAAK,IAAI,IAAI,CAAC,UAAU,YAAY,UAAU,EAAE;AACtD,gBAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzE,aAAK;AAAC,iBAAK;AACX,gBAAM,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;AACrG,aAAK;AACL,YACI,OAAO,eAAe,CAAC;AAC3B,SAAG;AAEH;AACoB;AAA2B,KAH/C,CAAA,CAAG;AACH,IAME,iBAAF,CAAA,SAAA,CAAA,OAAS,GAAP,UAAQ,KAAY,EAAtB;AAAE,QACE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAC5F;;;;;;;;;;;;;;;;;;;;;;;;oBAEA;AAAC;AAA8B,KA1F9B;qCAHD,EAAA,IAAA,EAACF,7CAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,VAKU,IA1CrB,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAsCE,QAAQ,EAAE,cAAc,cACzB,EAAD,EAAA,1CAvCE,IADF,EAAA,IAAA,EAAQ,UAAU,EAAlB,UAAA,EAAA,CAAA,EAAA,IAAA,EA+FiDgB,aAAQ,EA/FzD,EAAA,EAAA;AAAE;AAAM;AAAqC,IA6C7C,aAAA,EAAA,CAAA,EAAA,IAAA,EAAGV,WAAM,EAAT,EAAA;AAAE,IAMF,cAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IAQF,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IAoBF,YAAA,EAAA,CAAA,EAAA,IAAA,EAAGD,UAAK,EAAR,IAAA,EAAA,CAAS,YAAY,EAArB,EAAA,EAAA;AAAE,IA+CF,SAAA,EAAA,CAAA,EAAA,IAAA,EAAGY,iBAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAnC,EAAA,EAAA;AAAE;AClHF,IAAA,iBAAA,kBAAA,YAAA;AAAE,IA2CA,SAAF,iBAAA,CAAsB,WAAwB,EAA9C;AAAE,QAAoB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAa;AAAC,QAtC/C,IAAA,CAAA,WAAA,GAA2C,IAAIf,iBAAY,EAAE,CAA7D;AAAC,QAMD,IAAA,CAAA,YAAA,GAA4C,IAAIA,iBAAY,EAAE,CAA9D;AAAC,KAgCkD;AACnD,IAzBA,MAAA,CAAA,cAAA,CAAa,iBAAb,CAAA,SAAA,EAAA,UAAqB,EAArB;AAAE,QAQF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B;AAGA,QAbA,GAAA,EAAA,UAAsB,OAA2B,EAAjD;AAAE,YAEE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;AAC/B;AAGA;AAA0B;AAEtB;AAAQ,IAOZ,MAAA,CAAA,cAAA,CAAc,iBAAd,CAAA,SAAA,EAAA,gBAA4B,EAA5B;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;AAC3C;AAGA;AAEI;AAA2B;AAAQ,IAQF,iBAArC,CAAA,SAAA,CAAA,OAA4C,GAAP,UAAQ,KAAY,EAAzD;AAAE,QACE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1E;;;;;;;;;;;;;;;;;;;oBAEA;AAAC;AAA8B,KArD9B;qCAHD,EAAA,IAAA,EAACF,7CAGC;aPyBojR,EAAE,dO5B9iR,EAAV,IAAA,EAAA,CAAW,VAKU,IAlBrB,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAcE,AAdA;EAcQ,EAAE,cAAc,cACzB,EAAD,EAAA,pCAfQ;AAAqC,IAoB7C,aAAA,EAAA,CAAA,EAAA,IAAA,EAAGM,WAAM,EAAT,EAAA;AAAE,IAMF,cAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IAQF,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IA+BF,SAAA,EAAA,CAAA,EAAA,IAAA,EAAGW,iBAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAnC,EAAA,EAAA;AAAE;ACvCF,IAAA,qBAAA,kBAAA,YAAA;AAAE,IAMA,SAAF,qBAAA,CAA8B,UAA9B,EAAA;AAAE,QAA4B,IAA9B,CAAA,UAAwC,GAAV,UAAU,CAAxC;AAAC,KAAwD;AACzD,IAIE,qBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,YAAF;AAAE,QACE,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AACpC,KAAG;;;;;;;;;;kCAAH;AAAC;AAE4B,KAf5B;yCAHD,EAAA,IAAA,EAACjB,jDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,kBACT,QAAQ,EAAE,kBAAkB,xDAI3B,IA7BH,EAAA,IAAA,EAAQ,UAAU,EAAlB,UAAA,EAAA,CAAA,EAAA,IAAA,EAiCee,SAAI,EAjCnB,EAAA,EAAA;AAAE;EA0BD,EAAD,EAAA,NCRA,IAAA,qBAAA,kBAAA,YAAA;AAAE,IA2CA,SAAF,qBAAA,CAAsB,WAAwB,EAA9C;AAAE,QAAoB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAa;AAAC,QAtC/C,IAAA,CAAA,WAAA,GAA2C,IAAIb,iBAAY,EAAE,CAA7D;AAAC,QAMD,IAAA,CAAA,YAAA,GAA4C,IAAIA,iBAAY,EAAE,CAA9D;AAAC,KAgCkD;AACnD,IAzBA,MAAA,CAAA,cAAA,CAAa,qBAAb,CAAA,SAAA,EAAA,UAAqB,EAArB;AAAE,QAQF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B;AAGA,QAbA,GAAA,EAAA,UAAsB,OAA2B,EAAjD;AAAE,YAEE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;AAC/B;AAGA;AAA0B;AAEtB;AAAQ,IAOZ,MAAA,CAAA,cAAA,CAAc,qBAAd,CAAA,SAAA,EAAA,gBAA4B,EAA5B;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;AAC3C;AAGA;AAEI;AAA2B;AAAQ,IAQF,qBAArC,CAAA,SAAA,CAAA,OAA4C,GAAP,UAAQ,KAAY,EAAzD;AAAE,QACE,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9E;;;;;;;;;;;;;;;;;;;oBAEA;AAAC;AAAkC,KArDlC;yCAHD,EAAA,IAAA,EAACF,jDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,VAKU,IAnBrB,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAeE,AAfA;EAeQ,EAAE,kBAAkB,cAC7B,EAAD,EAAA,xCAhBQ;AAAyC,IAqBjD,aAAA,EAAA,CAAA,EAAA,IAAA,EAAGM,WAAM,EAAT,EAAA;AAAE,IAMF,cAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IAQF,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAM,EAAT,EAAA;AAAE,IA+BF,SAAA,EAAA,CAAA,EAAA,IAAA,EAAGW,iBAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAnC,EAAA,EAAA;AAAE;ACjDF,IAAA,oBAAA,kBAAA,YAAA;AAAE,IAmBA,SAAF,oBAAA,CAAsB,WAAwB,EAA9C;AAAE,QAAoB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAa;AAAC,QAd/C,IAAA,CAAA,QAAA,GAAwC,IAAIf,iBAAY,EAAE,CAA1D;AAAC,KAckD;AACnD,IAVA,MAAA,CAAA,cAAA,CAAc,oBAAd,CAAA,SAAA,EAAA,gBAA4B,EAA5B;AAAE,QAAF,GAAA,EAAA,YAAA;AAAE,YACE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;AAC3C;AAGA;AAEI;AAA2B;AAAQ,IAOF,oBAArC,CAAA,SAAA,CAAA,OAA4C,GAAP,UAAQ,KAAY,EAAzD;AAAE,QAEE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzB,QACI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;AAChC;;;;;;;;;;;;;;;oBAEA;AAAC;AAAiC,KA/BjC;wCAHD,EAAA,IAAA,EAACF,hDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,VAKU,IApBrB,EAAA,IAAA,EAAQ,WAAW,GAAnB;AAgBE,AAhBA;EAgBQ,EAAE,iBAAiB,cAC5B,EAAD,EAAA,vCAjBQ;AAAwC,IAsBhD,UAAA,EAAA,CAAA,EAAA,IAAA,EAAGM,WAAM,EAAT,EAAA;AAAE,IAoBF,SAAA,EAAA,CAAA,EAAA,IAAA,EAAGW,iBAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAnC,EAAA,EAAA;AAAE;ACxBF,IAAA,qBAAA,kBAAA,YAAA;AAAE,IAMA,SAAF,qBAAA,CAA8B,UAA9B,EAAA;AAAE,QAA4B,IAA9B,CAAA,UAAwC,GAAV,UAAU,CAAxC;AAAC,KACE;AACH,IAIE,qBAAF,CAAA,SAAA,CAAA,QAAU,GAAR,YAAF;AAAE,QACE,IAAI,CAAC,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC;AAC3C,KAAG;;;;;;;;;;kCAAH;AAAC;AAE4B,KAhB5B;yCAHD,EAAA,IAAA,EAACjB,jDAGC;CAHQ,EAAV,IAAA,EAAA,CAAW,kBACT,QAAQ,EAAE,kBAAkB,xDAI3B,IApBH,EAAA,IAAA,EAAQ,UAAU,EAAlB,UAAA,EAAA,CAAA,EAAA,IAAA,EAwBee,SAAI,EAxBnB,EAAA,EAAA;AAAE;EAiBD,EAAD,EAAA,NC6BA,IAAA,6BAAA,kBAAA,UAAA,MAAA,EAAA;AAAE,IAAiDP,SAAnDA,CAAAA,6BAAAA,EAAAA,MAAAA,CAAAA,CAAuE;AAAC,IAAxE,SAAA,6BAAA,GAAA;AAAE;AACD;;;;kFZLu9f,CAAC,kBACv9f,aAAa,EAAEI;OAAiB,CAAC,IAAI,eACtC,EAAD,EAAA;;;;;;;;;;;0BYII;AAAC;AAA0C,CAF/C,CAAmD,oBAAoB,CAAvE,CAAA,CAAA,AAAC;iDAPD,EAAA,IAAA,EAACZ,cAAS,EAAV,zEAOE;EAPF,EAAA,CAAW,kBACT,QAAQ,EAAE,0BAA0B,3DCgBtC,IAAA,mBAAA,kBAAA,UAAA,MAAA,EAAA;gBDfE,SAAS,EAAE,3BCeX,IAAuCQ,SAAzCA,CAAAA,mBAAAA,EAAAA,MAAAA,CAAAA,CAAmD;KDd/C,EAAE,OAAO,EAAE,UAAU,EAAE,5BCcyB,IAApD,SAAA,mBAAA,GAAA;EDdsC,EAAEM,eAAU,CAAC,YAAnD,EAAyD,OAAA,6BAA6B,CAAtF,vECcE;ADdoF,CAAC,EAAE,HCgBtE;mBDff,EAAE,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAEA,eAAU,CAAC,YAA7D,EAAmE,OAAA,6BAA6B,CAAhG,EAAgG,CAAC,EAAE;gBAChG,cACF,EAAD,EAAA;;;;;;;;;;;;0BCawB;AAAC;AAAgC,CAFzD,CAAyC,UAAU,CAAnD,CAAA,CAAA,AAAC;uCAND,EAAA,IAAA,EAACd,cAAS,EAAV,/DAME;EANF,EAAA,CAAW,kBACT,QAAQ,EAAE,gBAAgB,jDCS5B,IAAA,gBAAA,kBAAA,YAAA;eDRE,SAAS,EAAE,1BCQX,IAAF,SAAA,gBAAA,GAAA;AAAE;QDPE,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAEc,5CCOhC,IAEC,gBAAT,CAAA,OAAgB,GAAd,YAAF;cDTkD,CAAC,YAAnD,EAAyD,OAAA,mBAAmB,CAA5E,EAA4E,CAAC,EAAE,7DCS7E,QACE,OAAO,EAAC,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,EAAE,EAAC,CAAC;AACvD,KAAG;UDVA,cACF,EAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDCSA;AAAC;AAEuB,KANvB;oCArCD,EAAA,IAAA,EAACI,aAAQ,EAAT,3DAqCE;AAEC;AAvCH,EAAA,CAAU,kBACR,YAAY,EAAE,nCAsCZ;YArCA,eAAe,3BAsCZ;MArCH,mBAAmB,sBACnB,/CAoC8C;IApClB,sBAC5B,6BAA6B,vDAsC0B;QArCvD,iBAAiB,sBACjB,/CAoC4H;aApC3G,sBACjB,qBAAqB,xDAmC0J;iBAlC/K,qBAAqB,tCAkCuN;aAjC5O,wBAAwB,rCAiCmQ;YAhC3R,wBAAwB,pCAgCkT;GA/B1U,mBAAmB,sBACnB,5CA8BiY;kBA9BpW,sBAC7B,xCA6Bwb;QA7Bna,sBACrB,oBAAoB,lDA4Byd;aA3B9e,kBACD,OAAO,EAAE,sBACPC,9DAyBoiB;UAzBxhB,kBACb,kBACD,9CAuB6mB;EAvBtmB,EAAE,sBACP,eAAe,zCAsB+oB;EArB9pB,mBAAmB,sBACnB,3CAoB2tB;sBApB/rB,tBAoBgvB;GAnB5wB,6BAA6B,sBAC7B,tDAkBqzB;UAlBpyB,sBACjB,iBAAiB,jDAiBi2B;kBAhBl3B,lBAgBu6B;IAhBl5B,sBACrB,qBAAqB,/CAeq7B;cAd18B,wBAAwB,tCAcy+B;iBAbjgC,wBAAwB,zCAaohC;UAZ5iC,mBAAmB,7BAY8kC;kBAXjmC,lBAWkoC;kBAXrmC,lBAWkoC;KAV/pC,qBAAqB,1BAU6qC;WATlsC,oBAAoB,/BASmtC;KARxuC,cACF,EAAD,EAAA,vBAOuxC;AAA2C;AAAkC;AAA8B;AAAuC;AAAgC;AAAgC;AAAoC;AAAoC;AAAmC;AAAoC;AAA4C;AAAuC;AAAkC;AAA0B;AAAmC;AAAyB;AAAC;AAA+D;AAAC;AAAM","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Created by marc on 01.06.17.\n */\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","import {MovingDirection} from './moving-direction.enum';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {isBoolean} from 'util';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (isBoolean(condition)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n */\nexport abstract class NavigationMode {\n  constructor(protected wizardState: WizardState) {\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination step\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n\n  /**\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  abstract isNavigable(destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  abstract reset(): void;\n\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   */\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasPreviousStep()) {\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n  }\n\n  /**\n   * Tries to transition the wizard to the next step from the `currentStep`\n   */\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasNextStep()) {\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\nexport class FreeNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    return true;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete\n    this.completed = false;\n    this.stepExit.emit(direction);\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\nexport class SemiStrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n    const destinationStep = (previous: boolean) => {\n      if (previous) {\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex)\n          .every(step => step.completed || step.optional || step.selected);\n\n        return Promise.resolve(\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(destinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isNavigable(destinationIndex: number): boolean {\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n    } else {\n      // a \"normal\" step can always be entered\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n      this.wizardState.wizardSteps.length !== 1;\n\n    if (defaultCompletionStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\nexport class StrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const allPreviousStepsComplete = (previous: boolean) => {\n      if (previous) {\n        return Promise.resolve(this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\n          .every(step => step.completed || step.optional)\n        );\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(allPreviousStepsComplete);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - all steps between the old current step and the destination step are marked as incomplete\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        // set all steps after the destination step to incomplete\n        this.wizardState.wizardSteps\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\n          .forEach(step => step.completed = false);\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n    return destinationIndex < this.wizardState.currentStepIndex;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // at least one step is before the default step, that is not optional\n    const illegalDefaultStep = this.wizardState.wizardSteps\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\n      .some(step => !step.optional);\n\n    if (illegalDefaultStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {FreeNavigationMode} from './free-navigation-mode';\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\nimport {StrictNavigationMode} from './strict-navigation-mode';\n\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param navigationMode The name of the to be used navigation mode\n * @param wizardState The wizard state of the wizard\n * @returns The created [[NavigationMode]]\n */\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n};\n","import {Injectable} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {navigationModeFactory} from './navigation-mode.provider';\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n@Injectable()\nexport class WizardState {\n  /**\n   * The initial step index, as taken from the [[WizardComponent]]\n   */\n  private _defaultStepIndex = 0;\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public wizardSteps: Array<WizardStep> = [];\n\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param defaultStepIndex The new default wizard step index\n   */\n  public set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n\n  /**\n   * The initial step index.\n   * This value can be either:\n   * - the index of a wizard step with a `selected` directive, or\n   * - the default step index, set in the [[WizardComponent]]\n   */\n  public get defaultStepIndex(): number {\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  };\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public navigationMode: NavigationMode;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  public disableNavigationBar: boolean;\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Updates the navigation mode to the navigation mode with the given name\n   *\n   * @param updatedNavigationMode The name of the new navigation mode\n   */\n  updateNavigationMode(updatedNavigationMode: string): void {\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param updatedWizardSteps The updated wizard steps\n   */\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this.wizardSteps = updatedWizardSteps;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  template: `<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'top' || navBarLocation == 'left'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'left',\n    horizontal: navBarLocation == 'top',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n\n<div [ngClass]=\"{\n  'wizard-steps': true,\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\n}\">\n  <ng-content></ng-content>\n</div>\n\n<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'bottom' || navBarLocation == 'right'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'right',\n    horizontal: navBarLocation == 'bottom',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n`,\n  styles: [`aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WizardState]\n})\nexport class WizardComponent implements OnChanges, AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardSteps: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The navigation mode used for transitioning between different steps.\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\n   */\n  @Input()\n  public navigationMode = 'strict';\n\n  /**\n   * The initially selected step, represented by its index\n   */\n  @Input()\n  public defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * The navigation mode for this wizard\n   */\n  public get navigation(): NavigationMode {\n    return this.model.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param model The model for this wizard component\n   */\n  constructor(public model: WizardState) {\n  }\n\n  /**\n   * Updates the model after certain input values have changed\n   *\n   * @param changes The detected changes\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    for (const propName of Object.keys(changes)) {\n      let change = changes[propName];\n\n      if (!change.firstChange) {\n        switch (propName) {\n          case 'defaultStepIndex':\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n            break;\n          case 'disableNavigationBar':\n            this.model.disableNavigationBar = change.currentValue;\n            break;\n          case 'navigationMode':\n            this.model.updateNavigationMode(change.currentValue);\n            break;\n          /* istanbul ignore next */\n          default:\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.model.disableNavigationBar = this.disableNavigationBar;\n    this.model.defaultStepIndex = this.defaultStepIndex;\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\n    this.model.updateNavigationMode(this.navigationMode);\n\n    // finally reset the whole wizard state\n    this.navigation.reset();\n  }\n}\n","/**\n * Created by marc on 20.05.17.\n */\n\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-completion-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  template: `<ul class=\"steps-indicator steps-{{numberOfWizardSteps}}\">\n  <li *ngFor=\"let step of wizardSteps\"\n      [attr.step-symbol]=\"step.navigationSymbol.symbol\"\n      [ngStyle]=\"{\n        'font-family': step.navigationSymbol.fontFamily\n      }\"\n      [ngClass]=\"{\n        default: isDefault(step),\n        current: isCurrent(step),\n        done: isDone(step),\n        editing: isEditing(step),\n        optional: isOptional(step),\n        navigable: isNavigable(step)\n  }\">\n    <div>\n      <a [awGoToStep]=\"step\">\n        <ng-container *ngIf=\"step.stepTitleTemplate\" [ngTemplateOutlet]=\"step.stepTitleTemplate.templateRef\"></ng-container>\n        <ng-container *ngIf=\"!step.stepTitleTemplate\">{{step.stepTitle}}</ng-container>\n      </a>\n    </div>\n  </li>\n</ul>\n`,\n  styles: [`aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}`, `aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}`],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * The navigation mode\n   */\n  public get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state the wizard currently resides in\n   */\n  constructor(public wizardState: WizardState) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizardState.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizardState.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizardState.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as current\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as done\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as default\n   */\n  public isDefault(wizardStep: WizardStep): boolean {\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as editing\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as optional\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * Created by marc on 09.01.17.\n */\n\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: Event): void {\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.navigationMode.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {WizardComponent} from './components/wizard.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\n\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot(): ModuleWithProviders {\n    return {ngModule: ArchwizardModule, providers: []};\n  }\n}\n"]}