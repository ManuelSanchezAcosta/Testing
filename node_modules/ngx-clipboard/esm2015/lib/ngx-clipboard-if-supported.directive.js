/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { ClipboardService } from './ngx-clipboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ngx-clipboard.service';
export class ClipboardIfSupportedDirective {
    /**
     * @param {?} _clipboardService
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */
    constructor(_clipboardService, _viewContainerRef, _templateRef) {
        this._clipboardService = _clipboardService;
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._clipboardService.isSupported) {
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
    }
}
ClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) { return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ClipboardIfSupportedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardIfSupportedDirective, selectors: [["", "ngxClipboardIfSupported", ""]] });
/** @nocollapse */
ClipboardIfSupportedDirective.ctorParameters = () => [
    { type: ClipboardService },
    { type: ViewContainerRef },
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxClipboardIfSupported]'
            }]
    }], function () { return [{ type: ɵngcc1.ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._clipboardService;
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._templateRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsaXBib2FyZC1pZi1zdXBwb3J0ZWQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZ3gtY2xpcGJvYXJkL2xpYi9uZ3gtY2xpcGJvYXJkLWlmLXN1cHBvcnRlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFLM0QsTUFBTSxPQUFPLDZCQUE2QjtBQUFJO0FBQVM7QUFFN0M7QUFBcUM7QUFDdEI7QUFBUyxJQUY5QixZQUNZLGlCQUFtQyxFQUNuQyxpQkFBbUMsRUFDbkMsWUFBOEI7QUFDM0MsUUFIYSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO0FBQUUsUUFDckMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtBQUFFLFFBQ3JDLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtBQUM5QyxJQUFPLENBQUM7QUFDUjtBQUNPO0FBQ0U7QUFBUyxJQURkLFFBQVE7QUFDWixRQUFRLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRTtBQUNoRCxZQUFZLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDekUsU0FBUztBQUNULElBQUksQ0FBQztBQUNMOzJEQWZDLFNBQVMsU0FBQyxtQkFDUCxRQUFRLEVBQUUsMkJBQTJCLGVBQ3hDO3lKQUNJO0FBQUU7QUFBb0I7QUFFMUIsWUFQUSxnQkFBZ0I7QUFBSyxZQUZXLGdCQUFnQjtBQUFLLFlBQWxDLFdBQVc7QUFBSTs7Ozs7O2tKQUFFO0FBQUU7QUFBYztBQUFTO0FBRW5FO0FBQWlCO0FBQVMsSUFPckIsMERBQTJDO0FBQUU7QUFDN0M7QUFBa0I7QUFBaUI7QUFBUyxJQUE1QywwREFBMkM7QUFBRTtBQUM3QztBQUFrQjtBQUFpQjtBQUN2QyxJQURJLHFEQUFzQzs7QUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFKQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IENsaXBib2FyZFNlcnZpY2UgfSBmcm9tICcuL25neC1jbGlwYm9hcmQuc2VydmljZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW25neENsaXBib2FyZElmU3VwcG9ydGVkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIENsaXBib2FyZElmU3VwcG9ydGVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgX2NsaXBib2FyZFNlcnZpY2U6IENsaXBib2FyZFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICBwcml2YXRlIF90ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PlxyXG4gICAgKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jbGlwYm9hcmRTZXJ2aWNlLmlzU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlUmVmKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19