/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { ClipboardService } from './ngx-clipboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ngx-clipboard.service';
var ClipboardIfSupportedDirective = /** @class */ (function () {
    function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {
        this._clipboardService = _clipboardService;
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
    }
    /**
     * @return {?}
     */
    ClipboardIfSupportedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._clipboardService.isSupported) {
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
    };
    /** @nocollapse */
    ClipboardIfSupportedDirective.ctorParameters = function () { return [
        { type: ClipboardService },
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
ClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) { return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ClipboardIfSupportedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardIfSupportedDirective, selectors: [["", "ngxClipboardIfSupported", ""]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxClipboardIfSupported]'
            }]
    }], function () { return [{ type: ɵngcc1.ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, null); })();
    return ClipboardIfSupportedDirective;
}());
export { ClipboardIfSupportedDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._clipboardService;
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ClipboardIfSupportedDirective.prototype._templateRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsaXBib2FyZC1pZi1zdXBwb3J0ZWQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZ3gtY2xpcGJvYXJkL2xpYi9uZ3gtY2xpcGJvYXJkLWlmLXN1cHBvcnRlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFFM0Q7QUFHSyxJQUNELHVDQUNZLGlCQUFtQyxFQUNuQyxpQkFBbUMsRUFDbkMsWUFBOEI7QUFDM0MsUUFIYSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtCO0FBQUUsUUFDckMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtBQUFFLFFBQ3JDLGlCQUFZLEdBQVosWUFBWSxDQUFrQjtBQUM5QyxJQUFPLENBQUM7QUFDUjtBQUNPO0FBQ0U7QUFBUyxJQURkLGdEQUFRO0FBQ1Y7QUFBb0I7QUFBUyxJQUQzQjtBQUNILFFBQU8sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFO0FBQ2hELFlBQVksSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN6RSxTQUFTO0FBQ1QsSUFBSSxDQUFDLENBWEk7QUFBRTswQ0FIVixTQUFTLFNBQUMsNURBR3dCO1FBRi9CLFFBQVEsRUFBRSxsQkFJYyxnQkFQbkIsZ0JBQWdCO1FBR2dCLG1CQUN4QywzQkFKNkIsZ0JBRlcsZ0JBQWdCO0FBQUssZ0JBQWxDLFdBQVc7QUFBSTs7Ozs7Ozs7a0pBQVM7QUFBRSxJQW1CdEQsb0NBQUM7QUFDQSxDQURBLEFBZkQsSUFlQztBQUNELFNBYmEsNkJBQTZCO0FBQUs7QUFBYztBQUN2RDtBQUNBO0FBQWlCO0FBQVMsSUFBeEIsMERBQTJDO0FBQUU7QUFDN0M7QUFBa0I7QUFBaUI7QUFBUyxJQUE1QywwREFBMkM7QUFBRTtBQUM3QztBQUFrQjtBQUFpQjtBQUN2QyxJQURJLHFEQUFzQzs7QUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFJQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBZEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBQUEsQUFGQSxBQUFBLEFBQUEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFmQSxBQWVBLEFBWkEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4vbmd4LWNsaXBib2FyZC5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbmd4Q2xpcGJvYXJkSWZTdXBwb3J0ZWRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkSWZTdXBwb3J0ZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfY2xpcGJvYXJkU2VydmljZTogQ2xpcGJvYXJkU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByaXZhdGUgX3RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+XHJcbiAgICApIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NsaXBib2FyZFNlcnZpY2UuaXNTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdGVtcGxhdGVSZWYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=