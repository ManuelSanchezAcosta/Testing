/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, EventEmitter, HostListener, Input, Output, ElementRef, } from '@angular/core';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { KeyCodes } from './../../enums/key-codes.enum';
import { ClrKeyFocusItem } from './key-focus-item';
import { preventArrowKeyScroll, keyValidator } from './util';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["clrKeyFocus", ""];
const _c1 = ["*"];
export class ClrKeyFocus {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.direction = ClrFocusDirection.VERTICAL;
        this.focusOnLoad = false;
        this.focusChange = new EventEmitter();
        this._current = 0;
        this.subscriptions = [];
    }
    set focusableItems(elements) {
        // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem
        // We accept a list reference in the cases where we cannot use ContentChildren to query
        // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).
        if (elements && elements.length) {
            this._focusableItems = elements;
            this.initializeFocus();
        }
    }
    get focusableItems() {
        if (this._focusableItems) {
            return this._focusableItems;
        }
        else if (this.clrKeyFocusItems) {
            return this.clrKeyFocusItems.toArray();
        }
        return [];
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    get current() {
        return this._current;
    }
    set current(value) {
        if (this._current !== value) {
            this._current = value;
        }
    }
    get currentItem() {
        return this.focusableItems[this._current];
    }
    get currentItemElement() {
        return this.currentItem.nativeElement ? this.currentItem.nativeElement : this.currentItem;
    }
    focusCurrent() {
        this.currentItem.focus();
        this.focusChange.next(this._current);
    }
    moveTo(position) {
        if (this.positionInRange(position)) {
            this.current = position;
            this.focusCurrent();
        }
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.listenForItemUpdates());
        this.initializeFocus();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    handleKeyboardEvent(event) {
        // Make sure event was originated on the current item's element
        if (this.currentItemElement !== event.target) {
            const position = this.getItemPosition(event.target);
            if (this.positionInRange(position)) {
                this.current = position;
            }
        }
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.moveTo(this.current - 1);
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.moveTo(this.current + 1);
        }
        else if (event.code === KeyCodes.Home) {
            this.moveTo(0);
        }
        else if (event.code === KeyCodes.End) {
            this.moveTo(this.focusableItems.length - 1);
        }
        preventArrowKeyScroll(event);
    }
    setClickedItemCurrent(event) {
        const position = this.getItemPosition(event.target);
        if (position > -1) {
            this.moveTo(position);
        }
    }
    getItemPosition(item) {
        if (this._focusableItems) {
            return this.focusableItems.indexOf(item);
        }
        else {
            return this.focusableItems.map(_item => _item.nativeElement).indexOf(item);
        }
    }
    positionInRange(position) {
        return position >= 0 && position < this.focusableItems.length;
    }
    currentFocusIsNotFirstItem() {
        return this._current - 1 >= 0;
    }
    currentFocusIsNotLastItem() {
        return this._current + 1 < this.focusableItems.length;
    }
    initializeFocus() {
        if (this.focusableItems && this.focusableItems.length) {
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this._current >= this.focusableItems.length) {
                this._current = this.focusableItems.length - 1;
            }
            if (this.focusOnLoad) {
                this.currentItem.focus();
                this.focusChange.next();
            }
        }
    }
    listenForItemUpdates() {
        return this.clrKeyFocusItems.changes.subscribe(() => {
            this.initializeFocus();
        });
    }
    nextKeyPressed(event) {
        const key = keyValidator(event.key);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return key === KeyCodes.ArrowDown;
            case ClrFocusDirection.HORIZONTAL:
                return key === KeyCodes.ArrowRight;
            case ClrFocusDirection.BOTH:
                return key === KeyCodes.ArrowDown || key === KeyCodes.ArrowRight;
            default:
                return false;
        }
    }
    prevKeyPressed(event) {
        const key = keyValidator(event.key);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return key === KeyCodes.ArrowUp;
            case ClrFocusDirection.HORIZONTAL:
                return key === KeyCodes.ArrowLeft;
            case ClrFocusDirection.BOTH:
                return key === KeyCodes.ArrowUp || key === KeyCodes.ArrowLeft;
            default:
                return false;
        }
    }
}
ClrKeyFocus.ɵfac = function ClrKeyFocus_Factory(t) { return new (t || ClrKeyFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ClrKeyFocus.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrKeyFocus, selectors: [["", "clrKeyFocus", ""]], contentQueries: function ClrKeyFocus_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrKeyFocusItem, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clrKeyFocusItems = _t);
    } }, hostBindings: function ClrKeyFocus_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ClrKeyFocus_keydown_HostBindingHandler($event) { return ctx.handleKeyboardEvent($event); })("click", function ClrKeyFocus_click_HostBindingHandler($event) { return ctx.setClickedItemCurrent($event); });
    } }, inputs: { direction: ["clrDirection", "direction"], focusOnLoad: ["clrFocusOnLoad", "focusOnLoad"], focusableItems: ["clrKeyFocus", "focusableItems"] }, outputs: { focusChange: "clrFocusChange" }, attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ClrKeyFocus_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ClrKeyFocus.ctorParameters = () => [
    { type: ElementRef }
];
ClrKeyFocus.propDecorators = {
    direction: [{ type: Input, args: ['clrDirection',] }],
    focusOnLoad: [{ type: Input, args: ['clrFocusOnLoad',] }],
    focusChange: [{ type: Output, args: ['clrFocusChange',] }],
    clrKeyFocusItems: [{ type: ContentChildren, args: [ClrKeyFocusItem, { descendants: true },] }],
    focusableItems: [{ type: Input, args: ['clrKeyFocus',] }],
    handleKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    setClickedItemCurrent: [{ type: HostListener, args: ['click', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrKeyFocus, [{
        type: Component,
        args: [{
                selector: '[clrKeyFocus]',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { direction: [{
            type: Input,
            args: ['clrDirection']
        }], focusOnLoad: [{
            type: Input,
            args: ['clrFocusOnLoad']
        }], focusChange: [{
            type: Output,
            args: ['clrFocusChange']
        }], focusableItems: [{
            type: Input,
            args: ['clrKeyFocus']
        }], handleKeyboardEvent: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], setClickedItemCurrent: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], clrKeyFocusItems: [{
            type: ContentChildren,
            args: [ClrKeyFocusItem, { descendants: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWZvY3VzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvdXRpbHMvZm9jdXMva2V5LWZvY3VzL2tleS1mb2N1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBRU4sVUFBVSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBR2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7Ozs7QUFNN0QsTUFBTSxPQUFPLFdBQVc7QUFDeEIsSUFBRSxZQUFvQixVQUFzQjtBQUFJLFFBQTFCLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUNwQixjQUFTLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDO0FBQ2hFLFFBQTJCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQy9DLFFBQW9DLGdCQUFXLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7QUFDbkcsUUEyQlUsYUFBUSxHQUFHLENBQUMsQ0FBQztBQUN2QixRQStCWSxrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDL0MsSUFoRStDLENBQUM7QUFDaEQsSUFPRSxJQUNJLGNBQWMsQ0FBQyxRQUE4QjtBQUNuRCxRQUFJLGlIQUFpSDtBQUNySCxRQUFJLHVGQUF1RjtBQUMzRixRQUFJLDRHQUE0RztBQUNoSCxRQUFJLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDckMsWUFBTSxJQUFJLENBQUMsZUFBZSxH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UUFBUSxDQUFDLFNBQVMsQ0FBQztBQUMxQyxZQUFNLEtBQUssaUJBQWlCLENBQUMsSUFBSTtBQUNqQyxnQkFBUSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsT0FBTyxJQUFJLEdBQUcsS0FBSyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQ3RFLFlBQU07QUFDTixnQkFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7dUNBdExDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZUFBZSxrQkFDekIsUUFBUSxFQUFFO3VCQUEyQixjQUN0Qzs7Ozs7Ozs7Ozs2QkFDSTtBQUFDO0FBQ1UsWUFmZCxVQUFVO0FBQ1g7QUFBRztBQUNPLHdCQWNSLEtBQUssU0FBQyxjQUFjO0FBQU8sMEJBQzNCLEtBQUssU0FBQyxnQkFBZ0I7QUFBTywwQkFDN0IsTUFBTSxTQUFDLGdCQUFnQjtBQUFPLCtCQUM5QixlQUFlLFNBQUMsZUFBZSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTtBQUNwRCw2QkFHRixLQUFLLFNBQUMsYUFBYTtBQUNqQixrQ0FpRUYsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNoQyxvQ0FzQkYsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUMvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgRWxlbWVudFJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENsckZvY3VzRGlyZWN0aW9uIH0gZnJvbSAnLi9lbnVtcy9mb2N1cy1kaXJlY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBGb2N1c2FibGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgS2V5Q29kZXMgfSBmcm9tICcuLy4uLy4uL2VudW1zL2tleS1jb2Rlcy5lbnVtJztcbmltcG9ydCB7IENscktleUZvY3VzSXRlbSB9IGZyb20gJy4va2V5LWZvY3VzLWl0ZW0nO1xuaW1wb3J0IHsgcHJldmVudEFycm93S2V5U2Nyb2xsLCBrZXlWYWxpZGF0b3IgfSBmcm9tICcuL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbY2xyS2V5Rm9jdXNdJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyS2V5Rm9jdXMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG4gIEBJbnB1dCgnY2xyRGlyZWN0aW9uJykgZGlyZWN0aW9uID0gQ2xyRm9jdXNEaXJlY3Rpb24uVkVSVElDQUw7XG4gIEBJbnB1dCgnY2xyRm9jdXNPbkxvYWQnKSBmb2N1c09uTG9hZCA9IGZhbHNlO1xuICBAT3V0cHV0KCdjbHJGb2N1c0NoYW5nZScpIHByaXZhdGUgZm9jdXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIEBDb250ZW50Q2hpbGRyZW4oQ2xyS2V5Rm9jdXNJdGVtLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIHByb3RlY3RlZCBjbHJLZXlGb2N1c0l0ZW1zOiBRdWVyeUxpc3Q8Q2xyS2V5Rm9jdXNJdGVtPjtcblxuICBwcml2YXRlIF9mb2N1c2FibGVJdGVtczogQXJyYXk8Rm9jdXNhYmxlSXRlbT47XG4gIEBJbnB1dCgnY2xyS2V5Rm9jdXMnKVxuICBzZXQgZm9jdXNhYmxlSXRlbXMoZWxlbWVudHM6IEFycmF5PEZvY3VzYWJsZUl0ZW0+KSB7XG4gICAgLy8gV2UgYWNjZXB0IGEgbGlzdCBvZiBmb2N1c2FibGUgZWxlbWVudHMgKEhUTUxFbGVtZW50cyBvciBleGlzdGluZyBEaXJlY3RpdmVzKSBvciBhdXRvIHF1ZXJ5IGZvciBjbHJLZXlGb2N1c0l0ZW1cbiAgICAvLyBXZSBhY2NlcHQgYSBsaXN0IHJlZmVyZW5jZSBpbiB0aGUgY2FzZXMgd2hlcmUgd2UgY2Fubm90IHVzZSBDb250ZW50Q2hpbGRyZW4gdG8gcXVlcnlcbiAgICAvLyBDb250ZW50Q2hpbGRyZW4gY2FuIGJlIHVuYXZhaWxhYmxlIGlmIGNvbnRlbnQgaXMgcHJvamVjdGVkIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoZSBjb21wb25lbnQgKHNlZSB0YWJzKS5cbiAgICBpZiAoZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9mb2N1c2FibGVJdGVtcyA9IGVsZW1lbnRzO1xuICAgICAgdGhpcy5pbml0aWFsaXplRm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGZvY3VzYWJsZUl0ZW1zKCkge1xuICAgIGlmICh0aGlzLl9mb2N1c2FibGVJdGVtcykge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZvY3VzYWJsZUl0ZW1zO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jbHJLZXlGb2N1c0l0ZW1zKSB7XG4gICAgICByZXR1cm4gdGhpcy5jbHJLZXlGb2N1c0l0ZW1zLnRvQXJyYXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgX2N1cnJlbnQgPSAwO1xuXG4gIGdldCBjdXJyZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50O1xuICB9XG5cbiAgc2V0IGN1cnJlbnQodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9jdXJyZW50ICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fY3VycmVudCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBjdXJyZW50SXRlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVJdGVtc1t0aGlzLl9jdXJyZW50XTtcbiAgfVxuXG4gIGdldCBjdXJyZW50SXRlbUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRJdGVtLm5hdGl2ZUVsZW1lbnQgPyB0aGlzLmN1cnJlbnRJdGVtLm5hdGl2ZUVsZW1lbnQgOiAodGhpcy5jdXJyZW50SXRlbSBhcyBIVE1MRWxlbWVudCk7XG4gIH1cblxuICBmb2N1c0N1cnJlbnQoKSB7XG4gICAgdGhpcy5jdXJyZW50SXRlbS5mb2N1cygpO1xuICAgIHRoaXMuZm9jdXNDaGFuZ2UubmV4dCh0aGlzLl9jdXJyZW50KTtcbiAgfVxuXG4gIG1vdmVUbyhwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucG9zaXRpb25JblJhbmdlKHBvc2l0aW9uKSkge1xuICAgICAgdGhpcy5jdXJyZW50ID0gcG9zaXRpb247XG4gICAgICB0aGlzLmZvY3VzQ3VycmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmxpc3RlbkZvckl0ZW1VcGRhdGVzKCkpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUZvY3VzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzID0+IHMudW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIC8vIE1ha2Ugc3VyZSBldmVudCB3YXMgb3JpZ2luYXRlZCBvbiB0aGUgY3VycmVudCBpdGVtJ3MgZWxlbWVudFxuICAgIGlmICh0aGlzLmN1cnJlbnRJdGVtRWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0SXRlbVBvc2l0aW9uKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCk7XG4gICAgICBpZiAodGhpcy5wb3NpdGlvbkluUmFuZ2UocG9zaXRpb24pKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByZXZLZXlQcmVzc2VkKGV2ZW50KSAmJiB0aGlzLmN1cnJlbnRGb2N1c0lzTm90Rmlyc3RJdGVtKCkpIHtcbiAgICAgIHRoaXMubW92ZVRvKHRoaXMuY3VycmVudCAtIDEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5uZXh0S2V5UHJlc3NlZChldmVudCkgJiYgdGhpcy5jdXJyZW50Rm9jdXNJc05vdExhc3RJdGVtKCkpIHtcbiAgICAgIHRoaXMubW92ZVRvKHRoaXMuY3VycmVudCArIDEpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gS2V5Q29kZXMuSG9tZSkge1xuICAgICAgdGhpcy5tb3ZlVG8oMCk7XG4gICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSBLZXlDb2Rlcy5FbmQpIHtcbiAgICAgIHRoaXMubW92ZVRvKHRoaXMuZm9jdXNhYmxlSXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcHJldmVudEFycm93S2V5U2Nyb2xsKGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgc2V0Q2xpY2tlZEl0ZW1DdXJyZW50KGV2ZW50OiBhbnkpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0SXRlbVBvc2l0aW9uKGV2ZW50LnRhcmdldCk7XG5cbiAgICBpZiAocG9zaXRpb24gPiAtMSkge1xuICAgICAgdGhpcy5tb3ZlVG8ocG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbVBvc2l0aW9uKGl0ZW06IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuX2ZvY3VzYWJsZUl0ZW1zKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVJdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVJdGVtcy5tYXAoX2l0ZW0gPT4gX2l0ZW0ubmF0aXZlRWxlbWVudCkuaW5kZXhPZihpdGVtKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcG9zaXRpb25JblJhbmdlKHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBwb3NpdGlvbiA8IHRoaXMuZm9jdXNhYmxlSXRlbXMubGVuZ3RoO1xuICB9XG5cbiAgcHJvdGVjdGVkIGN1cnJlbnRGb2N1c0lzTm90Rmlyc3RJdGVtKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50IC0gMSA+PSAwO1xuICB9XG5cbiAgcHJvdGVjdGVkIGN1cnJlbnRGb2N1c0lzTm90TGFzdEl0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQgKyAxIDwgdGhpcy5mb2N1c2FibGVJdGVtcy5sZW5ndGg7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZUZvY3VzKCkge1xuICAgIGlmICh0aGlzLmZvY3VzYWJsZUl0ZW1zICYmIHRoaXMuZm9jdXNhYmxlSXRlbXMubGVuZ3RoKSB7XG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBmb2N1cyB3YXMgb24gYW4gZWxlbWVudCwgd2hvc2UgaW5kZXggaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZS5cbiAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHNvbWUgb2YgdGhlIGZvY3VzYWJsZSBlbGVtZW50cyBhcmUgYmVpbmcgcmVtb3ZlZC5cbiAgICAgIC8vIEluIHN1Y2ggY2FzZXMsIHRoZSBuZXcgZm9jdXMgaXMgaW5pdGlhbGl6ZWQgb24gdGhlIGxhc3QgZm9jdXNhYmxlIGVsZW1lbnQuXG4gICAgICBpZiAodGhpcy5fY3VycmVudCA+PSB0aGlzLmZvY3VzYWJsZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5mb2N1c2FibGVJdGVtcy5sZW5ndGggLSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mb2N1c09uTG9hZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRJdGVtLmZvY3VzKCk7XG4gICAgICAgIHRoaXMuZm9jdXNDaGFuZ2UubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbGlzdGVuRm9ySXRlbVVwZGF0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xyS2V5Rm9jdXNJdGVtcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmluaXRpYWxpemVGb2N1cygpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG5leHRLZXlQcmVzc2VkKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0ga2V5VmFsaWRhdG9yKGV2ZW50LmtleSk7XG5cbiAgICBzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlIENsckZvY3VzRGlyZWN0aW9uLlZFUlRJQ0FMOlxuICAgICAgICByZXR1cm4ga2V5ID09PSBLZXlDb2Rlcy5BcnJvd0Rvd247XG4gICAgICBjYXNlIENsckZvY3VzRGlyZWN0aW9uLkhPUklaT05UQUw6XG4gICAgICAgIHJldHVybiBrZXkgPT09IEtleUNvZGVzLkFycm93UmlnaHQ7XG4gICAgICBjYXNlIENsckZvY3VzRGlyZWN0aW9uLkJPVEg6XG4gICAgICAgIHJldHVybiBrZXkgPT09IEtleUNvZGVzLkFycm93RG93biB8fCBrZXkgPT09IEtleUNvZGVzLkFycm93UmlnaHQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHByZXZLZXlQcmVzc2VkKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0ga2V5VmFsaWRhdG9yKGV2ZW50LmtleSk7XG5cbiAgICBzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlIENsckZvY3VzRGlyZWN0aW9uLlZFUlRJQ0FMOlxuICAgICAgICByZXR1cm4ga2V5ID09PSBLZXlDb2Rlcy5BcnJvd1VwO1xuICAgICAgY2FzZSBDbHJGb2N1c0RpcmVjdGlvbi5IT1JJWk9OVEFMOlxuICAgICAgICByZXR1cm4ga2V5ID09PSBLZXlDb2Rlcy5BcnJvd0xlZnQ7XG4gICAgICBjYXNlIENsckZvY3VzRGlyZWN0aW9uLkJPVEg6XG4gICAgICAgIHJldHVybiBrZXkgPT09IEtleUNvZGVzLkFycm93VXAgfHwga2V5ID09PSBLZXlDb2Rlcy5BcnJvd0xlZnQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=