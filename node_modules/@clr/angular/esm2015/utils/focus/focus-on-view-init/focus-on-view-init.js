/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, Input, PLATFORM_ID, Renderer2, } from '@angular/core';
import { FOCUS_ON_VIEW_INIT } from './focus-on-view-init.provider';
/*  This directive is for guiding the document focus to the newly added content when its view is initialized
    so that assistive technologies can read its content. */
import * as ɵngcc0 from '@angular/core';
export class ClrFocusOnViewInit {
    constructor(el, platformId, focusOnViewInit, document, renderer) {
        this.el = el;
        this.platformId = platformId;
        this.focusOnViewInit = focusOnViewInit;
        this.renderer = renderer;
        this.directFocus = true; // true if the element gets focused without need to set tabindex;
        this._isEnabled = this.focusOnViewInit;
        // Angular compiler doesn't understand the type Document
        // when working out the metadata for injectable parameters,
        // even though it understands the injection token DOCUMENT
        // https://github.com/angular/angular/issues/20351
        this.document = document;
    }
    onFocusout() {
        if (!this.directFocus) {
            // manually set attributes and styles should be removed
            this.renderer.removeAttribute(this.el.nativeElement, 'tabindex');
            this.renderer.setStyle(this.el.nativeElement, 'outline', null);
        }
    }
    set isEnabled(value) {
        if (this.focusOnViewInit && typeof value === 'boolean') {
            this._isEnabled = value;
        }
    }
    ngAfterViewInit() {
        this.focus();
    }
    focus() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (!this._isEnabled) {
            return;
        }
        if (this.document && this.document.activeElement !== this.el.nativeElement) {
            this.el.nativeElement.focus();
            if (this.document.activeElement !== this.el.nativeElement) {
                // if it's not directly focused now, it means it was a non-interactive element
                // so we need to give it a tabindex.
                this.directFocus = false;
                this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');
                this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');
                this.el.nativeElement.focus();
            }
        }
    }
}
ClrFocusOnViewInit.ɵfac = function ClrFocusOnViewInit_Factory(t) { return new (t || ClrFocusOnViewInit)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FOCUS_ON_VIEW_INIT), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ClrFocusOnViewInit.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrFocusOnViewInit, selectors: [["", "clrFocusOnViewInit", ""]], hostBindings: function ClrFocusOnViewInit_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function ClrFocusOnViewInit_focusout_HostBindingHandler() { return ctx.onFocusout(); });
    } }, inputs: { isEnabled: ["clrFocusOnViewInit", "isEnabled"] } });
ClrFocusOnViewInit.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [FOCUS_ON_VIEW_INIT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
ClrFocusOnViewInit.propDecorators = {
    onFocusout: [{ type: HostListener, args: ['focusout',] }],
    isEnabled: [{ type: Input, args: ['clrFocusOnViewInit',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrFocusOnViewInit, [{
        type: Directive,
        args: [{
                selector: '[clrFocusOnViewInit]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: Boolean, decorators: [{
                type: Inject,
                args: [FOCUS_ON_VIEW_INIT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { onFocusout: [{
            type: HostListener,
            args: ['focusout']
        }], isEnabled: [{
            type: Input,
            args: ['clrFocusOnViewInit']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtb24tdmlldy1pbml0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvdXRpbHMvZm9jdXMvZm9jdXMtb24tdmlldy1pbml0L2ZvY3VzLW9uLXZpZXctaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsV0FBVyxFQUNYLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVuRTtBQUNBLDJEQUEyRDs7QUFJM0QsTUFBTSxPQUFPLGtCQUFrQjtBQUFHLElBQ2hDLFlBQ1UsRUFBYyxFQUNPLFVBQWUsRUFDUixlQUF3QixFQUMxQyxRQUFhLEVBQ3ZCLFFBQW1CO0FBQzVCLFFBTFMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ00sZUFBVSxHQUFWLFVBQVUsQ0FBSztBQUFDLFFBQ1Qsb0JBQWUsR0FBZixlQUFlLENBQVM7QUFBQyxRQUVyRCxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQy9CLFFBV1UsZ0JBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxpRUFBaUU7QUFDL0YsUUFYSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDM0MsUUFDSSx3REFBd0Q7QUFDNUQsUUFBSSwyREFBMkQ7QUFDL0QsUUFBSSwwREFBMEQ7QUFDOUQsUUFBSSxrREFBa0Q7QUFDdEQsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFDSCxJQUtFLFVBQVU7QUFDWixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzNCLFlBQU0sdURBQXVEO0FBQzdELFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdkUsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckUsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBRUUsSUFDSSxTQUFTLENBQUMsS0FBYztBQUM5QixRQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLEVBQUU7QUFDNUQsWUFBTSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUM5QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxlQUFlO0FBQ2pCLFFBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNILElBQ1UsS0FBSztBQUNmLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUM3QyxZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUMxQixZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUU7QUFDaEYsWUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQyxZQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUU7QUFDakUsZ0JBQVEsOEVBQThFO0FBQ3RGLGdCQUFRLG9DQUFvQztBQUM1QyxnQkFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUNqQyxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUUsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pFLGdCQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RDLGFBQU87QUFDUCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7OENBL0RDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsc0JBQXNCLGVBQ2pDOzs7dUVBQ0k7QUFBQztBQUE0QyxZQWRoRCxVQUFVO0FBQ1YsNENBZ0JHLE1BQU0sU0FBQyxXQUFXO0FBQVMsMENBQzNCLE1BQU0sU0FBQyxrQkFBa0I7QUFBUyw0Q0FDbEMsTUFBTSxTQUFDLFFBQVE7QUFBUyxZQWQzQixTQUFTO0FBQ1Y7QUFBRztBQUNjLHlCQTJCZixZQUFZLFNBQUMsVUFBVTtBQUNyQix3QkFTRixLQUFLLFNBQUMsb0JBQW9CO0FBQ3pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgRE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBQTEFURk9STV9JRCxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZPQ1VTX09OX1ZJRVdfSU5JVCB9IGZyb20gJy4vZm9jdXMtb24tdmlldy1pbml0LnByb3ZpZGVyJztcblxuLyogIFRoaXMgZGlyZWN0aXZlIGlzIGZvciBndWlkaW5nIHRoZSBkb2N1bWVudCBmb2N1cyB0byB0aGUgbmV3bHkgYWRkZWQgY29udGVudCB3aGVuIGl0cyB2aWV3IGlzIGluaXRpYWxpemVkXG4gICAgc28gdGhhdCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzIGNhbiByZWFkIGl0cyBjb250ZW50LiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsckZvY3VzT25WaWV3SW5pdF0nLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJGb2N1c09uVmlld0luaXQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueSxcbiAgICBASW5qZWN0KEZPQ1VTX09OX1ZJRVdfSU5JVCkgcHJpdmF0ZSBmb2N1c09uVmlld0luaXQ6IGJvb2xlYW4sXG4gICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSxcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gdGhpcy5mb2N1c09uVmlld0luaXQ7XG5cbiAgICAvLyBBbmd1bGFyIGNvbXBpbGVyIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGUgdHlwZSBEb2N1bWVudFxuICAgIC8vIHdoZW4gd29ya2luZyBvdXQgdGhlIG1ldGFkYXRhIGZvciBpbmplY3RhYmxlIHBhcmFtZXRlcnMsXG4gICAgLy8gZXZlbiB0aG91Z2ggaXQgdW5kZXJzdGFuZHMgdGhlIGluamVjdGlvbiB0b2tlbiBET0NVTUVOVFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIwMzUxXG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG4gIHByaXZhdGUgZGlyZWN0Rm9jdXMgPSB0cnVlOyAvLyB0cnVlIGlmIHRoZSBlbGVtZW50IGdldHMgZm9jdXNlZCB3aXRob3V0IG5lZWQgdG8gc2V0IHRhYmluZGV4O1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3Vzb3V0JylcbiAgb25Gb2N1c291dCgpIHtcbiAgICBpZiAoIXRoaXMuZGlyZWN0Rm9jdXMpIHtcbiAgICAgIC8vIG1hbnVhbGx5IHNldCBhdHRyaWJ1dGVzIGFuZCBzdHlsZXMgc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3RhYmluZGV4Jyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ291dGxpbmUnLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9pc0VuYWJsZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgnY2xyRm9jdXNPblZpZXdJbml0JylcbiAgc2V0IGlzRW5hYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmZvY3VzT25WaWV3SW5pdCAmJiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgZm9jdXMoKSB7XG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmRvY3VtZW50ICYmIHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy5lbC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIGlmICh0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMuZWwubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAvLyBpZiBpdCdzIG5vdCBkaXJlY3RseSBmb2N1c2VkIG5vdywgaXQgbWVhbnMgaXQgd2FzIGEgbm9uLWludGVyYWN0aXZlIGVsZW1lbnRcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBnaXZlIGl0IGEgdGFiaW5kZXguXG4gICAgICAgIHRoaXMuZGlyZWN0Rm9jdXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdvdXRsaW5lJywgJ25vbmUnKTtcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=