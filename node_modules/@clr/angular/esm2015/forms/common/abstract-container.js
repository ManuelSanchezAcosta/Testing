/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChild, Directive, Optional } from '@angular/core';
import { NgControlService } from './providers/ng-control.service';
import { LayoutService } from './providers/layout.service';
import { ClrLabel } from './label';
import { ControlClassService } from './providers/control-class.service';
import { IfControlStateService, CONTROL_STATE } from './if-control-state/if-control-state.service';
import { ClrControlSuccess } from './success';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './if-control-state/if-control-state.service';
import * as ɵngcc2 from './providers/layout.service';
import * as ɵngcc3 from './providers/control-class.service';
import * as ɵngcc4 from './providers/ng-control.service';
export class ClrAbstractContainer {
    constructor(ifControlStateService, layoutService, controlClassService, ngControlService) {
        this.ifControlStateService = ifControlStateService;
        this.layoutService = layoutService;
        this.controlClassService = controlClassService;
        this.ngControlService = ngControlService;
        this.subscriptions = [];
        this._dynamic = false;
        this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state) => {
            this.state = state;
        }));
        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
            this.control = control;
        }));
    }
    get showHelper() {
        return this.state === CONTROL_STATE.NONE || (!this.showInvalid && !this.controlSuccessComponent);
    }
    get showValid() {
        return this.state === CONTROL_STATE.VALID && !!this.controlSuccessComponent;
    }
    get showInvalid() {
        return this.state === CONTROL_STATE.INVALID;
    }
    controlClass() {
        /**
         * Decide what subtext to display:
         *   - element is valid but no success component is implemented - show helper
         *   - element is valid and success component is implemented - show success
         */
        if (!this.controlSuccessComponent && this.state === CONTROL_STATE.VALID) {
            return this.controlClassService.controlClass(CONTROL_STATE.NONE, this.addGrid());
        }
        /**
         * Pass form control state and return string of classes to be applyed to the container.
         */
        return this.controlClassService.controlClass(this.state, this.addGrid());
    }
    addGrid() {
        return this.layoutService && !this.layoutService.isVertical();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
}
ClrAbstractContainer.ɵfac = function ClrAbstractContainer_Factory(t) { return new (t || ClrAbstractContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IfControlStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ControlClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControlService)); };
ClrAbstractContainer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrAbstractContainer, contentQueries: function ClrAbstractContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlSuccess, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlSuccessComponent = _t.first);
    } } });
ClrAbstractContainer.ctorParameters = () => [
    { type: IfControlStateService },
    { type: LayoutService, decorators: [{ type: Optional }] },
    { type: ControlClassService },
    { type: NgControlService }
];
ClrAbstractContainer.propDecorators = {
    label: [{ type: ContentChild, args: [ClrLabel, { static: false },] }],
    controlSuccessComponent: [{ type: ContentChild, args: [ClrControlSuccess,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrAbstractContainer, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.IfControlStateService }, { type: ɵngcc2.LayoutService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.ControlClassService }, { type: ɵngcc4.NgControlService }]; }, { label: [{
            type: ContentChild,
            args: [ClrLabel, { static: false }]
        }], controlSuccessComponent: [{
            type: ContentChild,
            args: [ClrControlSuccess]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29udGFpbmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tbW9uL2Fic3RyYWN0LWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ25HLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7Ozs7O0FBRzlDLE1BQU0sT0FBZ0Isb0JBQW9CO0FBQUcsSUF5QjNDLFlBQ1kscUJBQTRDLEVBQ2hDLGFBQTRCLEVBQ3hDLG1CQUF3QyxFQUN4QyxnQkFBa0M7QUFDN0MsUUFKVywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFDakMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUN6Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFDekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUNoRCxRQTdCWSxrQkFBYSxHQUFtQixFQUFFLENBQUM7QUFDL0MsUUFBRSxhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFFBNEJJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQW9CLEVBQUUsRUFBRTtBQUNsRixZQUFRLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLFFBQ0ksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQy9ELFlBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDL0IsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUE5QkUsSUFBSSxVQUFVO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNyRyxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksU0FBUztBQUFLLFFBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7QUFDaEYsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFdBQVc7QUFBSyxRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLE9BQU8sQ0FBQztBQUNoRCxJQUFFLENBQUM7QUFDSCxJQW9CRSxZQUFZO0FBQ2QsUUFBSTtBQUNKO0FBQ0k7QUFDSTtBQUVKLFdBREc7QUFDUCxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsS0FBSyxFQUFFO0FBQzdFLFlBQU0sT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDdkYsU0FBSztBQUNMLFFBQUk7QUFDSjtBQUNJLFdBQUc7QUFDUCxRQUFJLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLElBQUUsQ0FBQztBQUNILElBQ0UsT0FBTztBQUNULFFBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNsRSxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDM0UsSUFBRSxDQUFDO0FBQ0g7Z0RBbkVDLFNBQVM7Ozs7Ozs7O1dBQ1I7QUFBQztBQUE4QyxZQUp4QyxxQkFBcUI7QUFBSSxZQUx6QixhQUFhLHVCQW9DakIsUUFBUTtBQUFPLFlBakNYLG1CQUFtQjtBQUFJLFlBSnZCLGdCQUFnQjtBQUFHO0FBQUc7QUFDM0Isb0JBWUQsWUFBWSxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDdEMsc0NBT0YsWUFBWSxTQUFDLGlCQUFpQjtBQUFNOzs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQ29udGVudENoaWxkLCBEaXJlY3RpdmUsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTmdDb250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL25nLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHluYW1pY1dyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlscy9ob3N0LXdyYXBwaW5nL2R5bmFtaWMtd3JhcHBlcic7XG5pbXBvcnQgeyBDbHJMYWJlbCB9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHsgQ29udHJvbENsYXNzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElmQ29udHJvbFN0YXRlU2VydmljZSwgQ09OVFJPTF9TVEFURSB9IGZyb20gJy4vaWYtY29udHJvbC1zdGF0ZS9pZi1jb250cm9sLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29udHJvbFN1Y2Nlc3MgfSBmcm9tICcuL3N1Y2Nlc3MnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbHJBYnN0cmFjdENvbnRhaW5lciBpbXBsZW1lbnRzIER5bmFtaWNXcmFwcGVyLCBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgX2R5bmFtaWMgPSBmYWxzZTtcbiAgQENvbnRlbnRDaGlsZChDbHJMYWJlbCwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIGxhYmVsOiBDbHJMYWJlbDtcbiAgY29udHJvbDogTmdDb250cm9sO1xuICBwcml2YXRlIHN0YXRlOiBDT05UUk9MX1NUQVRFO1xuXG4gIC8qKlxuICAgKiBTZWFyY2ggZm9yIGBDbHJTdWNjZXNzQ29tcG9uZW50YCB0byBrbm93IGRvIHdlIHdhbnQgdG8gZGlzcGxheSBjbHItc3VjY2VzcyBvciBub3RcbiAgICovXG4gIEBDb250ZW50Q2hpbGQoQ2xyQ29udHJvbFN1Y2Nlc3MpIGNvbnRyb2xTdWNjZXNzQ29tcG9uZW50OiBDbHJDb250cm9sU3VjY2VzcztcblxuICBnZXQgc2hvd0hlbHBlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ09OVFJPTF9TVEFURS5OT05FIHx8ICghdGhpcy5zaG93SW52YWxpZCAmJiAhdGhpcy5jb250cm9sU3VjY2Vzc0NvbXBvbmVudCk7XG4gIH1cblxuICBnZXQgc2hvd1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDT05UUk9MX1NUQVRFLlZBTElEICYmICEhdGhpcy5jb250cm9sU3VjY2Vzc0NvbXBvbmVudDtcbiAgfVxuXG4gIGdldCBzaG93SW52YWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ09OVFJPTF9TVEFURS5JTlZBTElEO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGlmQ29udHJvbFN0YXRlU2VydmljZTogSWZDb250cm9sU3RhdGVTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBsYXlvdXRTZXJ2aWNlOiBMYXlvdXRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjb250cm9sQ2xhc3NTZXJ2aWNlOiBDb250cm9sQ2xhc3NTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBuZ0NvbnRyb2xTZXJ2aWNlOiBOZ0NvbnRyb2xTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5pZkNvbnRyb2xTdGF0ZVNlcnZpY2Uuc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHN0YXRlOiBDT05UUk9MX1NUQVRFKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5uZ0NvbnRyb2xTZXJ2aWNlLmNvbnRyb2xDaGFuZ2VzLnN1YnNjcmliZShjb250cm9sID0+IHtcbiAgICAgICAgdGhpcy5jb250cm9sID0gY29udHJvbDtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGNvbnRyb2xDbGFzcygpIHtcbiAgICAvKipcbiAgICAgKiBEZWNpZGUgd2hhdCBzdWJ0ZXh0IHRvIGRpc3BsYXk6XG4gICAgICogICAtIGVsZW1lbnQgaXMgdmFsaWQgYnV0IG5vIHN1Y2Nlc3MgY29tcG9uZW50IGlzIGltcGxlbWVudGVkIC0gc2hvdyBoZWxwZXJcbiAgICAgKiAgIC0gZWxlbWVudCBpcyB2YWxpZCBhbmQgc3VjY2VzcyBjb21wb25lbnQgaXMgaW1wbGVtZW50ZWQgLSBzaG93IHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuY29udHJvbFN1Y2Nlc3NDb21wb25lbnQgJiYgdGhpcy5zdGF0ZSA9PT0gQ09OVFJPTF9TVEFURS5WQUxJRCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udHJvbENsYXNzU2VydmljZS5jb250cm9sQ2xhc3MoQ09OVFJPTF9TVEFURS5OT05FLCB0aGlzLmFkZEdyaWQoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhc3MgZm9ybSBjb250cm9sIHN0YXRlIGFuZCByZXR1cm4gc3RyaW5nIG9mIGNsYXNzZXMgdG8gYmUgYXBwbHllZCB0byB0aGUgY29udGFpbmVyLlxuICAgICAqL1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xDbGFzc1NlcnZpY2UuY29udHJvbENsYXNzKHRoaXMuc3RhdGUsIHRoaXMuYWRkR3JpZCgpKTtcbiAgfVxuXG4gIGFkZEdyaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMubGF5b3V0U2VydmljZSAmJiAhdGhpcy5sYXlvdXRTZXJ2aWNlLmlzVmVydGljYWwoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==