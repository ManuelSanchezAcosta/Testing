/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Optional, ContentChild, ViewChild, Input, } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrLabel } from '../common/label';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPositions } from '../../utils/popover/enums/positions.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ViewManagerService } from './providers/view-manager.service';
import { IfControlStateService, CONTROL_STATE } from '../common/if-control-state/if-control-state.service';
import { ClrControlSuccess } from '../common/success';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc2 from './providers/date-navigation.service';
import * as ɵngcc3 from './providers/datepicker-enabled.service';
import * as ɵngcc4 from './providers/date-form-control.service';
import * as ɵngcc5 from '../../utils/i18n/common-strings.service';
import * as ɵngcc6 from '../common/providers/focus.service';
import * as ɵngcc7 from './providers/view-manager.service';
import * as ɵngcc8 from '../common/providers/control-class.service';
import * as ɵngcc9 from '../common/providers/layout.service';
import * as ɵngcc10 from '../common/providers/ng-control.service';
import * as ɵngcc11 from '../common/if-control-state/if-control-state.service';
import * as ɵngcc12 from '@angular/common';
import * as ɵngcc13 from '../../utils/popover/popover-anchor';
import * as ɵngcc14 from '../../utils/popover/popover-content';
import * as ɵngcc15 from '../common/label';
import * as ɵngcc16 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc17 from '../../icon/icon';
import * as ɵngcc18 from './datepicker-view-manager';
import * as ɵngcc19 from '../../utils/focus-trap/focus-trap.directive';

const _c0 = ["actionButton"];
function ClrDateContainer_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "label");
} }
function ClrDateContainer_button_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 8, 9);
    ɵngcc0.ɵɵelement(2, "cds-icon", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isInputDateDisabled);
    ɵngcc0.ɵɵattribute("title", ctx_r1.commonStrings.keys.datepickerToggle)("aria-label", ctx_r1.commonStrings.keys.datepickerToggle);
} }
function ClrDateContainer_clr_datepicker_view_manager_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-datepicker-view-manager", 11);
} }
function ClrDateContainer_cds_icon_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "cds-icon", 12);
} }
function ClrDateContainer_cds_icon_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "cds-icon", 13);
} }
function ClrDateContainer_ng_content_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
} }
function ClrDateContainer_ng_content_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
} }
function ClrDateContainer_ng_content_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
} }
const _c1 = [[["label"]], [["", "clrDate", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
const _c2 = ["label", "[clrDate]", "clr-control-helper", "clr-control-error", "clr-control-success"];
export class ClrDateContainer {
    constructor(toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, commonStrings, focusService, viewManagerService, controlClassService, layoutService, ngControlService, ifControlStateService) {
        this.toggleService = toggleService;
        this.dateNavigationService = dateNavigationService;
        this.datepickerEnabledService = datepickerEnabledService;
        this.dateFormControlService = dateFormControlService;
        this.commonStrings = commonStrings;
        this.focusService = focusService;
        this.viewManagerService = viewManagerService;
        this.controlClassService = controlClassService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this.ifControlStateService = ifControlStateService;
        this._dynamic = false;
        this.showInvalid = false;
        this.showHelper = false;
        this.focus = false;
        this.showValid = false;
        this.subscriptions = [];
        this.subscriptions.push(this.focusService.focusChange.subscribe(state => {
            this.focus = state;
        }));
        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
            this.control = control;
        }));
        this.subscriptions.push(this.toggleService.openChange.subscribe(() => {
            this.dateFormControlService.markAsTouched();
        }));
    }
    set clrPosition(position) {
        if (position && ClrPopoverPositions[position]) {
            this.viewManagerService.position = ClrPopoverPositions[position];
        }
    }
    get popoverPosition() {
        return this.viewManagerService.position;
    }
    get open() {
        return this.toggleService.open;
    }
    set actionButton(button) {
        this.toggleButton = button;
    }
    ngOnInit() {
        this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state) => {
            this.state = state;
            this.showValid = CONTROL_STATE.VALID === state && !!this.controlSuccessComponent;
            this.showInvalid = CONTROL_STATE.INVALID === state;
            this.showHelper = CONTROL_STATE.NONE === state || (!this.showInvalid && !this.controlSuccessComponent);
        }));
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.toggleService.openChange.subscribe(open => {
            if (open) {
                this.initializeCalendar();
            }
            else {
                this.toggleButton.nativeElement.focus();
            }
        }));
    }
    /**
     * Returns the classes to apply to the control
     */
    controlClass() {
        return this.controlClassService.controlClass(this.state, this.addGrid());
    }
    /**
     * Determines if the control needs to add grid classes
     */
    addGrid() {
        return this.layoutService && !this.layoutService.isVertical();
    }
    /**
     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
     */
    get isEnabled() {
        return this.datepickerEnabledService.isEnabled;
    }
    /**
     * Return if Datepicker is diabled or not as Form Control
     */
    get isInputDateDisabled() {
        /* clrForm wrapper or without clrForm */
        return ((this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled));
    }
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    initializeCalendar() {
        this.dateNavigationService.initializeCalendar();
    }
    /**
     * Unsubscribe from subscriptions.
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
}
ClrDateContainer.ɵfac = function ClrDateContainer_Factory(t) { return new (t || ClrDateContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateNavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DatepickerEnabledService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DateFormControlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ViewManagerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.ControlClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgControlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.IfControlStateService)); };
ClrDateContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDateContainer, selectors: [["clr-date-container"]], contentQueries: function ClrDateContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlSuccess, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlSuccessComponent = _t.first);
    } }, viewQuery: function ClrDateContainer_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionButton = _t.first);
    } }, hostVars: 8, hostBindings: function ClrDateContainer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-date-container", true)("clr-form-control-disabled", ctx.isInputDateDisabled)("clr-form-control", true)("clr-row", ctx.addGrid());
    } }, inputs: { clrPosition: "clrPosition" }, features: [ɵngcc0.ɵɵProvidersFeature([
            ControlIdService,
            ClrPopoverToggleService,
            ClrPopoverEventsService,
            ClrPopoverPositionService,
            LocaleHelperService,
            ControlClassService,
            FocusService,
            NgControlService,
            DateIOService,
            DateNavigationService,
            DatepickerEnabledService,
            DateFormControlService,
            ViewManagerService,
            IfControlStateService,
        ])], ngContentSelectors: _c2, decls: 13, vars: 14, consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], ["clrPopoverAnchor", "", 1, "clr-input-wrapper"], [1, "clr-input-group"], ["type", "button", "clrPopoverOpenCloseButton", "", "class", "clr-input-group-icon-action", 3, "disabled", 4, "ngIf"], ["clrFocusTrap", "", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["class", "clr-validate-icon", "status", "danger", "shape", "exclamation-circle", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["type", "button", "clrPopoverOpenCloseButton", "", 1, "clr-input-group-icon-action", 3, "disabled"], ["actionButton", ""], ["status", "info", "shape", "calendar"], ["clrFocusTrap", ""], ["status", "danger", "shape", "exclamation-circle", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]], template: function ClrDateContainer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ClrDateContainer_label_1_Template, 1, 0, "label", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵtemplate(6, ClrDateContainer_button_6_Template, 3, 3, "button", 4);
        ɵngcc0.ɵɵtemplate(7, ClrDateContainer_clr_datepicker_view_manager_7_Template, 1, 0, "clr-datepicker-view-manager", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ClrDateContainer_cds_icon_8_Template, 1, 0, "cds-icon", 6);
        ɵngcc0.ɵɵtemplate(9, ClrDateContainer_cds_icon_9_Template, 1, 0, "cds-icon", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ClrDateContainer_ng_content_10_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵtemplate(11, ClrDateContainer_ng_content_11_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵtemplate(12, ClrDateContainer_ng_content_12_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.controlClass());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("clr-focus", ctx.focus);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEnabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.popoverPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showInvalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showValid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showHelper);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showInvalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showValid);
    } }, directives: [ɵngcc12.NgIf, ɵngcc12.NgClass, ɵngcc13.ClrPopoverAnchor, ɵngcc14.ClrPopoverContent, ɵngcc15.ClrLabel, ɵngcc16.ClrPopoverOpenCloseButton, ɵngcc17.CdsIconCustomTag, ɵngcc18.ClrDatepickerViewManager, ɵngcc19.FocusTrapDirective], encapsulation: 2 });
ClrDateContainer.ctorParameters = () => [
    { type: ClrPopoverToggleService },
    { type: DateNavigationService },
    { type: DatepickerEnabledService },
    { type: DateFormControlService },
    { type: ClrCommonStringsService },
    { type: FocusService },
    { type: ViewManagerService },
    { type: ControlClassService },
    { type: LayoutService, decorators: [{ type: Optional }] },
    { type: NgControlService },
    { type: IfControlStateService }
];
ClrDateContainer.propDecorators = {
    label: [{ type: ContentChild, args: [ClrLabel,] }],
    controlSuccessComponent: [{ type: ContentChild, args: [ClrControlSuccess,] }],
    clrPosition: [{ type: Input, args: ['clrPosition',] }],
    actionButton: [{ type: ViewChild, args: ['actionButton',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDateContainer, [{
        type: Component,
        args: [{
                selector: 'clr-date-container',
                template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper" clrPopoverAnchor>
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrDate]"></ng-content>
          <button
            #actionButton
            type="button"
            clrPopoverOpenCloseButton
            class="clr-input-group-icon-action"
            [attr.title]="commonStrings.keys.datepickerToggle"
            [attr.aria-label]="commonStrings.keys.datepickerToggle"
            [disabled]="isInputDateDisabled"
            *ngIf="isEnabled"
          >
            <cds-icon status="info" shape="calendar"></cds-icon>
          </button>
          <clr-datepicker-view-manager
            *clrPopoverContent="open; at: popoverPosition; outsideClickToClose: true; scrollToClose: true"
            clrFocusTrap
          ></clr-datepicker-view-manager>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          status="danger"
          shape="exclamation-circle"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
                providers: [
                    ControlIdService,
                    ClrPopoverToggleService,
                    ClrPopoverEventsService,
                    ClrPopoverPositionService,
                    LocaleHelperService,
                    ControlClassService,
                    FocusService,
                    NgControlService,
                    DateIOService,
                    DateNavigationService,
                    DatepickerEnabledService,
                    DateFormControlService,
                    ViewManagerService,
                    IfControlStateService,
                ],
                host: {
                    '[class.clr-date-container]': 'true',
                    '[class.clr-form-control-disabled]': 'isInputDateDisabled',
                    '[class.clr-form-control]': 'true',
                    '[class.clr-row]': 'addGrid()'
                }
            }]
    }], function () { return [{ type: ɵngcc1.ClrPopoverToggleService }, { type: ɵngcc2.DateNavigationService }, { type: ɵngcc3.DatepickerEnabledService }, { type: ɵngcc4.DateFormControlService }, { type: ɵngcc5.ClrCommonStringsService }, { type: ɵngcc6.FocusService }, { type: ɵngcc7.ViewManagerService }, { type: ɵngcc8.ControlClassService }, { type: ɵngcc9.LayoutService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc10.NgControlService }, { type: ɵngcc11.IfControlStateService }]; }, { clrPosition: [{
            type: Input,
            args: ['clrPosition']
        }], actionButton: [{
            type: ViewChild,
            args: ['actionButton']
        }], label: [{
            type: ContentChild,
            args: [ClrLabel]
        }], controlSuccessComponent: [{
            type: ContentChild,
            args: [ClrControlSuccess]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jb250YWluZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy9mb3Jtcy9kYXRlcGlja2VyL2RhdGUtY29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFDTCxTQUFTLEVBRVQsUUFBUSxFQUNSLFlBQVksRUFFWixTQUFTLEVBRVQsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBRS9GLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUUvRSxPQUFPLEVBQUUsdUJB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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBDb250ZW50Q2hpbGQsXG4gIEFmdGVyVmlld0luaXQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHluYW1pY1dyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlscy9ob3N0LXdyYXBwaW5nL2R5bmFtaWMtd3JhcHBlcic7XG5pbXBvcnQgeyBDb250cm9sQ2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9jb250cm9sLWNsYXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udHJvbElkU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvY29udHJvbC1pZC5zZXJ2aWNlJztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9uZy1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyTGFiZWwgfSBmcm9tICcuLi9jb21tb24vbGFiZWwnO1xuXG5pbXBvcnQgeyBEYXRlRm9ybUNvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1mb3JtLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlSU9TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1pby5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVwaWNrZXJFbmFibGVkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGVwaWNrZXItZW5hYmxlZC5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2FsZUhlbHBlclNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9sb2NhbGUtaGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvZW51bXMvcG9zaXRpb25zLmVudW0nO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9pbnRlcmZhY2VzL3BvcG92ZXItcG9zaXRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJFdmVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci1ldmVudHMuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyUG9zaXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci1wb3NpdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXdNYW5hZ2VyU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3ZpZXctbWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSWZDb250cm9sU3RhdGVTZXJ2aWNlLCBDT05UUk9MX1NUQVRFIH0gZnJvbSAnLi4vY29tbW9uL2lmLWNvbnRyb2wtc3RhdGUvaWYtY29udHJvbC1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENsckNvbnRyb2xTdWNjZXNzIH0gZnJvbSAnLi4vY29tbW9uL3N1Y2Nlc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItZGF0ZS1jb250YWluZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImxhYmVsXCI+PC9uZy1jb250ZW50PlxuICAgIDxsYWJlbCAqbmdJZj1cIiFsYWJlbCAmJiBhZGRHcmlkKClcIj48L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJjbHItY29udHJvbC1jb250YWluZXJcIiBbbmdDbGFzc109XCJjb250cm9sQ2xhc3MoKVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNsci1pbnB1dC13cmFwcGVyXCIgY2xyUG9wb3ZlckFuY2hvcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNsci1pbnB1dC1ncm91cFwiIFtjbGFzcy5jbHItZm9jdXNdPVwiZm9jdXNcIj5cbiAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbY2xyRGF0ZV1cIj48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgI2FjdGlvbkJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBjbHJQb3BvdmVyT3BlbkNsb3NlQnV0dG9uXG4gICAgICAgICAgICBjbGFzcz1cImNsci1pbnB1dC1ncm91cC1pY29uLWFjdGlvblwiXG4gICAgICAgICAgICBbYXR0ci50aXRsZV09XCJjb21tb25TdHJpbmdzLmtleXMuZGF0ZXBpY2tlclRvZ2dsZVwiXG4gICAgICAgICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImNvbW1vblN0cmluZ3Mua2V5cy5kYXRlcGlja2VyVG9nZ2xlXCJcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XCJpc0lucHV0RGF0ZURpc2FibGVkXCJcbiAgICAgICAgICAgICpuZ0lmPVwiaXNFbmFibGVkXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Y2RzLWljb24gc3RhdHVzPVwiaW5mb1wiIHNoYXBlPVwiY2FsZW5kYXJcIj48L2Nkcy1pY29uPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxjbHItZGF0ZXBpY2tlci12aWV3LW1hbmFnZXJcbiAgICAgICAgICAgICpjbHJQb3BvdmVyQ29udGVudD1cIm9wZW47IGF0OiBwb3BvdmVyUG9zaXRpb247IG91dHNpZGVDbGlja1RvQ2xvc2U6IHRydWU7IHNjcm9sbFRvQ2xvc2U6IHRydWVcIlxuICAgICAgICAgICAgY2xyRm9jdXNUcmFwXG4gICAgICAgICAgPjwvY2xyLWRhdGVwaWNrZXItdmlldy1tYW5hZ2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGNkcy1pY29uXG4gICAgICAgICAgKm5nSWY9XCJzaG93SW52YWxpZFwiXG4gICAgICAgICAgY2xhc3M9XCJjbHItdmFsaWRhdGUtaWNvblwiXG4gICAgICAgICAgc3RhdHVzPVwiZGFuZ2VyXCJcbiAgICAgICAgICBzaGFwZT1cImV4Y2xhbWF0aW9uLWNpcmNsZVwiXG4gICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgPjwvY2RzLWljb24+XG4gICAgICAgIDxjZHMtaWNvblxuICAgICAgICAgICpuZ0lmPVwic2hvd1ZhbGlkXCJcbiAgICAgICAgICBjbGFzcz1cImNsci12YWxpZGF0ZS1pY29uXCJcbiAgICAgICAgICBzaGFwZT1cImNoZWNrLWNpcmNsZVwiXG4gICAgICAgICAgc3RhdHVzPVwic3VjY2Vzc1wiXG4gICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgPjwvY2RzLWljb24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci1jb250cm9sLWhlbHBlclwiICpuZ0lmPVwic2hvd0hlbHBlclwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci1jb250cm9sLWVycm9yXCIgKm5nSWY9XCJzaG93SW52YWxpZFwiPjwvbmctY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci1jb250cm9sLXN1Y2Nlc3NcIiAqbmdJZj1cInNob3dWYWxpZFwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ29udHJvbElkU2VydmljZSxcbiAgICBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSxcbiAgICBDbHJQb3BvdmVyRXZlbnRzU2VydmljZSxcbiAgICBDbHJQb3BvdmVyUG9zaXRpb25TZXJ2aWNlLFxuICAgIExvY2FsZUhlbHBlclNlcnZpY2UsXG4gICAgQ29udHJvbENsYXNzU2VydmljZSxcbiAgICBGb2N1c1NlcnZpY2UsXG4gICAgTmdDb250cm9sU2VydmljZSxcbiAgICBEYXRlSU9TZXJ2aWNlLFxuICAgIERhdGVOYXZpZ2F0aW9uU2VydmljZSxcbiAgICBEYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UsXG4gICAgRGF0ZUZvcm1Db250cm9sU2VydmljZSxcbiAgICBWaWV3TWFuYWdlclNlcnZpY2UsXG4gICAgSWZDb250cm9sU3RhdGVTZXJ2aWNlLFxuICBdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItZGF0ZS1jb250YWluZXJdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuY2xyLWZvcm0tY29udHJvbC1kaXNhYmxlZF0nOiAnaXNJbnB1dERhdGVEaXNhYmxlZCcsXG4gICAgJ1tjbGFzcy5jbHItZm9ybS1jb250cm9sXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmNsci1yb3ddJzogJ2FkZEdyaWQoKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckRhdGVDb250YWluZXIgaW1wbGVtZW50cyBEeW5hbWljV3JhcHBlciwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgX2R5bmFtaWMgPSBmYWxzZTtcbiAgc2hvd0ludmFsaWQgPSBmYWxzZTtcbiAgc2hvd0hlbHBlciA9IGZhbHNlO1xuICBmb2N1cyA9IGZhbHNlO1xuICBzaG93VmFsaWQgPSBmYWxzZTtcbiAgc3RhdGU6IENPTlRST0xfU1RBVEU7XG4gIGNvbnRyb2w6IE5nQ29udHJvbDtcbiAgQENvbnRlbnRDaGlsZChDbHJMYWJlbCkgbGFiZWw6IENsckxhYmVsO1xuICBAQ29udGVudENoaWxkKENsckNvbnRyb2xTdWNjZXNzKSBjb250cm9sU3VjY2Vzc0NvbXBvbmVudDogQ2xyQ29udHJvbFN1Y2Nlc3M7XG5cbiAgQElucHV0KCdjbHJQb3NpdGlvbicpXG4gIHNldCBjbHJQb3NpdGlvbihwb3NpdGlvbjogc3RyaW5nKSB7XG4gICAgaWYgKHBvc2l0aW9uICYmIChDbHJQb3BvdmVyUG9zaXRpb25zIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW3Bvc2l0aW9uXSkge1xuICAgICAgdGhpcy52aWV3TWFuYWdlclNlcnZpY2UucG9zaXRpb24gPSAoQ2xyUG9wb3ZlclBvc2l0aW9ucyBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVtwb3NpdGlvbl07XG4gICAgfVxuICB9XG4gIGdldCBwb3BvdmVyUG9zaXRpb24oKTogQ2xyUG9wb3ZlclBvc2l0aW9uIHtcbiAgICByZXR1cm4gdGhpcy52aWV3TWFuYWdlclNlcnZpY2UucG9zaXRpb247XG4gIH1cblxuICBwdWJsaWMgZ2V0IG9wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlU2VydmljZS5vcGVuO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVCdXR0b246IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2FjdGlvbkJ1dHRvbicpXG4gIHNldCBhY3Rpb25CdXR0b24oYnV0dG9uOiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy50b2dnbGVCdXR0b24gPSBidXR0b247XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSxcbiAgICBwcml2YXRlIGRhdGVOYXZpZ2F0aW9uU2VydmljZTogRGF0ZU5hdmlnYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgZGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlOiBEYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkYXRlRm9ybUNvbnRyb2xTZXJ2aWNlOiBEYXRlRm9ybUNvbnRyb2xTZXJ2aWNlLFxuICAgIHB1YmxpYyBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSxcbiAgICBwcml2YXRlIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlLFxuICAgIHByaXZhdGUgdmlld01hbmFnZXJTZXJ2aWNlOiBWaWV3TWFuYWdlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb250cm9sQ2xhc3NTZXJ2aWNlOiBDb250cm9sQ2xhc3NTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSxcbiAgICBwcml2YXRlIG5nQ29udHJvbFNlcnZpY2U6IE5nQ29udHJvbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpZkNvbnRyb2xTdGF0ZVNlcnZpY2U6IElmQ29udHJvbFN0YXRlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuZm9jdXNTZXJ2aWNlLmZvY3VzQ2hhbmdlLnN1YnNjcmliZShzdGF0ZSA9PiB7XG4gICAgICAgIHRoaXMuZm9jdXMgPSBzdGF0ZTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5uZ0NvbnRyb2xTZXJ2aWNlLmNvbnRyb2xDaGFuZ2VzLnN1YnNjcmliZShjb250cm9sID0+IHtcbiAgICAgICAgdGhpcy5jb250cm9sID0gY29udHJvbDtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy50b2dnbGVTZXJ2aWNlLm9wZW5DaGFuZ2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5kYXRlRm9ybUNvbnRyb2xTZXJ2aWNlLm1hcmtBc1RvdWNoZWQoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5pZkNvbnRyb2xTdGF0ZVNlcnZpY2Uuc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHN0YXRlOiBDT05UUk9MX1NUQVRFKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zaG93VmFsaWQgPSBDT05UUk9MX1NUQVRFLlZBTElEID09PSBzdGF0ZSAmJiAhIXRoaXMuY29udHJvbFN1Y2Nlc3NDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuc2hvd0ludmFsaWQgPSBDT05UUk9MX1NUQVRFLklOVkFMSUQgPT09IHN0YXRlO1xuICAgICAgICB0aGlzLnNob3dIZWxwZXIgPSBDT05UUk9MX1NUQVRFLk5PTkUgPT09IHN0YXRlIHx8ICghdGhpcy5zaG93SW52YWxpZCAmJiAhdGhpcy5jb250cm9sU3VjY2Vzc0NvbXBvbmVudCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLnRvZ2dsZVNlcnZpY2Uub3BlbkNoYW5nZS5zdWJzY3JpYmUob3BlbiA9PiB7XG4gICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgdGhpcy5pbml0aWFsaXplQ2FsZW5kYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSBjb250cm9sXG4gICAqL1xuICBjb250cm9sQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbENsYXNzU2VydmljZS5jb250cm9sQ2xhc3ModGhpcy5zdGF0ZSwgdGhpcy5hZGRHcmlkKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGNvbnRyb2wgbmVlZHMgdG8gYWRkIGdyaWQgY2xhc3Nlc1xuICAgKi9cbiAgYWRkR3JpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYXlvdXRTZXJ2aWNlICYmICF0aGlzLmxheW91dFNlcnZpY2UuaXNWZXJ0aWNhbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgdGhlIERhdGVwaWNrZXIgaXMgZW5hYmxlZCBvciBub3QuIElmIGRpc2FibGVkLCBoaWRlcyB0aGUgZGF0ZXBpY2tlciB0cmlnZ2VyLlxuICAgKi9cbiAgZ2V0IGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UuaXNFbmFibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBpZiBEYXRlcGlja2VyIGlzIGRpYWJsZWQgb3Igbm90IGFzIEZvcm0gQ29udHJvbFxuICAgKi9cbiAgZ2V0IGlzSW5wdXREYXRlRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgLyogY2xyRm9ybSB3cmFwcGVyIG9yIHdpdGhvdXQgY2xyRm9ybSAqL1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5jb250cm9sICYmIHRoaXMuY29udHJvbC5kaXNhYmxlZCkgfHwgKHRoaXMuZGF0ZUZvcm1Db250cm9sU2VydmljZSAmJiB0aGlzLmRhdGVGb3JtQ29udHJvbFNlcnZpY2UuZGlzYWJsZWQpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgdGhlIHVzZXIgaW5wdXQgYW5kIEluaXRpYWxpemVzIHRoZSBDYWxlbmRhciBldmVyeXRpbWUgdGhlIGRhdGVwaWNrZXIgcG9wb3ZlciBpcyBvcGVuLlxuICAgKi9cbiAgcHJpdmF0ZSBpbml0aWFsaXplQ2FsZW5kYXIoKTogdm9pZCB7XG4gICAgdGhpcy5kYXRlTmF2aWdhdGlvblNlcnZpY2UuaW5pdGlhbGl6ZUNhbGVuZGFyKCk7XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSBzdWJzY3JpcHRpb25zLlxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19