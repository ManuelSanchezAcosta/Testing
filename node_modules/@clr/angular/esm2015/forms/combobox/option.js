/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { OptionSelectionService } from './providers/option-selection.service';
import { ComboboxFocusHandler, OptionData as OptionProxy } from './providers/combobox-focus-handler.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/i18n/common-strings.service';
import * as ɵngcc2 from './providers/combobox-focus-handler.service';
import * as ɵngcc3 from './providers/option-selection.service';
import * as ɵngcc4 from '@angular/common';

function ClrOption_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.commonStrings.keys.comboboxSelected, " ");
} }
const _c0 = ["*"];
export class ClrOption {
    constructor(elRef, commonStrings, focusHandler, optionSelectionService, autoId) {
        this.elRef = elRef;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.optionSelectionService = optionSelectionService;
        this.autoId = autoId;
        // A proxy with only the necessary data to be used for a11y and the focus handler service.
        this.optionProxy = new OptionProxy(null, null);
        this.optionProxy.el = this.elRef.nativeElement;
    }
    set optionId(id) {
        this._id = id;
        this.optionProxy.id = this._id;
    }
    get optionId() {
        return this._id;
    }
    set value(value) {
        this._value = value;
        this.optionProxy.value = value;
    }
    get value() {
        return this._value;
    }
    get selected() {
        return (this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value));
    }
    ngOnInit() {
        if (!this._id) {
            this._id = 'clr-option-' + this.autoId;
            this.optionProxy.id = this._id;
        }
    }
    onClick() {
        if (this.optionSelectionService.multiselectable) {
            this.optionSelectionService.toggle(this.value);
        }
        else {
            this.optionSelectionService.select(this.value);
        }
    }
    get focusClass() {
        return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);
    }
}
ClrOption.ɵfac = function ClrOption_Factory(t) { return new (t || ClrOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrOption, selectors: [["clr-option"]], hostVars: 9, hostBindings: function ClrOption_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrOption_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "option")("tabindex", -1)("id", ctx.optionId);
        ɵngcc0.ɵɵclassProp("clr-combobox-option", true)("active", ctx.selected)("clr-focus", ctx.focusClass);
    } }, inputs: { optionId: ["id", "optionId"], value: ["clrValue", "value"] }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [["class", "clr-sr-only", 4, "ngIf"], [1, "clr-sr-only"]], template: function ClrOption_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ClrOption_span_1_Template, 2, 1, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selected);
    } }, directives: [ɵngcc4.NgIf], encapsulation: 2 });
ClrOption.ctorParameters = () => [
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ComboboxFocusHandler },
    { type: OptionSelectionService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrOption.propDecorators = {
    optionId: [{ type: Input, args: ['id',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    selected: [{ type: HostBinding, args: ['class.active',] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    focusClass: [{ type: HostBinding, args: ['class.clr-focus',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrOption, [{
        type: Component,
        args: [{
                selector: 'clr-option',
                template: `<ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only"> {{ commonStrings.keys.comboboxSelected }} </span> `,
                providers: [UNIQUE_ID_PROVIDER],
                host: {
                    '[class.clr-combobox-option]': 'true',
                    '[attr.role]': '"option"',
                    // Do not remove. Or click-selection will not work.
                    '[attr.tabindex]': '-1',
                    '[attr.id]': 'optionId'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ClrCommonStringsService }, { type: ɵngcc2.ComboboxFocusHandler }, { type: ɵngcc3.OptionSelectionService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { optionId: [{
            type: Input,
            args: ['id']
        }], value: [{
            type: Input,
            args: ['clrValue']
        }], selected: [{
            type: HostBinding,
            args: ['class.active']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], focusClass: [{
            type: HostBinding,
            args: ['class.clr-focus']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tYm9ib3gvb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUV4RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzdHLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjbEYsTUFBTSxPQUFPLFNBQVM7QUFBRyxJQStCdkIsWUFDUyxLQUFpQixFQUNqQixhQUFzQyxFQUNyQyxZQUFxQyxFQUNyQyxzQkFBaUQsRUFDOUIsTUFBYztBQUMxQyxRQUxRLFVBQUssR0FBTCxLQUFLLENBQVk7QUFBQyxRQUNsQixrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7QUFBQyxRQUN0QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTJCO0FBQUMsUUFDL0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUM3QyxRQXBDRSwwRkFBMEY7QUFDNUYsUUFBUyxnQkFBVyxHQUFtQixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkUsUUFtQ0ksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDbkQsSUFBRSxDQUFDO0FBQ0gsSUFuQ0UsSUFDSSxRQUFRLENBQUMsRUFBVTtBQUN6QixRQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksUUFBUTtBQUNkLFFBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ3BCLElBQUUsQ0FBQztBQUNILElBRUUsSUFDSSxLQUFLLENBQUMsS0FBUTtBQUNwQixRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25DLElBQUUsQ0FBQztBQUNILElBQUUsSUFBSSxLQUFLO0FBQUssUUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUNJLFFBQVE7QUFDZCxRQUFJLE9BQU8sQ0FDTCxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEgsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBV0UsUUFBUTtBQUNWLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDbkIsWUFBTSxJQUFJLENBQUMsR0FBRyxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzdDLFlBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNyQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFFRSxPQUFPO0FBQ1QsUUFBSSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxlQUFlLEVBQUU7QUFDckQsWUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyRCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckQsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsSUFDSSxVQUFVO0FBQ2hCLFFBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hFLElBQUUsQ0FBQztBQUNIO3FDQTFFQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFlBQVksa0JBQ3RCLFFBQVEsRUFBRSw4SEFDdUYsa0JBQ2pHLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGtCQUMvQixJQUFJLEVBQUU7V0FDSiw2QkFBNkIsRUFBRSxNQUFNLHNCQUNyQyxhQUFhLEVBQUUsVUFBVSxzQkFDekIsbURBQW1EO2VBQ25ELGlCQUFpQixFQUFFLElBQUksc0JBQ3ZCLFdBQVcsRUFBRSxVQUFVLG1CQUN4QjtPQUNGOzs7Ozs7Ozs7O3dEQUNJO0FBQUM7QUFBbUMsWUFuQnJCLFVBQVU7QUFBSSxZQUt6Qix1QkFBdUI7QUFBSSxZQUYzQixvQkFBb0I7QUFBSSxZQUR4QixzQkFBc0I7QUFBSSx5Q0FxRDlCLE1BQU0sU0FBQyxTQUFTO0FBQVE7QUFBRztBQUV2Qix1QkFqQ04sS0FBSyxTQUFDLElBQUk7QUFDUixvQkFTRixLQUFLLFNBQUMsVUFBVTtBQUNkLHVCQVFGLFdBQVcsU0FBQyxjQUFjO0FBQ3hCLHNCQXVCRixZQUFZLFNBQUMsT0FBTztBQUNsQix5QkFRRixXQUFXLFNBQUMsaUJBQWlCO0FBQzVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbmplY3QsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT3B0aW9uU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL29wdGlvbi1zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDb21ib2JveEZvY3VzSGFuZGxlciwgT3B0aW9uRGF0YSBhcyBPcHRpb25Qcm94eSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbWJvYm94LWZvY3VzLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBVTklRVUVfSUQsIFVOSVFVRV9JRF9QUk9WSURFUiB9IGZyb20gJy4uLy4uL3V0aWxzL2lkLWdlbmVyYXRvci9pZC1nZW5lcmF0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItb3B0aW9uJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPHNwYW4gKm5nSWY9XCJzZWxlY3RlZFwiIGNsYXNzPVwiY2xyLXNyLW9ubHlcIj4ge3sgY29tbW9uU3RyaW5ncy5rZXlzLmNvbWJvYm94U2VsZWN0ZWQgfX0gPC9zcGFuPiBgLFxuICBwcm92aWRlcnM6IFtVTklRVUVfSURfUFJPVklERVJdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItY29tYm9ib3gtb3B0aW9uXSc6ICd0cnVlJyxcbiAgICAnW2F0dHIucm9sZV0nOiAnXCJvcHRpb25cIicsXG4gICAgLy8gRG8gbm90IHJlbW92ZS4gT3IgY2xpY2stc2VsZWN0aW9uIHdpbGwgbm90IHdvcmsuXG4gICAgJ1thdHRyLnRhYmluZGV4XSc6ICctMScsXG4gICAgJ1thdHRyLmlkXSc6ICdvcHRpb25JZCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsck9wdGlvbjxUPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8vIEEgcHJveHkgd2l0aCBvbmx5IHRoZSBuZWNlc3NhcnkgZGF0YSB0byBiZSB1c2VkIGZvciBhMTF5IGFuZCB0aGUgZm9jdXMgaGFuZGxlciBzZXJ2aWNlLlxuICBwdWJsaWMgb3B0aW9uUHJveHk6IE9wdGlvblByb3h5PFQ+ID0gbmV3IE9wdGlvblByb3h5KG51bGwsIG51bGwpO1xuXG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG4gIEBJbnB1dCgnaWQnKVxuICBzZXQgb3B0aW9uSWQoaWQ6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgdGhpcy5vcHRpb25Qcm94eS5pZCA9IHRoaXMuX2lkO1xuICB9XG4gIGdldCBvcHRpb25JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBwcml2YXRlIF92YWx1ZTogVDtcbiAgQElucHV0KCdjbHJWYWx1ZScpXG4gIHNldCB2YWx1ZSh2YWx1ZTogVCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25Qcm94eS52YWx1ZSA9IHZhbHVlO1xuICB9XG4gIGdldCB2YWx1ZSgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXG4gIGdldCBzZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5vcHRpb25TZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGlvbk1vZGVsICYmIHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS5zZWxlY3Rpb25Nb2RlbC5jb250YWluc0l0ZW0odGhpcy52YWx1ZSlcbiAgICApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSxcbiAgICBwcml2YXRlIGZvY3VzSGFuZGxlcjogQ29tYm9ib3hGb2N1c0hhbmRsZXI8VD4sXG4gICAgcHJpdmF0ZSBvcHRpb25TZWxlY3Rpb25TZXJ2aWNlOiBPcHRpb25TZWxlY3Rpb25TZXJ2aWNlPFQ+LFxuICAgIEBJbmplY3QoVU5JUVVFX0lEKSBwcml2YXRlIGF1dG9JZDogc3RyaW5nXG4gICkge1xuICAgIHRoaXMub3B0aW9uUHJveHkuZWwgPSB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuX2lkKSB7XG4gICAgICB0aGlzLl9pZCA9ICdjbHItb3B0aW9uLScgKyB0aGlzLmF1dG9JZDtcbiAgICAgIHRoaXMub3B0aW9uUHJveHkuaWQgPSB0aGlzLl9pZDtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS5tdWx0aXNlbGVjdGFibGUpIHtcbiAgICAgIHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS50b2dnbGUodGhpcy52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS5zZWxlY3QodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jbHItZm9jdXMnKVxuICBnZXQgZm9jdXNDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5mb2N1c0hhbmRsZXIucHNldWRvRm9jdXMuY29udGFpbnNJdGVtKHRoaXMub3B0aW9uUHJveHkpO1xuICB9XG59XG4iXX0=