/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from '../../providers/filters';
import { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridNumericFilterImpl } from './datagrid-numeric-filter-impl';
import { ClrCommonStringsService } from '../../../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../providers/filters';
import * as ɵngcc2 from '../../../../utils/dom-adapter/dom-adapter';
import * as ɵngcc3 from '../../../../utils/i18n/common-strings.service';
import * as ɵngcc4 from '../../../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc5 from '../../datagrid-filter';
import * as ɵngcc6 from '@angular/forms';

const _c0 = ["input_low"];
export class DatagridNumericFilter extends DatagridFilterRegistrar {
    constructor(filters, domAdapter, commonStrings, popoverToggleService) {
        super(filters);
        this.domAdapter = domAdapter;
        this.commonStrings = commonStrings;
        this.popoverToggleService = popoverToggleService;
        this.subscriptions = [];
        /**
         * Indicates if the filter dropdown is open
         */
        this.open = false;
        this.filterValueChange = new EventEmitter();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => {
            sub.unsubscribe();
        });
    }
    /**
     * Customizable filter logic based on high and low values
     */
    set customNumericFilter(value) {
        if (value instanceof RegisteredFilter) {
            this.setFilter(value);
        }
        else {
            this.setFilter(new DatagridNumericFilterImpl(value));
        }
        if (this.initFilterValues) {
            this.value = this.initFilterValues;
            // This initFilterValues should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this customStringFilter property is set again
            delete this.initFilterValues;
        }
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.popoverToggleService.openChange.subscribe(openChange => {
            this.open = openChange;
            // The timeout in used because when this executes, the input isn't displayed.
            setTimeout(() => {
                this.domAdapter.focus(this.input.nativeElement);
            });
        }));
    }
    /**
     * Common setter for the input values
     */
    get value() {
        return [this.filter.low, this.filter.high];
    }
    set value(values) {
        if (this.filter) {
            if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {
                if (typeof values[0] === 'number') {
                    this.filter.low = values[0];
                }
                else {
                    this.filter.low = null;
                }
                if (typeof values[1] === 'number') {
                    this.filter.high = values[1];
                }
                else {
                    this.filter.high = null;
                }
                this.filterValueChange.emit(values);
            }
        }
        else {
            this.initFilterValues = values;
        }
    }
    get low() {
        if (typeof this.filter.low === 'number' && isFinite(this.filter.low)) {
            return this.filter.low;
        }
        else {
            // There's not a low limit
            return null;
        }
    }
    set low(low) {
        if (typeof low === 'number' && low !== this.filter.low) {
            this.filter.low = low;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
        else if (typeof low !== 'number') {
            this.filter.low = null;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
    }
    get high() {
        if (typeof this.filter.high === 'number' && isFinite(this.filter.high)) {
            return this.filter.high;
        }
        else {
            // There's not a high limit
            return null;
        }
    }
    set high(high) {
        if (typeof high === 'number' && high !== this.filter.high) {
            this.filter.high = high;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
        else if (typeof high !== 'number') {
            this.filter.high = null;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
    }
}
DatagridNumericFilter.ɵfac = function DatagridNumericFilter_Factory(t) { return new (t || DatagridNumericFilter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ClrPopoverToggleService)); };
DatagridNumericFilter.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatagridNumericFilter, selectors: [["clr-dg-numeric-filter"]], viewQuery: function DatagridNumericFilter_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(ClrDatagridFilter, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    } }, inputs: { customNumericFilter: ["clrDgNumericFilter", "customNumericFilter"], value: ["clrFilterValue", "value"] }, outputs: { filterValueChange: "clrFilterValueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CustomFilter, useExisting: DatagridNumericFilter }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 8, consts: [[3, "clrDgFilter", "clrDgFilterOpen", "clrDgFilterOpenChange"], ["type", "number", "name", "low", 1, "datagrid-numeric-filter-input", 3, "ngModel", "placeholder", "ngModelChange"], ["input_low", ""], [1, "datagrid-filter-input-spacer"], ["type", "number", "name", "high", 1, "datagrid-numeric-filter-input", 3, "ngModel", "placeholder", "ngModelChange"], ["input_high", ""]], template: function DatagridNumericFilter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "clr-dg-filter", 0);
        ɵngcc0.ɵɵlistener("clrDgFilterOpenChange", function DatagridNumericFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) { return ctx.open = $event; });
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function DatagridNumericFilter_Template_input_ngModelChange_1_listener($event) { return ctx.low = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelementStart(4, "input", 4, 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function DatagridNumericFilter_Template_input_ngModelChange_4_listener($event) { return ctx.high = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrDgFilter", ctx.registered)("clrDgFilterOpen", ctx.open);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.low)("placeholder", ctx.commonStrings.keys.minValue);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.minValue);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.high)("placeholder", ctx.commonStrings.keys.maxValue);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.maxValue);
    } }, directives: [ɵngcc5.ClrDatagridFilter, ɵngcc6.NumberValueAccessor, ɵngcc6.DefaultValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel], encapsulation: 2 });
DatagridNumericFilter.ctorParameters = () => [
    { type: FiltersProvider },
    { type: DomAdapter },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService }
];
DatagridNumericFilter.propDecorators = {
    customNumericFilter: [{ type: Input, args: ['clrDgNumericFilter',] }],
    input: [{ type: ViewChild, args: ['input_low',] }],
    filterContainer: [{ type: ViewChild, args: [ClrDatagridFilter,] }],
    value: [{ type: Input, args: ['clrFilterValue',] }],
    filterValueChange: [{ type: Output, args: ['clrFilterValueChange',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatagridNumericFilter, [{
        type: Component,
        args: [{
                selector: 'clr-dg-numeric-filter',
                providers: [{ provide: CustomFilter, useExisting: DatagridNumericFilter }],
                template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        class="datagrid-numeric-filter-input"
        #input_low
        type="number"
        name="low"
        [(ngModel)]="low"
        [placeholder]="commonStrings.keys.minValue"
        [attr.aria-label]="commonStrings.keys.minValue"
      />
      <span class="datagrid-filter-input-spacer"></span>
      <input
        class="datagrid-numeric-filter-input"
        #input_high
        type="number"
        name="high"
        [(ngModel)]="high"
        [placeholder]="commonStrings.keys.maxValue"
        [attr.aria-label]="commonStrings.keys.maxValue"
      />
    </clr-dg-filter>
  `
            }]
    }], function () { return [{ type: ɵngcc1.FiltersProvider }, { type: ɵngcc2.DomAdapter }, { type: ɵngcc3.ClrCommonStringsService }, { type: ɵngcc4.ClrPopoverToggleService }]; }, { filterValueChange: [{
            type: Output,
            args: ['clrFilterValueChange']
        }], customNumericFilter: [{
            type: Input,
            args: ['clrDgNumericFilter']
        }], value: [{
            type: Input,
            args: ['clrFilterValue']
        }], input: [{
            type: ViewChild,
            args: ['input_low']
        }], filterContainer: [{
            type: ViewChild,
            args: [ClrDatagridFilter]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,