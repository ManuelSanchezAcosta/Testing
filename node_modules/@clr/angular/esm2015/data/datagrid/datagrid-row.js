/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild, ViewContainerRef, } from '@angular/core';
import { combineLatest } from 'rxjs';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrDatagridCell } from './datagrid-cell';
import { DatagridDisplayMode } from './enums/display-mode.enum';
import { DisplayModeService } from './providers/display-mode.service';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { WrappedRow } from './wrapped-row';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/selection';
import * as ɵngcc2 from './providers/row-action-service';
import * as ɵngcc3 from './providers/global-expandable-rows';
import * as ɵngcc4 from './datagrid-if-expanded.service';
import * as ɵngcc5 from './providers/detail.service';
import * as ɵngcc6 from './providers/display-mode.service';
import * as ɵngcc7 from '../../utils/i18n/common-strings.service';
import * as ɵngcc8 from '@angular/common';
import * as ɵngcc9 from '../../forms/common/label';
import * as ɵngcc10 from '../../utils/animations/expandable-animation/expandable-animation';
import * as ɵngcc11 from '@angular/forms';
import * as ɵngcc12 from '../../forms/checkbox/checkbox';
import * as ɵngcc13 from '../../forms/radio/radio';
import * as ɵngcc14 from '../../icon/icon';
import * as ɵngcc15 from '../../progress/spinner/spinner';

const _c0 = ["detailButton"];
const _c1 = ["stickyCells"];
const _c2 = ["scrollableCells"];
const _c3 = ["calculatedCells"];
function ClrDatagridRow_label_0_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) { }
function ClrDatagridRow_label_0_clr_expandable_animation_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "clr-expandable-animation", 7);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_label_0_clr_expandable_animation_1_ng_template_1_Template, 0, 0, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵproperty("clrExpandTrigger", ctx_r8.expandAnimationTrigger);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function ClrDatagridRow_label_0_2_ng_template_0_Template(rf, ctx) { }
function ClrDatagridRow_label_0_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_label_0_2_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function ClrDatagridRow_label_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 6);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_label_0_clr_expandable_animation_1_Template, 2, 2, "clr-expandable-animation", 1);
    ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_label_0_2_Template, 1, 1, undefined, 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.expand.expandable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.expand.expandable);
} }
function ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) { }
function ClrDatagridRow_clr_expandable_animation_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "clr-expandable-animation", 7);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template, 0, 0, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵproperty("clrExpandTrigger", ctx_r1.expandAnimationTrigger);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function ClrDatagridRow_2_ng_template_0_Template(rf, ctx) { }
function ClrDatagridRow_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_2_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r5 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function ClrDatagridRow_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
const _c4 = function (a0) { return { "clr-form-control-disabled": a0 }; };
function ClrDatagridRow_ng_template_5_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "input", 20);
    ɵngcc0.ɵɵlistener("ngModelChange", function ClrDatagridRow_ng_template_5_div_4_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.toggle($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c4, !ctx_r15.clrDgSelectable));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r15.selected)("id", ctx_r15.checkboxId);
    ɵngcc0.ɵɵattribute("disabled", ctx_r15.clrDgSelectable ? null : true)("aria-disabled", ctx_r15.clrDgSelectable ? null : true)("aria-label", ctx_r15.commonStrings.keys.select);
} }
function ClrDatagridRow_ng_template_5_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "input", 21);
    ɵngcc0.ɵɵlistener("ngModelChange", function ClrDatagridRow_ng_template_5_div_5_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.selection.currentSingle = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(9, _c4, !ctx_r16.clrDgSelectable));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r16.radioId)("name", ctx_r16.selection.id + "-radio")("value", ctx_r16.item)("ngModel", ctx_r16.selection.currentSingle)("checked", ctx_r16.selection.currentSingle === ctx_r16.item);
    ɵngcc0.ɵɵattribute("disabled", ctx_r16.clrDgSelectable ? null : true)("aria-disabled", ctx_r16.clrDgSelectable ? null : true)("aria-label", ctx_r16.commonStrings.keys.select);
} }
function ClrDatagridRow_ng_template_5_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵprojection(1, 2);
    ɵngcc0.ɵɵelementEnd();
} }
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 26);
    ɵngcc0.ɵɵlistener("click", function ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r30 = ɵngcc0.ɵɵnextContext(4); return ctx_r30.toggleExpand(); });
    ɵngcc0.ɵɵelement(1, "cds-icon", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r28 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵattribute("aria-expanded", ctx_r28.expand.expanded)("aria-label", ctx_r28.expand.expanded ? ctx_r28.clrDgDetailCloseLabel : ctx_r28.clrDgDetailOpenLabel)("aria-controls", ctx_r28.expandableId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("direction", ctx_r28.expand.expanded ? "down" : "right")("title", ctx_r28.expand.expanded ? ctx_r28.commonStrings.keys.collapse : ctx_r28.commonStrings.keys.expand);
} }
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "clr-spinner", 28);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r29 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r29.commonStrings.keys.loading);
} }
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template, 2, 5, "button", 24);
    ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template, 2, 1, "clr-spinner", 25);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r27.expand.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r27.expand.loading);
} }
function ClrDatagridRow_ng_template_5_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template, 3, 2, "ng-container", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.expand.expandable);
} }
function ClrDatagridRow_ng_template_5_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelementStart(1, "button", 30, 31);
    ɵngcc0.ɵɵlistener("click", function ClrDatagridRow_ng_template_5_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r34); const _r32 = ɵngcc0.ɵɵreference(2); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.detailService.toggle(ctx_r33.item, _r32); });
    ɵngcc0.ɵɵelement(3, "cds-icon", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("is-open", ctx_r19.detailService.isRowOpen(ctx_r19.item));
    ɵngcc0.ɵɵattribute("aria-label", ctx_r19.detailService.isOpen ? ctx_r19.clrDgDetailCloseLabel : ctx_r19.clrDgDetailOpenLabel)("aria-expanded", ctx_r19.detailService.isOpen)("aria-controls", ctx_r19.detailService.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("direction", ctx_r19.detailService.isRowOpen(ctx_r19.item) ? "left" : "right")("title", ctx_r19.detailService.isRowOpen(ctx_r19.item) ? ctx_r19.commonStrings.keys.close : ctx_r19.commonStrings.keys.open);
} }
function ClrDatagridRow_ng_template_5_14_ng_template_0_Template(rf, ctx) { }
function ClrDatagridRow_ng_template_5_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_ng_template_5_14_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function ClrDatagridRow_ng_template_5_15_ng_template_0_Template(rf, ctx) { }
function ClrDatagridRow_ng_template_5_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_ng_template_5_15_ng_template_0_Template, 0, 0, "ng-template", 8);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
const _c5 = function (a0) { return { "is-replaced": a0 }; };
function ClrDatagridRow_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelementContainerStart(2, null, 11);
    ɵngcc0.ɵɵtemplate(4, ClrDatagridRow_ng_template_5_div_4_Template, 2, 8, "div", 12);
    ɵngcc0.ɵɵtemplate(5, ClrDatagridRow_ng_template_5_div_5_Template, 2, 11, "div", 12);
    ɵngcc0.ɵɵtemplate(6, ClrDatagridRow_ng_template_5_div_6_Template, 2, 0, "div", 13);
    ɵngcc0.ɵɵtemplate(7, ClrDatagridRow_ng_template_5_div_7_Template, 2, 1, "div", 14);
    ɵngcc0.ɵɵtemplate(8, ClrDatagridRow_ng_template_5_div_8_Template, 4, 7, "div", 15);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 16);
    ɵngcc0.ɵɵelementStart(10, "div", 17);
    ɵngcc0.ɵɵprojection(11, 1);
    ɵngcc0.ɵɵelementContainer(12, null, 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, ClrDatagridRow_ng_template_5_14_Template, 1, 1, undefined, 2);
    ɵngcc0.ɵɵtemplate(15, ClrDatagridRow_ng_template_5_15_Template, 1, 1, undefined, 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("datagrid-row-detail-open", ctx_r6.detailService.isRowOpen(ctx_r6.item));
    ɵngcc0.ɵɵproperty("id", ctx_r6.id);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.selection.selectionType === ctx_r6.SELECTION_TYPE.Multi);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.selection.selectionType === ctx_r6.SELECTION_TYPE.Single);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.rowActionService.hasActionableRow);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.globalExpandable.hasExpandableRow);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.detailService.enabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(11, _c5, ctx_r6.replaced && ctx_r6.expanded));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.replaced && !ctx_r6.expand.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r6.replaced && !ctx_r6.expand.loading);
} }
const _c6 = [[["clr-dg-row-detail"]], [["clr-dg-cell"]], [["clr-dg-action-overflow"]]];
const _c7 = ["clr-dg-row-detail", "clr-dg-cell", "clr-dg-action-overflow"];
let nbRow = 0;
export class ClrDatagridRow {
    constructor(selection, rowActionService, globalExpandable, expand, detailService, displayMode, vcr, renderer, el, commonStrings) {
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.globalExpandable = globalExpandable;
        this.expand = expand;
        this.detailService = detailService;
        this.displayMode = displayMode;
        this.vcr = vcr;
        this.renderer = renderer;
        this.el = el;
        this.commonStrings = commonStrings;
        /* reference to the enum so that template can access */
        this.SELECTION_TYPE = SelectionType;
        this.expandAnimationTrigger = false;
        this._selected = false;
        this.selectedChanged = new EventEmitter(false);
        this.expandedChange = new EventEmitter(false);
        this._detailOpenLabel = '';
        this._detailCloseLabel = '';
        this.subscriptions = [];
        this.displayCells = false;
        nbRow++;
        this.id = 'clr-dg-row' + nbRow;
        this.radioId = 'clr-dg-row-rd' + nbRow;
        this.checkboxId = 'clr-dg-row-cb' + nbRow;
        this.expandableId = expand.expandableId;
        this.subscriptions.push(combineLatest(this.expand.replace, this.expand.expandChange).subscribe(([expandReplaceValue, expandChangeValue]) => {
            if (expandReplaceValue && expandChangeValue) {
                // replaced and expanding
                this.replaced = true;
                this.renderer.addClass(this.el.nativeElement, 'datagrid-row-replaced');
            }
            else {
                this.replaced = false;
                // Handles these cases: not replaced and collapsing & replaced and
                // collapsing and not replaced and expanding.
                this.renderer.removeClass(this.el.nativeElement, 'datagrid-row-replaced');
            }
        }));
    }
    /**
     * Indicates if the row is selected
     */
    get selected() {
        if (this.selection.selectionType === SelectionType.None) {
            return this._selected;
        }
        else {
            return this.selection.isSelected(this.item);
        }
    }
    set selected(value) {
        if (this.selection.selectionType === SelectionType.None) {
            this._selected = value;
        }
        else {
            this.selection.setSelected(this.item, value);
        }
    }
    // By default every item is selectable; it becomes not selectable only if it's explicitly set to false
    set clrDgSelectable(value) {
        this.selection.lockItem(this.item, value === false);
    }
    get clrDgSelectable() {
        return !this.selection.isLocked(this.item);
    }
    toggle(selected = !this.selected) {
        if (selected !== this.selected) {
            this.selected = selected;
            this.selectedChanged.emit(selected);
        }
    }
    get expanded() {
        return this.expand.expanded;
    }
    set expanded(value) {
        this.expand.expanded = value;
    }
    toggleExpand() {
        if (this.expand.expandable) {
            this.expandAnimation.updateStartHeight();
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    }
    set clrDgDetailOpenLabel(label) {
        this._detailOpenLabel = label;
    }
    get clrDgDetailOpenLabel() {
        return this._detailOpenLabel ? this._detailOpenLabel : this.commonStrings.keys.open;
    }
    set clrDgDetailCloseLabel(label) {
        this._detailCloseLabel = label;
    }
    get clrDgDetailCloseLabel() {
        return this._detailCloseLabel ? this._detailCloseLabel : this.commonStrings.keys.close;
    }
    ngAfterContentInit() {
        this.dgCells.changes.subscribe(() => {
            this.dgCells.forEach(cell => {
                if (!cell._view.destroyed) {
                    this._scrollableCells.insert(cell._view);
                }
            });
        });
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.displayMode.view.subscribe(viewChange => {
            // Listen for view changes and move cells around depending on the current displayType
            // remove cell views from display view
            for (let i = this._scrollableCells.length; i > 0; i--) {
                this._scrollableCells.detach();
            }
            // remove cell views from calculated view
            for (let i = this._calculatedCells.length; i > 0; i--) {
                this._calculatedCells.detach();
            }
            if (viewChange === DatagridDisplayMode.CALCULATE) {
                this.displayCells = false;
                this.dgCells.forEach(cell => {
                    if (!cell._view.destroyed) {
                        this._calculatedCells.insert(cell._view);
                    }
                });
            }
            else {
                this.displayCells = true;
                this.dgCells.forEach(cell => {
                    if (!cell._view.destroyed) {
                        this._scrollableCells.insert(cell._view);
                    }
                });
            }
        }), this.expand.animate.subscribe(() => {
            this.expandAnimationTrigger = !this.expandAnimationTrigger;
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
    ngOnInit() {
        this.wrappedInjector = new HostWrapper(WrappedRow, this.vcr);
        this.selection.lockItem(this.item, this.clrDgSelectable === false);
    }
    get _view() {
        return this.wrappedInjector.get(WrappedRow, this.vcr).rowView;
    }
}
ClrDatagridRow.ɵfac = function ClrDatagridRow_Factory(t) { return new (t || ClrDatagridRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Selection), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RowActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DatagridIfExpandService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.DetailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.DisplayModeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ClrCommonStringsService)); };
ClrDatagridRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridRow, selectors: [["clr-dg-row"]], contentQueries: function ClrDatagridRow_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridCell, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dgCells = _t);
    } }, viewQuery: function ClrDatagridRow_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(ClrExpandableAnimation, 1);
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(_c1, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c2, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c3, 1, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.expandAnimation = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stickyCells = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._scrollableCells = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calculatedCells = _t.first);
    } }, hostAttrs: ["role", "rowgroup"], hostVars: 5, hostBindings: function ClrDatagridRow_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-owns", ctx.id);
        ɵngcc0.ɵɵclassProp("datagrid-row", true)("datagrid-selected", ctx.selected);
    } }, inputs: { selected: ["clrDgSelected", "selected"], clrDgSelectable: "clrDgSelectable", expanded: ["clrDgExpanded", "expanded"], clrDgDetailOpenLabel: "clrDgDetailOpenLabel", clrDgDetailCloseLabel: "clrDgDetailCloseLabel", item: ["clrDgItem", "item"] }, outputs: { selectedChanged: "clrDgSelectedChange", expandedChange: "clrDgExpandedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DatagridIfExpandService,
            { provide: IfExpandService, useExisting: DatagridIfExpandService },
            { provide: LoadingListener, useExisting: DatagridIfExpandService },
        ])], ngContentSelectors: _c7, decls: 9, vars: 3, consts: [["class", "datagrid-row-clickable", 4, "ngIf"], [3, "clrExpandTrigger", 4, "ngIf"], [4, "ngIf"], ["detail", ""], ["rowContent", ""], ["calculatedCells", ""], [1, "datagrid-row-clickable"], [3, "clrExpandTrigger"], [3, "ngTemplateOutlet"], ["role", "row", 1, "datagrid-row-master", "datagrid-row-flex", 3, "id"], [1, "datagrid-row-sticky"], ["stickyCells", ""], ["class", "datagrid-select datagrid-fixed-column datagrid-cell", "role", "gridcell", 3, "ngClass", 4, "ngIf"], ["class", "datagrid-row-actions datagrid-fixed-column datagrid-cell", "role", "gridcell", 4, "ngIf"], ["class", "datagrid-expandable-caret datagrid-fixed-column datagrid-cell", "role", "gridcell", 4, "ngIf"], ["class", "datagrid-detail-caret datagrid-fixed-column datagrid-cell", 4, "ngIf"], [1, "datagrid-row-scrollable", 3, "ngClass"], [1, "datagrid-scrolling-cells"], ["scrollableCells", ""], ["role", "gridcell", 1, "datagrid-select", "datagrid-fixed-column", "datagrid-cell", 3, "ngClass"], ["clrCheckbox", "", "type", "checkbox", 3, "ngModel", "id", "ngModelChange"], ["type", "radio", "clrRadio", "", 3, "id", "name", "value", "ngModel", "checked", "ngModelChange"], ["role", "gridcell", 1, "datagrid-row-actions", "datagrid-fixed-column", "datagrid-cell"], ["role", "gridcell", 1, "datagrid-expandable-caret", "datagrid-fixed-column", "datagrid-cell"], ["type", "button", "class", "datagrid-expandable-caret-button", 3, "click", 4, "ngIf"], ["clrSmall", "", 4, "ngIf"], ["type", "button", 1, "datagrid-expandable-caret-button", 3, "click"], ["shape", "angle", 1, "datagrid-expandable-caret-icon"], ["clrSmall", ""], [1, "datagrid-detail-caret", "datagrid-fixed-column", "datagrid-cell"], ["type", "button", "aria-haspopup", "dialog", 1, "datagrid-detail-caret-button", 3, "click"], ["detailButton", ""], ["shape", "angle-double", 1, "datagrid-detail-caret-icon"]], template: function ClrDatagridRow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_label_0_Template, 3, 2, "label", 0);
        ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_clr_expandable_animation_1_Template, 2, 2, "clr-expandable-animation", 1);
        ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_2_Template, 1, 1, undefined, 2);
        ɵngcc0.ɵɵtemplate(3, ClrDatagridRow_ng_template_3_Template, 1, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, ClrDatagridRow_ng_template_5_Template, 16, 13, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(7, null, 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.selection.rowSelectionMode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.selection.rowSelectionMode && ctx.expand.expandable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.selection.rowSelectionMode && !ctx.expand.expandable);
    } }, directives: [ɵngcc8.NgIf, ɵngcc9.ClrLabel, ɵngcc10.ClrExpandableAnimation, ɵngcc8.NgTemplateOutlet, ɵngcc8.NgClass, ɵngcc11.CheckboxControlValueAccessor, ɵngcc12.ClrCheckbox, ɵngcc11.NgControlStatus, ɵngcc11.NgModel, ɵngcc11.RadioControlValueAccessor, ɵngcc11.DefaultValueAccessor, ɵngcc13.ClrRadio, ɵngcc14.CdsIconCustomTag, ɵngcc15.ClrSpinner], encapsulation: 2 });
ClrDatagridRow.ctorParameters = () => [
    { type: Selection },
    { type: RowActionService },
    { type: ExpandableRowsCount },
    { type: DatagridIfExpandService },
    { type: DetailService },
    { type: DisplayModeService },
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ClrCommonStringsService }
];
ClrDatagridRow.propDecorators = {
    expandAnimation: [{ type: ViewChild, args: [ClrExpandableAnimation,] }],
    item: [{ type: Input, args: ['clrDgItem',] }],
    selected: [{ type: Input, args: ['clrDgSelected',] }],
    clrDgSelectable: [{ type: Input, args: ['clrDgSelectable',] }],
    selectedChanged: [{ type: Output, args: ['clrDgSelectedChange',] }],
    expanded: [{ type: Input, args: ['clrDgExpanded',] }],
    expandedChange: [{ type: Output, args: ['clrDgExpandedChange',] }],
    detailButton: [{ type: ViewChild, args: ['detailButton',] }],
    clrDgDetailOpenLabel: [{ type: Input }],
    clrDgDetailCloseLabel: [{ type: Input }],
    dgCells: [{ type: ContentChildren, args: [ClrDatagridCell,] }],
    _stickyCells: [{ type: ViewChild, args: ['stickyCells', { read: ViewContainerRef },] }],
    _scrollableCells: [{ type: ViewChild, args: ['scrollableCells', { read: ViewContainerRef },] }],
    _calculatedCells: [{ type: ViewChild, args: ['calculatedCells', { read: ViewContainerRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridRow, [{
        type: Component,
        args: [{
                selector: 'clr-dg-row',
                template: "<!--\n  We need to wrap the #rowContent in label element if we are in rowSelectionMode.\n  Clicking of that wrapper label will equate to clicking on the whole row, which triggers the checkbox to toggle.\n-->\n<label class=\"datagrid-row-clickable\" *ngIf=\"selection.rowSelectionMode\">\n  <clr-expandable-animation [clrExpandTrigger]=\"expandAnimationTrigger\" *ngIf=\"expand.expandable\">\n    <ng-template [ngTemplateOutlet]=\"rowContent\"></ng-template>\n  </clr-expandable-animation>\n  <ng-template [ngTemplateOutlet]=\"rowContent\" *ngIf=\"!expand.expandable\"></ng-template>\n</label>\n\n<clr-expandable-animation\n  *ngIf=\"!selection.rowSelectionMode && expand.expandable\"\n  [clrExpandTrigger]=\"expandAnimationTrigger\"\n>\n  <ng-template [ngTemplateOutlet]=\"rowContent\"></ng-template>\n</clr-expandable-animation>\n\n<ng-template *ngIf=\"!selection.rowSelectionMode && !expand.expandable\" [ngTemplateOutlet]=\"rowContent\"></ng-template>\n\n<!--\n    We need the \"project into template\" hacks because we need this in 2 different places\n    depending on whether the details replace the row or not.\n-->\n<ng-template #detail>\n  <ng-content select=\"clr-dg-row-detail\"></ng-content>\n</ng-template>\n\n<ng-template #rowContent>\n  <div\n    role=\"row\"\n    [id]=\"id\"\n    class=\"datagrid-row-master datagrid-row-flex\"\n    [class.datagrid-row-detail-open]=\"detailService.isRowOpen(item)\"\n  >\n    <div class=\"datagrid-row-sticky\">\n      <!-- Sticky elements here -->\n      <ng-container #stickyCells>\n        <div\n          *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\"\n          class=\"datagrid-select datagrid-fixed-column datagrid-cell\"\n          [ngClass]=\"{ 'clr-form-control-disabled': !clrDgSelectable }\"\n          role=\"gridcell\"\n        >\n          <input\n            clrCheckbox\n            type=\"checkbox\"\n            [ngModel]=\"selected\"\n            (ngModelChange)=\"toggle($event)\"\n            [id]=\"checkboxId\"\n            [attr.disabled]=\"clrDgSelectable ? null : true\"\n            [attr.aria-disabled]=\"clrDgSelectable ? null : true\"\n            [attr.aria-label]=\"commonStrings.keys.select\"\n          />\n        </div>\n        <div\n          *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\"\n          class=\"datagrid-select datagrid-fixed-column datagrid-cell\"\n          role=\"gridcell\"\n          [ngClass]=\"{ 'clr-form-control-disabled': !clrDgSelectable }\"\n        >\n          <!-- TODO: it would be better if in addition to the generic \"Select\" label, we could add aria-labelledby\n          to label the radio by the first cell in the row (typically an id or name).\n          It's pretty easy to label it with the whole row since we already have an id for it, but in most\n          cases the row is far too long to serve as a label, the screenreader reads every single cell content. -->\n          <input\n            type=\"radio\"\n            clrRadio\n            [id]=\"radioId\"\n            [name]=\"selection.id + '-radio'\"\n            [value]=\"item\"\n            [(ngModel)]=\"selection.currentSingle\"\n            [checked]=\"selection.currentSingle === item\"\n            [attr.disabled]=\"clrDgSelectable ? null : true\"\n            [attr.aria-disabled]=\"clrDgSelectable ? null : true\"\n            [attr.aria-label]=\"commonStrings.keys.select\"\n          />\n        </div>\n        <div\n          *ngIf=\"rowActionService.hasActionableRow\"\n          class=\"datagrid-row-actions datagrid-fixed-column datagrid-cell\"\n          role=\"gridcell\"\n        >\n          <ng-content select=\"clr-dg-action-overflow\"></ng-content>\n        </div>\n        <div\n          *ngIf=\"globalExpandable.hasExpandableRow\"\n          class=\"datagrid-expandable-caret datagrid-fixed-column datagrid-cell\"\n          role=\"gridcell\"\n        >\n          <ng-container *ngIf=\"expand.expandable\">\n            <button\n              *ngIf=\"!expand.loading\"\n              (click)=\"toggleExpand()\"\n              type=\"button\"\n              class=\"datagrid-expandable-caret-button\"\n              [attr.aria-expanded]=\"expand.expanded\"\n              [attr.aria-label]=\"expand.expanded ? clrDgDetailCloseLabel : clrDgDetailOpenLabel\"\n              [attr.aria-controls]=\"expandableId\"\n            >\n              <cds-icon\n                shape=\"angle\"\n                class=\"datagrid-expandable-caret-icon\"\n                [attr.direction]=\"expand.expanded ? 'down' : 'right'\"\n                [attr.title]=\"expand.expanded ? commonStrings.keys.collapse : commonStrings.keys.expand\"\n              ></cds-icon>\n            </button>\n            <clr-spinner *ngIf=\"expand.loading\" clrSmall>{{ commonStrings.keys.loading }}</clr-spinner>\n          </ng-container>\n        </div>\n        <div *ngIf=\"detailService.enabled\" class=\"datagrid-detail-caret datagrid-fixed-column datagrid-cell\">\n          <button\n            (click)=\"detailService.toggle(item, detailButton)\"\n            type=\"button\"\n            #detailButton\n            class=\"datagrid-detail-caret-button\"\n            [class.is-open]=\"detailService.isRowOpen(item)\"\n            [attr.aria-label]=\"detailService.isOpen ? clrDgDetailCloseLabel : clrDgDetailOpenLabel\"\n            [attr.aria-expanded]=\"detailService.isOpen\"\n            [attr.aria-controls]=\"detailService.id\"\n            aria-haspopup=\"dialog\"\n          >\n            <cds-icon\n              shape=\"angle-double\"\n              [attr.direction]=\"detailService.isRowOpen(item) ? 'left' : 'right'\"\n              class=\"datagrid-detail-caret-icon\"\n              [attr.title]=\"detailService.isRowOpen(item) ? commonStrings.keys.close: commonStrings.keys.open\"\n            ></cds-icon>\n          </button>\n        </div>\n      </ng-container>\n      <!-- placeholder for projecting other sticky cells as pinned-->\n    </div>\n    <div class=\"datagrid-row-scrollable\" [ngClass]=\"{'is-replaced': replaced && expanded}\">\n      <div class=\"datagrid-scrolling-cells\">\n        <ng-content select=\"clr-dg-cell\"></ng-content>\n        <ng-container #scrollableCells></ng-container>\n      </div>\n      <!-- details here when replace, re-visit when sticky container is used for pinned cells -->\n      <ng-template *ngIf=\"replaced && !expand.loading\" [ngTemplateOutlet]=\"detail\"></ng-template>\n      <ng-template *ngIf=\"!replaced && !expand.loading\" [ngTemplateOutlet]=\"detail\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container #calculatedCells></ng-container>\n",
                host: {
                    '[class.datagrid-row]': 'true',
                    '[class.datagrid-selected]': 'selected',
                    '[attr.aria-owns]': 'id',
                    role: 'rowgroup'
                },
                providers: [
                    DatagridIfExpandService,
                    { provide: IfExpandService, useExisting: DatagridIfExpandService },
                    { provide: LoadingListener, useExisting: DatagridIfExpandService },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.Selection }, { type: ɵngcc2.RowActionService }, { type: ɵngcc3.ExpandableRowsCount }, { type: ɵngcc4.DatagridIfExpandService }, { type: ɵngcc5.DetailService }, { type: ɵngcc6.DisplayModeService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc7.ClrCommonStringsService }]; }, { selectedChanged: [{
            type: Output,
            args: ['clrDgSelectedChange']
        }], expandedChange: [{
            type: Output,
            args: ['clrDgExpandedChange']
        }], selected: [{
            type: Input,
            args: ['clrDgSelected']
        }], clrDgSelectable: [{
            type: Input,
            args: ['clrDgSelectable']
        }], expanded: [{
            type: Input,
            args: ['clrDgExpanded']
        }], clrDgDetailOpenLabel: [{
            type: Input
        }], clrDgDetailCloseLabel: [{
            type: Input
        }], expandAnimation: [{
            type: ViewChild,
            args: [ClrExpandableAnimation]
        }], item: [{
            type: Input,
            args: ['clrDgItem']
        }], detailButton: [{
            type: ViewChild,
            args: ['detailButton']
        }], dgCells: [{
            type: ContentChildren,
            args: [ClrDatagridCell]
        }], _stickyCells: [{
            type: ViewChild,
            args: ['stickyCells', { read: ViewContainerRef }]
        }], _scrollableCells: [{
            type: ViewChild,
            args: ['scrollableCells', { read: ViewContainerRef }]
        }], _calculatedCells: [{
            type: ViewChild,
            args: ['calculatedCells', { read: ViewContainerRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,