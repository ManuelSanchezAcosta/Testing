(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-countdown-timer', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (factory(global.ng.core,global.ng.common,(global['ng2-countdown-timer'] = {}),global.ng.core,global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,common) { 
function CountdownComponent_div_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.divider, " ");
} }
function CountdownComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "p", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, CountdownComponent_div_1_span_3_Template, 2, 1, "span", 3);
    ɵngcc0.ɵɵelementStart(4, "p", 4);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var time_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("measurements ", time_r1, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.showZero && ctx_r0.displayNumbers[i_r2] < 10 ? "0" + ctx_r0.displayNumbers[i_r2].trim() : ctx_r0.displayNumbers[i_r2], " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.display[i_r2 + 1]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", time_r1, " ");
} }
var _c0 = ["*"];
'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CountdownComponent = (function () {
        function CountdownComponent() {
            var _this = this;
            this.displayString = '';
            this.showZero = false;
            this.reached = new core.EventEmitter();
            this.display = [];
            this.displayNumbers = [];
            this.wasReached = false;
            setInterval(function () { return _this._displayString(); }, 100);
        }
        /**
         * @return {?}
         */
        CountdownComponent.prototype._displayString = /**
         * @return {?}
         */
            function () {
                if (this.wasReached)
                    return;
                if (typeof this.units === 'string') {
                    this.units = this.units.split('|');
                }
                /** @type {?} */
                var givenDate = new Date(this.end);
                /** @type {?} */
                var now = new Date();
                /** @type {?} */
                var dateDifference = givenDate - now;
                if ((dateDifference < 100 && dateDifference > 0) || dateDifference < 0 && !this.wasReached) {
                    this.wasReached = true;
                    this.reached.next(now);
                }
                /** @type {?} */
                var lastUnit = this.units[this.units.length - 1];
                /** @type {?} */
                var unitConstantForMillisecs = {
                    year: (((1000 * 60 * 60 * 24 * 7) * 4) * 12),
                    month: ((1000 * 60 * 60 * 24 * 7) * 4),
                    weeks: (1000 * 60 * 60 * 24 * 7),
                    days: (1000 * 60 * 60 * 24),
                    hours: (1000 * 60 * 60),
                    minutes: (1000 * 60),
                    seconds: 1000
                };
                /** @type {?} */
                var unitsLeft = {};
                /** @type {?} */
                var returnText = '';
                /** @type {?} */
                var returnNumbers = '';
                /** @type {?} */
                var totalMillisecsLeft = dateDifference;
                /** @type {?} */
                var i;
                /** @type {?} */
                var unit;
                for (i in this.units) {
                    if (this.units.hasOwnProperty(i)) {
                        unit = this.units[i].trim();
                        if (unitConstantForMillisecs[unit.toLowerCase()] === false) {
                            //$interval.cancel(countDownInterval);
                            throw new Error('Cannot repeat unit: ' + unit);
                        }
                        if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {
                            throw new Error('Unit: ' + unit + ' is not supported. Please use following units: year, month, weeks, days, hours, minutes, seconds, milliseconds');
                        }
                        // If it was reached, everything is zero
                        unitsLeft[unit] = (this.wasReached) ? 0 : totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];
                        if (lastUnit === unit) {
                            unitsLeft[unit] = Math.ceil(unitsLeft[unit]);
                        }
                        else {
                            unitsLeft[unit] = Math.floor(unitsLeft[unit]);
                        }
                        totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];
                        unitConstantForMillisecs[unit.toLowerCase()] = false;
                        // If it's less than 0, round to 0
                        unitsLeft[unit] = (unitsLeft[unit] > 0) ? unitsLeft[unit] : 0;
                        returnNumbers += ' ' + unitsLeft[unit] + ' | ';
                        returnText += ' ' + unit;
                    }
                }
                if (this.text === null || !this.text) {
                    this.text = {
                        Year: 'Year',
                        Month: 'Month',
                        Weeks: 'Weeks',
                        Days: 'Days',
                        Hours: 'Hours',
                        Minutes: 'Minutes',
                        Seconds: 'Seconds',
                        MilliSeconds: 'Milliseconds'
                    };
                }
                this.displayString = returnText
                    .replace('Year', this.text.Year + ' | ')
                    .replace('Month', this.text.Month + ' | ')
                    .replace('Weeks', this.text.Weeks + ' | ')
                    .replace('Days', this.text.Days + ' | ')
                    .replace('Hours', this.text.Hours + ' | ')
                    .replace('Minutes', this.text.Minutes + ' | ')
                    .replace('Seconds', this.text.Seconds);
                this.displayNumbers = returnNumbers.split('|');
                this.display = this.displayString.split('|');
            };
        /** @nocollapse */
        CountdownComponent.ctorParameters = function () { return []; };
        CountdownComponent.propDecorators = {
            units: [{ type: core.Input }],
            end: [{ type: core.Input }],
            displayString: [{ type: core.Input }],
            text: [{ type: core.Input }],
            divider: [{ type: core.Input }],
            showZero: [{ type: core.Input }],
            reached: [{ type: core.Output }]
        };
CountdownComponent.ɵfac = function CountdownComponent_Factory(t) { return new (t || CountdownComponent)(); };
CountdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountdownComponent, selectors: [["countdown"]], inputs: { displayString: "displayString", showZero: "showZero", units: "units", text: "text", end: "end", divider: "divider" }, outputs: { reached: "reached" }, ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[1, "countdown"], [3, "class", 4, "ngFor", "ngForOf"], [1, "measurements-number"], ["class", "divider", 4, "ngIf"], [1, "measurements-text"], [1, "divider"]], template: function CountdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, CountdownComponent_div_1_Template, 6, 6, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.display);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf], styles: [".countdown[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]{flex:.1}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{float:right}"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountdownComponent, [{
        type: core.Component,
        args: [{
                selector: 'countdown',
                template: "<div class=\"countdown\">\n  <div *ngFor=\"let time of display; let i = index\" class=\"measurements {{time}}\">\n    <p class=\"measurements-number\">\n      {{ (showZero && displayNumbers[i] < 10) ? '0' + displayNumbers[i].trim() : displayNumbers[i]}}\n    </p>\n    <span *ngIf=\"display[i+1]\" class=\"divider\"> {{divider}} </span>\n    <p class=\"measurements-text\">\n      {{time}}\n    </p>\n  </div>\n</div>\n<ng-content></ng-content>",
                styles: [".countdown{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif}.countdown .measurements{flex:.1}.countdown .measurements .divider{float:right}"]
            }]
    }], function () { return []; }, { displayString: [{
            type: core.Input
        }], showZero: [{
            type: core.Input
        }], reached: [{
            type: core.Output
        }], units: [{
            type: core.Input
        }], text: [{
            type: core.Input
        }], end: [{
            type: core.Input
        }], divider: [{
            type: core.Input
        }] }); })();
        return CountdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CountdownModule = (function () {
        function CountdownModule() {
        }
CountdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CountdownModule });
CountdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CountdownModule_Factory(t) { return new (t || CountdownModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountdownModule, { declarations: [CountdownComponent], imports: [ɵngcc1.CommonModule], exports: [CountdownComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountdownModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [
                    CountdownComponent
                ],
                exports: [
                    CountdownComponent,
                ]
            }]
    }], function () { return []; }, null); })();
        return CountdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CountdownComponent = CountdownComponent;
    exports.CountdownModule = CountdownModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLWNvdW50ZG93bi10aW1lci51bWQuanMiLCJzb3VyY2VzIjpbIm5nMi1jb3VudGRvd24tdGltZXIvbGliL2NvdW50ZG93bi9jb3VudGRvd24uY29tcG9uZW50LnRzIiwibmcyLWNvdW50ZG93bi10aW1lci9saWIvY291bnRkb3duLm1vZHVsZS50cyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJDb21wb25lbnQiLCJJbnB1dCIsIk91dHB1dCIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBNkMsUUErQjNDO0FBQ2MsWUFEZCxpQkFFQztBQUNILGlDQVptQyxFQUFFO0FBQ3JDLDRCQUUrQixLQUFLO0FBQ3BDLDJCQUEwQyxJQUFJQSxpQkFBWSxFQUFFO0FBQzVELDJCQUFpQixFQUFFO0FBQ25CLGtDQUF3QixFQUFFO0FBQzFCLDhCQUF3QixLQUFLO0FBQzdCLFlBRUksV0FBVyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsY0FBYyxFQUFFLEdBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsRCxTQUFHO0FBQ0g7QUFDVztBQUNFO0FBQ2IsUUFGRSwyQ0FBYztBQUNkO0FBQ0Y7QUFBYSxZQUZYO0FBQWUsZ0JBQ2IsSUFBSSxJQUFJLENBQUMsVUFBVTtBQUN2QixvQkFBTSxPQUFPO0FBQ2IsZ0JBQ0ksSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO0FBQ3hDLG9CQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsaUJBQUs7QUFDTDtBQUNnQyxnQkFBNUIsSUFBSSxTQUFTLEdBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVDO0FBQ0UsZ0JBREUsSUFBSSxHQUFHLEdBQVEsSUFBSSxJQUFJLEVBQUUs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QUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFlQSxBQWZBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQU1BLEFBZkEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBZkEsQUFXQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBZkEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBZkEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBZkEsQUFjQSxBQUFBLEFBQ0EsQUFmQSxBQWVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBNUhBQyxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQVdBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQUMsQUFBQSxBQUNBQSxBQUFBLEFBQ0FBLEFBQUEsQUFDQUEsQUFBQSxBQUNBQSxBQUFBLEFBQ0FBLEFBQUEsQUFDQUMsQUFBQSxBQTFCQSxBQ0FBLEFBSUFDLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBQyxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQVpBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY291bnRkb3duJyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJjb3VudGRvd25cIj5cclxuICA8ZGl2ICpuZ0Zvcj1cImxldCB0aW1lIG9mIGRpc3BsYXk7IGxldCBpID0gaW5kZXhcIiBjbGFzcz1cIm1lYXN1cmVtZW50cyB7e3RpbWV9fVwiPlxyXG4gICAgPHAgY2xhc3M9XCJtZWFzdXJlbWVudHMtbnVtYmVyXCI+XHJcbiAgICAgIHt7IChzaG93WmVybyAmJiBkaXNwbGF5TnVtYmVyc1tpXSA8IDEwKSA/ICcwJyArIGRpc3BsYXlOdW1iZXJzW2ldLnRyaW0oKSA6IGRpc3BsYXlOdW1iZXJzW2ldfX1cclxuICAgIDwvcD5cclxuICAgIDxzcGFuICpuZ0lmPVwiZGlzcGxheVtpKzFdXCIgY2xhc3M9XCJkaXZpZGVyXCI+IHt7ZGl2aWRlcn19IDwvc3Bhbj5cclxuICAgIDxwIGNsYXNzPVwibWVhc3VyZW1lbnRzLXRleHRcIj5cclxuICAgICAge3t0aW1lfX1cclxuICAgIDwvcD5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbjxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxyXG4gIHN0eWxlczogW2AuY291bnRkb3due2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjtmb250LWZhbWlseTpcIkhlbHZldGljYSBOZXVlXCIsSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZ9LmNvdW50ZG93biAubWVhc3VyZW1lbnRze2ZsZXg6LjF9LmNvdW50ZG93biAubWVhc3VyZW1lbnRzIC5kaXZpZGVye2Zsb2F0OnJpZ2h0fWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb3VudGRvd25Db21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSB1bml0czogYW55O1xyXG4gIEBJbnB1dCgpIGVuZDogYW55O1xyXG4gIEBJbnB1dCgpIGRpc3BsYXlTdHJpbmc6IFN0cmluZyA9ICcnO1xyXG4gIEBJbnB1dCgpIHRleHQ6IGFueTtcclxuICBASW5wdXQoKSBkaXZpZGVyOiBhbnk7XHJcbiAgQElucHV0KCkgc2hvd1plcm86IEJvb2xlYW4gPSBmYWxzZTtcclxuICBAT3V0cHV0KCkgcmVhY2hlZDogRXZlbnRFbWl0dGVyPERhdGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIGRpc3BsYXk6IGFueSA9IFtdO1xyXG4gIGRpc3BsYXlOdW1iZXJzOiBhbnkgPSBbXTtcclxuICB3YXNSZWFjaGVkOiBCb29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5fZGlzcGxheVN0cmluZygpLCAxMDApO1xyXG4gIH1cclxuXHJcbiAgX2Rpc3BsYXlTdHJpbmcoKSB7XHJcbiAgICBpZiAodGhpcy53YXNSZWFjaGVkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnVuaXRzID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnVuaXRzID0gdGhpcy51bml0cy5zcGxpdCgnfCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBnaXZlbkRhdGU6IGFueSA9IG5ldyBEYXRlKHRoaXMuZW5kKTtcclxuICAgIGxldCBub3c6IGFueSA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgZGF0ZURpZmZlcmVuY2U6IGFueSA9IGdpdmVuRGF0ZSAtIG5vdztcclxuXHJcbiAgICBpZiAoKGRhdGVEaWZmZXJlbmNlIDwgMTAwICYmIGRhdGVEaWZmZXJlbmNlID4gMCkgfHwgZGF0ZURpZmZlcmVuY2UgPCAwICYmICF0aGlzLndhc1JlYWNoZWQpIHtcclxuICAgICAgdGhpcy53YXNSZWFjaGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy5yZWFjaGVkLm5leHQobm93KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbGFzdFVuaXQgPSB0aGlzLnVuaXRzW3RoaXMudW5pdHMubGVuZ3RoIC0gMV0sXHJcbiAgICAgIHVuaXRDb25zdGFudEZvck1pbGxpc2VjcyA9IHtcclxuICAgICAgICB5ZWFyOiAoKCgxMDAwICogNjAgKiA2MCAqIDI0ICogNykgKiA0KSAqIDEyKSxcclxuICAgICAgICBtb250aDogKCgxMDAwICogNjAgKiA2MCAqIDI0ICogNykgKiA0KSxcclxuICAgICAgICB3ZWVrczogKDEwMDAgKiA2MCAqIDYwICogMjQgKiA3KSxcclxuICAgICAgICBkYXlzOiAoMTAwMCAqIDYwICogNjAgKiAyNCksXHJcbiAgICAgICAgaG91cnM6ICgxMDAwICogNjAgKiA2MCksXHJcbiAgICAgICAgbWludXRlczogKDEwMDAgKiA2MCksXHJcbiAgICAgICAgc2Vjb25kczogMTAwMFxyXG4gICAgICB9LFxyXG4gICAgICB1bml0c0xlZnQgPSB7fSxcclxuICAgICAgcmV0dXJuVGV4dCA9ICcnLFxyXG4gICAgICByZXR1cm5OdW1iZXJzID0gJycsXHJcbiAgICAgIHRvdGFsTWlsbGlzZWNzTGVmdCA9IGRhdGVEaWZmZXJlbmNlLFxyXG4gICAgICBpLFxyXG4gICAgICB1bml0OiBhbnk7XHJcblxyXG4gICAgZm9yIChpIGluIHRoaXMudW5pdHMpIHtcclxuICAgICAgaWYgKHRoaXMudW5pdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuXHJcbiAgICAgICAgdW5pdCA9IHRoaXMudW5pdHNbaV0udHJpbSgpO1xyXG4gICAgICAgIGlmICh1bml0Q29uc3RhbnRGb3JNaWxsaXNlY3NbdW5pdC50b0xvd2VyQ2FzZSgpXSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIC8vJGludGVydmFsLmNhbmNlbChjb3VudERvd25JbnRlcnZhbCk7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXBlYXQgdW5pdDogJyArIHVuaXQpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaXRDb25zdGFudEZvck1pbGxpc2Vjcy5oYXNPd25Qcm9wZXJ0eSh1bml0LnRvTG93ZXJDYXNlKCkpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbml0OiAnICsgdW5pdCArICcgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBmb2xsb3dpbmcgdW5pdHM6IHllYXIsIG1vbnRoLCB3ZWVrcywgZGF5cywgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgaXQgd2FzIHJlYWNoZWQsIGV2ZXJ5dGhpbmcgaXMgemVyb1xyXG4gICAgICAgIHVuaXRzTGVmdFt1bml0XSA9ICh0aGlzLndhc1JlYWNoZWQpID8gMCA6IHRvdGFsTWlsbGlzZWNzTGVmdCAvIHVuaXRDb25zdGFudEZvck1pbGxpc2Vjc1t1bml0LnRvTG93ZXJDYXNlKCldO1xyXG5cclxuICAgICAgICBpZiAobGFzdFVuaXQgPT09IHVuaXQpIHtcclxuICAgICAgICAgIHVuaXRzTGVmdFt1bml0XSA9IE1hdGguY2VpbCh1bml0c0xlZnRbdW5pdF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB1bml0c0xlZnRbdW5pdF0gPSBNYXRoLmZsb29yKHVuaXRzTGVmdFt1bml0XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0b3RhbE1pbGxpc2Vjc0xlZnQgLT0gdW5pdHNMZWZ0W3VuaXRdICogdW5pdENvbnN0YW50Rm9yTWlsbGlzZWNzW3VuaXQudG9Mb3dlckNhc2UoKV07XHJcbiAgICAgICAgdW5pdENvbnN0YW50Rm9yTWlsbGlzZWNzW3VuaXQudG9Mb3dlckNhc2UoKV0gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gSWYgaXQncyBsZXNzIHRoYW4gMCwgcm91bmQgdG8gMFxyXG4gICAgICAgIHVuaXRzTGVmdFt1bml0XSA9ICh1bml0c0xlZnRbdW5pdF0gPiAwKSA/IHVuaXRzTGVmdFt1bml0XSA6IDA7XHJcblxyXG4gICAgICAgIHJldHVybk51bWJlcnMgKz0gJyAnICsgdW5pdHNMZWZ0W3VuaXRdICsgJyB8ICc7XHJcbiAgICAgICAgcmV0dXJuVGV4dCArPSAnICcgKyB1bml0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudGV4dCA9PT0gbnVsbCB8fCAhdGhpcy50ZXh0KSB7XHJcbiAgICAgIHRoaXMudGV4dCA9IHtcclxuICAgICAgICBZZWFyOiAnWWVhcicsXHJcbiAgICAgICAgTW9udGg6ICdNb250aCcsXHJcbiAgICAgICAgV2Vla3M6ICdXZWVrcycsXHJcbiAgICAgICAgRGF5czogJ0RheXMnLFxyXG4gICAgICAgIEhvdXJzOiAnSG91cnMnLFxyXG4gICAgICAgIE1pbnV0ZXM6ICdNaW51dGVzJyxcclxuICAgICAgICBTZWNvbmRzOiAnU2Vjb25kcycsXHJcbiAgICAgICAgTWlsbGlTZWNvbmRzOiAnTWlsbGlzZWNvbmRzJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGlzcGxheVN0cmluZyA9IHJldHVyblRleHRcclxuICAgICAgLnJlcGxhY2UoJ1llYXInLCB0aGlzLnRleHQuWWVhciArICcgfCAnKVxyXG4gICAgICAucmVwbGFjZSgnTW9udGgnLCB0aGlzLnRleHQuTW9udGggKyAnIHwgJylcclxuICAgICAgLnJlcGxhY2UoJ1dlZWtzJywgdGhpcy50ZXh0LldlZWtzICsgJyB8ICcpXHJcbiAgICAgIC5yZXBsYWNlKCdEYXlzJywgdGhpcy50ZXh0LkRheXMgKyAnIHwgJylcclxuICAgICAgLnJlcGxhY2UoJ0hvdXJzJywgdGhpcy50ZXh0LkhvdXJzICsgJyB8ICcpXHJcbiAgICAgIC5yZXBsYWNlKCdNaW51dGVzJywgdGhpcy50ZXh0Lk1pbnV0ZXMgKyAnIHwgJylcclxuICAgICAgLnJlcGxhY2UoJ1NlY29uZHMnLCB0aGlzLnRleHQuU2Vjb25kcyk7XHJcblxyXG4gICAgdGhpcy5kaXNwbGF5TnVtYmVycyA9IHJldHVybk51bWJlcnMuc3BsaXQoJ3wnKTtcclxuICAgIHRoaXMuZGlzcGxheSA9IHRoaXMuZGlzcGxheVN0cmluZy5zcGxpdCgnfCcpO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJzsgIFxyXG5pbXBvcnQgeyBDb3VudGRvd25Db21wb25lbnQgfSBmcm9tICcuL2NvdW50ZG93bi9jb3VudGRvd24uY29tcG9uZW50JztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBDb3VudGRvd25Db21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIENvdW50ZG93bkNvbXBvbmVudCxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb3VudGRvd25Nb2R1bGUgeyB9XHJcbiJdfQ==