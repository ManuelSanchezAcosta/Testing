/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Renderer2, ElementRef, Output, EventEmitter, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var clickElements = new Set();
var ClickDirective = /** @class */ (function () {
    function ClickDirective(renderer, elm, document) {
        this.renderer = renderer;
        this.elm = elm;
        this.document = document;
        this.click = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.setAttribute(this.elm.nativeElement, 'data-calendar-clickable', 'true');
        clickElements.add(this.elm.nativeElement);
        /** @type {?} */
        var eventName = typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'
            ? 'tap'
            : 'click';
        this.removeListener = this.renderer.listen(this.elm.nativeElement, eventName, function (event) {
            /** @type {?} */
            var nearestClickableParent = event.target;
            while (!clickElements.has(nearestClickableParent) &&
                nearestClickableParent !== _this.document.body) {
                nearestClickableParent = nearestClickableParent.parentElement;
            }
            /** @type {?} */
            var isThisClickableElement = _this.elm.nativeElement === nearestClickableParent;
            if (isThisClickableElement) {
                _this.click.next(event);
            }
        });
    };
    /**
     * @return {?}
     */
    ClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListener();
        clickElements.delete(this.elm.nativeElement);
    };
    /** @nocollapse */
    ClickDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    ClickDirective.propDecorators = {
        click: [{ type: Output, args: ['mwlClick',] }]
    };
ClickDirective.ɵfac = function ClickDirective_Factory(t) { return new (t || ClickDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ClickDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClickDirective, selectors: [["", "mwlClick", ""]], outputs: { click: "mwlClick" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClickDirective, [{
        type: Directive,
        args: [{
                selector: '[mwlClick]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { click: [{
            type: Output,
            args: ['mwlClick']
        }] }); })();
    return ClickDirective;
}());
export { ClickDirective };
if (false) {
    /** @type {?} */
    ClickDirective.prototype.click;
    /** @type {?} */
    ClickDirective.prototype.removeListener;
    /** @type {?} */
    ClickDirective.prototype.renderer;
    /** @type {?} */
    ClickDirective.prototype.elm;
    /** @type {?} */
    ClickDirective.prototype.document;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWNhbGVuZGFyL21vZHVsZXMvY29tbW9uL2NsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUdWLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxFQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQzs7QUFDQSxJQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFDO0FBQzdDO0FBSVEsSUFLTix3QkFDVSxVQUNBLEtBQ2tCLFFBQVE7QUFDbkMsUUFIUyxhQUFRLEdBQVIsUUFBUTtBQUFFLFFBQ1YsUUFBRyxHQUFILEdBQUc7QUFBRSxRQUNhLGFBQVEsR0FBUixRQUFRLENBQUE7QUFDdEMscUJBUjhCLElBQUksWUFBWSxFQUFjO0FBQUUsS0FReEQ7QUFDTjtBQUNPO0FBQ0Y7QUFBUSxJQURYLGlDQUFRO0FBQU87QUFDRjtBQUFRLElBRHJCO0FBQWMsUUFBZCxpQkE4QkM7QUFDSCxRQTlCSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQ3RCLHlCQUF5QixFQUN6QixNQUFNLENBQ1AsQ0FBQztBQUNOLFFBQUksYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzlDO0FBQXlCLFFBQXJCLElBQU0sU0FBUyxHQUNiLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXO0FBQzlFLFlBQVEsQ0FBQyxDQUFDLEtBQUs7QUFDZixZQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDbEIsUUFBSSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFDdEIsU0FBUyxFQUNULFVBQUEsS0FBSztBQUFJO0FBQ1ksWUFDbkIsSUFBSSxzQkFBc0IsR0FBZ0IsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxZQUFRLE9BQ0UsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDO0FBQ3BELGdCQUFVLHNCQUFzQixLQUFLLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUM3QztBQUNWLGdCQUFVLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDLGFBQWEsQ0FBQztBQUN4RSxhQUFTO0FBQ1Q7QUFBNkIsWUFBckIsSUFBTSxzQkFBc0IsR0FDMUIsS0FBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEtBQUssc0JBQXNCLENBQUM7QUFDNUQsWUFBUSxJQUFJLHNCQUFzQixFQUFFO0FBQ3BDLGdCQUFVLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pDLGFBQVM7QUFDVCxTQUFPLENBQ0YsQ0FBQztBQUNOLEtBQUc7QUFFSDtBQUFRO0FBQ0w7QUFBUSxJQURULG9DQUFXO0FBQU87QUFDTDtBQUFRLElBRHJCO0FBQWMsUUFDWixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDMUIsUUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDakQsS0FBRyxDQTlDTTtBQUFDOzJCQUhULFNBQVMsU0FBQyw3Q0FHc0I7UUFGL0IsUUFBUSxFQUFFLGxCQUdxQixnQkFoQi9CLFNBQVM7Q0FhYSxrQkFDdkIsbkJBYkMsZ0JBQUEsVUFBVTtBQUNWLGdEQXFCRyxNQUFNLFNBQUMsUUFBUTtBQUFRO0FBQVU7QUFJOUIsd0JBWEwsTUFBTSxTQUFDLFVBQVU7QUFBTTs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFBQyx5QkFsQmpDO0FBQUU7QUFBTSxTQWlCSyxjQUFjO0FBQUk7QUFBYTtBQUN0QztBQUFvQztBQUFxQjtBQUV6QztBQUVsQjtBQUN3QjtBQUNaO0FBQ1I7QUFBcUI7QUFJN0I7O0FBN0JBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBOEJBLEFBN0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBakRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFkQSxBQUFBLEFBQ0EsQUFBQSxBQXNCQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUFBLEFBbEJBLEFBaUJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIFJlbmRlcmVyMixcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmNvbnN0IGNsaWNrRWxlbWVudHMgPSBuZXcgU2V0PEhUTUxFbGVtZW50PigpO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbXdsQ2xpY2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQE91dHB1dCgnbXdsQ2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWxtOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50XG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShcbiAgICAgIHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAnZGF0YS1jYWxlbmRhci1jbGlja2FibGUnLFxuICAgICAgJ3RydWUnXG4gICAgKTtcbiAgICBjbGlja0VsZW1lbnRzLmFkZCh0aGlzLmVsbS5uYXRpdmVFbGVtZW50KTtcbiAgICBjb25zdCBldmVudE5hbWU6IHN0cmluZyA9XG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93WydIYW1tZXInXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyAndGFwJ1xuICAgICAgICA6ICdjbGljayc7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKFxuICAgICAgdGhpcy5lbG0ubmF0aXZlRWxlbWVudCxcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgLy8gcHJldmVudCBjaGlsZCBjbGljayBldmVudHMgZnJvbSBmaXJpbmcgb24gcGFyZW50IGVsZW1lbnRzIHRoYXQgYWxzbyBoYXZlIGNsaWNrIGV2ZW50c1xuICAgICAgICBsZXQgbmVhcmVzdENsaWNrYWJsZVBhcmVudDogSFRNTEVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAhY2xpY2tFbGVtZW50cy5oYXMobmVhcmVzdENsaWNrYWJsZVBhcmVudCkgJiZcbiAgICAgICAgICBuZWFyZXN0Q2xpY2thYmxlUGFyZW50ICE9PSB0aGlzLmRvY3VtZW50LmJvZHlcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmVhcmVzdENsaWNrYWJsZVBhcmVudCA9IG5lYXJlc3RDbGlja2FibGVQYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1RoaXNDbGlja2FibGVFbGVtZW50ID1cbiAgICAgICAgICB0aGlzLmVsbS5uYXRpdmVFbGVtZW50ID09PSBuZWFyZXN0Q2xpY2thYmxlUGFyZW50O1xuICAgICAgICBpZiAoaXNUaGlzQ2xpY2thYmxlRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuY2xpY2submV4dChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigpO1xuICAgIGNsaWNrRWxlbWVudHMuZGVsZXRlKHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG59XG4iXX0=