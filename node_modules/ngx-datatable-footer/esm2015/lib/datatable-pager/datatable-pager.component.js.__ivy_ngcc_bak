/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { fromEvent } from 'rxjs';
export class DatatablePagerComponent {
    constructor() {
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.change = new EventEmitter();
        this.pageChange = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this._page = 1;
        // tslint:disable-next-line:member-ordering
        this._count = 0;
        // tslint:disable-next-line:member-ordering
        this._size = 0;
        // tslint:disable-next-line:member-ordering
        this.pageSizeColumn = true;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set size(val) {
        this._size = val;
        this.pages = this.calcPages();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set count(val) {
        this._count = val;
        this.pages = this.calcPages();
    }
    /**
     * @return {?}
     */
    get count() {
        return this._count;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set page(val) {
        this._page = val;
        this.pages = this.calcPages();
    }
    /**
     * @return {?}
     */
    get page() {
        return this._page || 1;
    }
    /**
     * @return {?}
     */
    get totalPages() {
        /** @type {?} */
        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
        return Math.max(count || 0, 1);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputEvent = fromEvent(this.customerInput.nativeElement, 'input')
            .pipe(debounceTime(500))
            .subscribe((event) => {
            /** @type {?} */
            let value;
            if (event.target.value) {
                value = Number(event.target.value);
                if (value < 1) {
                    value = 1;
                    this.customerInput.nativeElement.value = 1;
                }
                this.selectPage(Math.round(value));
            }
        });
    }
    /**
     * @return {?}
     */
    canPrevious() {
        return this.page > 1;
    }
    /**
     * @return {?}
     */
    canNext() {
        return this.page < this.totalPages;
    }
    /**
     * @return {?}
     */
    prevPage() {
        this.selectPage(this.page - 1);
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.selectPage(this.page + 1);
    }
    /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    selectPage(page, changePageSize) {
        if (changePageSize) {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.change.emit({ page });
            }
        }
        else {
            if (page > 0 && page <= this.totalPages && page !== this.page) {
                this.page = page;
                this.change.emit({ page });
            }
        }
    }
    /**
     * @param {?=} page
     * @return {?}
     */
    calcPages(page) {
        /** @type {?} */
        const pages = [];
        /** @type {?} */
        let startPage = 1;
        /** @type {?} */
        let endPage = this.totalPages;
        /** @type {?} */
        const maxSize = 5;
        /** @type {?} */
        const isMaxSized = maxSize < this.totalPages;
        page = page || this.page;
        if (isMaxSized) {
            startPage = (Math.ceil(page / maxSize) - 1) * maxSize + 1;
            endPage = Math.min(startPage + maxSize - 1, this.totalPages);
        }
        for (let num = startPage; num <= endPage; num++) {
            pages.push({ number: num, text: num });
        }
        return pages;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valChange(event) {
        if (event === null) {
            this.customerInput.nativeElement.value = '';
        }
        if (event || event === 0) {
            this.currentOffset = Number(event) > this.totalPages ? this.totalPages : Number(event);
            this.customerInput.nativeElement.value = event === 0 ? 1 : event > this.totalPages ? this.totalPages : event;
        }
    }
    /**
     * @return {?}
     */
    blurHandel() {
        if ((this.currentOffset === 0 || this.customerInput.nativeElement.value === '')) {
            this.customerInput.nativeElement.value = 1;
        }
        else if (this.currentOffset !== undefined) {
            this.customerInput.nativeElement.value = this.currentOffset;
        }
        else if (this.currentOffset === undefined) {
            if (this.prveOffset !== undefined) {
                this.customerInput.nativeElement.value = this.prveOffset;
            }
        }
        this.page = Number(this.customerInput.nativeElement.value);
        this.datatable.offset = this.page - 1;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    changePageSize(pageSize) {
        this.datatable.limit = pageSize;
        this.selectPage(1, 'changePageSize');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyDownHandel(event) {
        if (this.customerInput.nativeElement.value) {
            this.prveOffset = Number(this.customerInput.nativeElement.value);
        }
        if ((event.keyCode < 48 && event.keyCode !== 8) || (event.keyCode > 57 && event.keyCode < 96) || (event.keyCode > 105)) {
            return false;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.inputEvent.unsubscribe();
    }
}
DatatablePagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-datatable-pager',
                template: `
    <ul class="pager">
      <li class="page-size-continer" *ngIf="linage" (click)="pageSizeColumn=!pageSizeColumn" (mouseleave)="pageSizeColumn=true">
        <span>{{size}} 行/页</span>
        <span class="fa" [ngClass]="{'fa-angle-up':pageSizeColumn,'fa-angle-down':!pageSizeColumn}"></span>
        <ul [hidden]="pageSizeColumn" class="page-size-content">
          <li *ngFor="let ps of pageSizes" (click)="changePageSize(ps)" [ngClass]="{'page-size-column-active':size===ps}">{{ps}} 行/页</li>
        </ul>
      </li>
      <li *ngIf="displayBothEnds" [class.disabled]="!canPrevious()">
        <a (click)="selectPage(1)">
          <i class="{{pagerPreviousIcon}}"></i>
        </a>
      </li>
      <li [class.disabled]="!canPrevious()">
        <a (click)="prevPage()">
          <i class="{{pagerLeftArrowIcon}}"></i>
        </a>
      </li>
      <li class="pages" *ngFor="let pg of pages" [class.active]="pg.number === page">
        <a *ngIf="pageNumber" (click)="selectPage(pg.number)">
          {{pg.text}}
        </a>
      </li>
      <li [class.disabled]="!canNext()">
        <a (click)="nextPage()">
          <i class="{{pagerRightArrowIcon}}"></i>
        </a>
      </li>
      <li *ngIf="displayBothEnds" [class.disabled]="!canNext()">
        <a (click)="selectPage(totalPages)">
          <i class="{{pagerNextIcon}}"></i>
        </a>
      </li>
      <li [ngStyle]="{'position':'relative'}">
        <span>跳转到</span>
        <input #customerInput class="lz-jump-page" type="number" title=" " rows="2" [min]="1" [ngModel]="page" (keydown)='keyDownHandel($event)'
          (blur)="blurHandel()" (ngModelChange)="valChange($event)" />页
      </li>
    </ul>`,
                styles: [`
      .page-size-continer {
        position: relative;
        width: 80px;
        height: 26px;
        line-height: 26px;
        text-align: center;
        border-radius: 2px;
        cursor: pointer;
      }
      .page-size-continer:hover {
        background-color: rgba(158, 158, 158, 0.2);
      }
      .page-size-continer .page-size-content {
        position: absolute;
        bottom: 24px;
        left: 0;
        padding: 0;
        background: #fff;
        border-radius: 4px;
        box-shadow: 0 0 15px 1px rgba(113, 106, 202, 0.2);
        z-index: 11;
      }
      .page-size-continer .page-size-content li {
        width: 100%;
        padding: 4px 0;
      }
      .page-size-continer .page-size-content li:hover {
        background-color: rgba(158, 158, 158, 0.2);
      }
      .page-size-continer .page-size-content .page-size-column-active {
        color: #409eff;
      }
      input[type='number']::-webkit-inner-spin-button,
      input[type='number']::-webkit-outer-spin-button {
        -webkit-appearance: none;
      }
      .lz-jump-page {
        display: inline-block;
        width: 50px;
        border-radius: 2px;
        margin-right: 6px;
        padding-left: 4px;
        border: solid 1px #ebedf2;
      }
      input[type='number'] {
        -moz-appearance: textfield;
      }
    `]
            }] }
];
DatatablePagerComponent.propDecorators = {
    pagerLeftArrowIcon: [{ type: Input }],
    pagerRightArrowIcon: [{ type: Input }],
    pagerPreviousIcon: [{ type: Input }],
    pagerNextIcon: [{ type: Input }],
    pageSizes: [{ type: Input }],
    datatable: [{ type: Input }],
    linage: [{ type: Input }],
    displayBothEnds: [{ type: Input }],
    pageNumber: [{ type: Input }],
    size: [{ type: Input }],
    count: [{ type: Input }],
    page: [{ type: Input }],
    change: [{ type: Output }],
    pageChange: [{ type: Output }],
    customerInput: [{ type: ViewChild, args: ['customerInput',] }]
};
if (false) {
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerLeftArrowIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerRightArrowIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerPreviousIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerNextIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageSizes;
    /** @type {?} */
    DatatablePagerComponent.prototype.datatable;
    /** @type {?} */
    DatatablePagerComponent.prototype.linage;
    /** @type {?} */
    DatatablePagerComponent.prototype.displayBothEnds;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageNumber;
    /** @type {?} */
    DatatablePagerComponent.prototype.change;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageChange;
    /** @type {?} */
    DatatablePagerComponent.prototype.currentOffset;
    /** @type {?} */
    DatatablePagerComponent.prototype.prveOffset;
    /** @type {?} */
    DatatablePagerComponent.prototype.inputEvent;
    /** @type {?} */
    DatatablePagerComponent.prototype.customerInput;
    /** @type {?} */
    DatatablePagerComponent.prototype._page;
    /** @type {?} */
    DatatablePagerComponent.prototype._count;
    /** @type {?} */
    DatatablePagerComponent.prototype._size;
    /** @type {?} */
    DatatablePagerComponent.prototype.pages;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageSizeColumn;
}
//# sourceMappingURL=data:application/json;base64,