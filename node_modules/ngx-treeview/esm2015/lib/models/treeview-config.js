import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class TreeviewConfig {
    constructor() {
        this.hasAllCheckBox = true;
        this.hasFilter = false;
        this.hasCollapseExpand = false;
        this.decoupleChildFromParent = false;
        this.maxHeight = 500;
    }
    get hasDivider() {
        return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;
    }
    static create(fields) {
        const config = new TreeviewConfig();
        Object.assign(config, fields);
        return config;
    }
}
TreeviewConfig.ɵfac = function TreeviewConfig_Factory(t) { return new (t || TreeviewConfig)(); };
TreeviewConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeviewConfig, factory: TreeviewConfig.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXZpZXctY29uZmlnLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdHJlZXZpZXcvc3JjL2xpYi9tb2RlbHMvdHJlZXZpZXctY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBRkE7QUFDRSxRQUNBLG1CQUFjLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLFFBQUUsY0FBUyxHQUFHLEtBQUssQ0FBQztBQUNwQixRQUFFLHNCQUFpQixHQUFHLEtBQUssQ0FBQztBQUM1QixRQUFFLDRCQUF1QixHQUFHLEtBQUssQ0FBQztBQUNsQyxRQUFFLGNBQVMsR0FBRyxHQUFHLENBQUM7QUFDbEIsSUFnQkEsQ0FBQztBQUNELElBaEJFLElBQUksVUFBVTtBQUFNLFFBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztBQUMzRSxJQUFFLENBQUM7QUFDSCxJQUNTLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFNcEI7QUFBSyxRQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7QUFDeEMsUUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsQyxRQUFJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztBQUNIOzRDQXZCQyxVQUFVOzs7OztBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFpQkEsQUFBQSxBQWZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdEJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUcmVldmlld0NvbmZpZyB7XHJcbiAgaGFzQWxsQ2hlY2tCb3ggPSB0cnVlO1xyXG4gIGhhc0ZpbHRlciA9IGZhbHNlO1xyXG4gIGhhc0NvbGxhcHNlRXhwYW5kID0gZmFsc2U7XHJcbiAgZGVjb3VwbGVDaGlsZEZyb21QYXJlbnQgPSBmYWxzZTtcclxuICBtYXhIZWlnaHQgPSA1MDA7XHJcblxyXG4gIGdldCBoYXNEaXZpZGVyKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFzRmlsdGVyIHx8IHRoaXMuaGFzQWxsQ2hlY2tCb3ggfHwgdGhpcy5oYXNDb2xsYXBzZUV4cGFuZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGZpZWxkcz86IHtcclxuICAgIGhhc0FsbENoZWNrQm94PzogYm9vbGVhbixcclxuICAgIGhhc0ZpbHRlcj86IGJvb2xlYW4sXHJcbiAgICBoYXNDb2xsYXBzZUV4cGFuZD86IGJvb2xlYW4sXHJcbiAgICBkZWNvdXBsZUNoaWxkRnJvbVBhcmVudD86IGJvb2xlYW5cclxuICAgIG1heEhlaWdodD86IG51bWJlcixcclxuICB9KTogVHJlZXZpZXdDb25maWcge1xyXG4gICAgY29uc3QgY29uZmlnID0gbmV3IFRyZWV2aWV3Q29uZmlnKCk7XHJcbiAgICBPYmplY3QuYXNzaWduKGNvbmZpZywgZmllbGRzKTtcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG59XHJcbiJdfQ==