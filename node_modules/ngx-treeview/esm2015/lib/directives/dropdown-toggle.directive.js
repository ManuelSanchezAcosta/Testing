import { Directive, ElementRef } from '@angular/core';
import { DropdownDirective } from './dropdown.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dropdown.directive';
export class DropdownToggleDirective {
    constructor(dropdown, elementRef) {
        this.dropdown = dropdown;
        dropdown.toggleElement = elementRef.nativeElement;
    }
}
DropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) { return new (t || DropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DropdownToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropdownToggleDirective, selectors: [["", "ngxDropdownToggle", ""]], hostAttrs: ["aria-haspopup", "true", 1, "dropdown-toggle"], hostVars: 1, hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownToggleDirective_click_HostBindingHandler() { return ctx.dropdown.toggle(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.dropdown.isOpen);
    } } });
DropdownToggleDirective.ctorParameters = () => [
    { type: DropdownDirective },
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxDropdownToggle]',
                host: {
                    class: 'dropdown-toggle',
                    'aria-haspopup': 'true',
                    '[attr.aria-expanded]': 'dropdown.isOpen',
                    '(click)': 'dropdown.toggle()'
                }
            }]
    }], function () { return [{ type: ɵngcc1.DropdownDirective }, { type: ɵngcc0.ElementRef }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRyZWV2aWV3L3NyYy9saWIvZGlyZWN0aXZlcy9kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFXekQsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQUFFLFlBQ1MsUUFBMkIsRUFDbEMsVUFBc0I7QUFDdkIsUUFGUSxhQUFRLEdBQVIsUUFBUSxDQUFtQjtBQUFFLFFBR3BDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUN0RCxJQUFFLENBQUM7QUFDSDtxREFoQkMsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxxQkFBcUIsbUJBQy9CLElBQUksRUFBRSx1QkFDSixLQUFLLEVBQUUsaUJBQWlCLHVCQUN4QjtXQUFlLEVBQUUsTUFBTSx1QkFDdkIsc0JBQXNCLEVBQUUsaUJBQWlCLHVCQUN6QyxTQUFTLEVBQUUsbUJBQW1CLG1CQUMvQixlQUNGOzs7O1dBQ0k7QUFBRTtBQUVOLFlBYlEsaUJBQWlCO0FBQUssWUFEWCxVQUFVO0FBQUk7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFXQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBVkEsQUFBQSxBQURBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHJvcGRvd25EaXJlY3RpdmUgfSBmcm9tICcuL2Ryb3Bkb3duLmRpcmVjdGl2ZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3hEcm9wZG93blRvZ2dsZV0nLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiAnZHJvcGRvd24tdG9nZ2xlJyxcclxuICAgICdhcmlhLWhhc3BvcHVwJzogJ3RydWUnLFxyXG4gICAgJ1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ2Ryb3Bkb3duLmlzT3BlbicsXHJcbiAgICAnKGNsaWNrKSc6ICdkcm9wZG93bi50b2dnbGUoKSdcclxuICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEcm9wZG93blRvZ2dsZURpcmVjdGl2ZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgZHJvcGRvd246IERyb3Bkb3duRGlyZWN0aXZlLFxyXG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZlxyXG4gICkge1xyXG4gICAgZHJvcGRvd24udG9nZ2xlRWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICB9XHJcbn1cclxuIl19