import * as ɵngcc0 from '@angular/core';
var BlockUIModule_1;
import { __decorate } from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BlockUIComponent } from './components/block-ui/block-ui.component';
import { BlockUIContentComponent } from './components/block-ui-content/block-ui-content.component';
import { BlockUIInstanceService } from './services/block-ui-instance.service';
import { BlockUIService } from './services/block-ui.service';
import { BlockUIDirective } from './directives/block-ui.directive';
export const BlockUIServiceInstance = new BlockUIInstanceService();
// Needed for AOT compiling
export const BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');
export function provideInstance(settings) {
    BlockUIServiceInstance.updateSettings(settings);
    return BlockUIServiceInstance;
}
let BlockUIModule = BlockUIModule_1 = class BlockUIModule {
    static forRoot(settings = {}) {
        return {
            ngModule: BlockUIModule_1,
            providers: [
                {
                    provide: BlockUIModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIInstanceService,
                    useFactory: provideInstance,
                    deps: [BlockUIModuleSettings]
                },
                BlockUIService
            ]
        };
    }
};
BlockUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUIModule });
BlockUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUIModule_Factory(t) { return new (t || BlockUIModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, { declarations: function () { return [BlockUIComponent,
        BlockUIDirective,
        BlockUIContentComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [BlockUIComponent,
        BlockUIDirective,
        BlockUIContentComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [
                    BlockUIComponent,
                    BlockUIContentComponent
                ],
                declarations: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ],
                exports: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ]
            }]
    }], null, null); })();
export { BlockUIModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZy1ibG9jay11aS9ibG9jay11aS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHbkUsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO0FBRW5FLDJCQUEyQjtBQUMzQixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBUyx1QkFBdUIsQ0FBQyxDQUFDO0FBRXpGLE1BQU0sVUFBVSxlQUFlLENBQUMsUUFBeUI7QUFBSSxJQUMzRCxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEQsSUFBRSxPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUM7QUFxQkQsSUFBYSxhQUFhLHFCQUExQixNQUFhLGFBQWE7QUFDMUIsSUFBUyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQTRCLEVBQUU7QUFBSSxRQUN0RCxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsZUFBYTtBQUM3QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxxQkFBcUI7QUFDeEMsb0JBQVUsUUFBUSxFQUFFLFFBQVE7QUFDNUIsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxzQkFBc0I7QUFDekMsb0JBQVUsVUFBVSxFQUFFLGVBQWU7QUFDckMsb0JBQVUsSUFBSSxFQUFFLENBQUMscUJBQXFCLENBQUM7QUFDdkMsaUJBQVM7QUFDVCxnQkFBUSxjQUFjO0FBQ3RCLGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxDQUFDLENBQUE7QUFsQlksYUFBYSxzQ0FuQnpCLFFBQVEsQ0FBQyxVQUNSO01BQU8sRUFBRSxjQUNQLFlBQVksVUFDYixVQUNELGVBQWUsRUFBRSxjQUNmLGdCQUFnQixjQUNoQix1QkFBdUI7TUFDeEIsVUFDRDtHQUFZLEVBQUU7SUFDWixnQkFBZ0IsY0FDaEIsZ0JBQWdCLGNBQ2hCLHVCQUF1QixVQUN4QixVQUNELE9BQU8sRUFBRSxjQUNQLGdCQUFnQixjQUNoQjthQUFnQjtDQUNoQix1QkFBdUIsVUFDeEIsTUFDRixDQUFDLElBQ1csYUFBYSxDQWtCekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDRDtBQUFDLFNBbkJZLGFBQWE7QUFDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEJsb2NrVUlDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYmxvY2stdWkvYmxvY2stdWkuY29tcG9uZW50JztcbmltcG9ydCB7IEJsb2NrVUlDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Jsb2NrLXVpLWNvbnRlbnQvYmxvY2stdWktY29udGVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmxvY2tVSUluc3RhbmNlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYmxvY2stdWktaW5zdGFuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBCbG9ja1VJU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYmxvY2stdWkuc2VydmljZSc7XG5pbXBvcnQgeyBCbG9ja1VJRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2Jsb2NrLXVpLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCbG9ja1VJU2V0dGluZ3MgfSBmcm9tICcuL21vZGVscy9ibG9jay11aS1zZXR0aW5ncy5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBCbG9ja1VJU2VydmljZUluc3RhbmNlID0gbmV3IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2UoKTtcblxuLy8gTmVlZGVkIGZvciBBT1QgY29tcGlsaW5nXG5leHBvcnQgY29uc3QgQmxvY2tVSU1vZHVsZVNldHRpbmdzID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0Jsb2NrVUlNb2R1bGVTZXR0aW5ncycpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUluc3RhbmNlKHNldHRpbmdzOiBCbG9ja1VJU2V0dGluZ3MpOiBhbnkge1xuICBCbG9ja1VJU2VydmljZUluc3RhbmNlLnVwZGF0ZVNldHRpbmdzKHNldHRpbmdzKTtcbiAgcmV0dXJuIEJsb2NrVUlTZXJ2aWNlSW5zdGFuY2U7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgQmxvY2tVSUNvbXBvbmVudCxcbiAgICBCbG9ja1VJQ29udGVudENvbXBvbmVudFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBCbG9ja1VJQ29tcG9uZW50LFxuICAgIEJsb2NrVUlEaXJlY3RpdmUsXG4gICAgQmxvY2tVSUNvbnRlbnRDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEJsb2NrVUlDb21wb25lbnQsXG4gICAgQmxvY2tVSURpcmVjdGl2ZSxcbiAgICBCbG9ja1VJQ29udGVudENvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qoc2V0dGluZ3M6IEJsb2NrVUlTZXR0aW5ncyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxCbG9ja1VJTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCbG9ja1VJTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJTW9kdWxlU2V0dGluZ3MsXG4gICAgICAgICAgdXNlVmFsdWU6IHNldHRpbmdzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IHByb3ZpZGVJbnN0YW5jZSxcbiAgICAgICAgICBkZXBzOiBbQmxvY2tVSU1vZHVsZVNldHRpbmdzXVxuICAgICAgICB9LFxuICAgICAgICBCbG9ja1VJU2VydmljZVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==