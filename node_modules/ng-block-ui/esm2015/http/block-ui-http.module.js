import * as ɵngcc0 from '@angular/core';
var BlockUIHttpModule_1;
import { __decorate } from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { BlockUIModule } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import { BlockUIInterceptor } from './block-ui-http.interceptor';
// Needed for AOT compiling
export const BlockUIHttpModuleSettings = new InjectionToken('BlockUIHttpModuleSettings');
export function provideSettingsInstance(settings) {
    return {
        settings: Object.assign({ blockAllRequestsInProgress: true }, settings)
    };
}
let BlockUIHttpModule = BlockUIHttpModule_1 = class BlockUIHttpModule {
    static forRoot(settings = {}) {
        return {
            ngModule: BlockUIHttpModule_1,
            providers: [
                {
                    provide: BlockUIHttpModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIHttpSettings,
                    useFactory: provideSettingsInstance,
                    deps: [BlockUIHttpModuleSettings]
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BlockUIInterceptor,
                    multi: true
                }
            ]
        };
    }
};
BlockUIHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUIHttpModule });
BlockUIHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUIHttpModule_Factory(t) { return new (t || BlockUIHttpModule)(); }, imports: [[BlockUIModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIHttpModule, { imports: function () { return [BlockUIModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIHttpModule, [{
        type: NgModule,
        args: [{
                imports: [BlockUIModule]
            }]
    }], null, null); })();
export { BlockUIHttpModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sYUFBYSxDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR2pFLDJCQUEyQjtBQUMzQixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBUywyQkFBMkIsQ0FBQyxDQUFDO0FBRWpHLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxRQUFzQjtBQUFJLElBQ2hFLE9BQU87QUFDVCxRQUFJLFFBQVEsa0JBQ04sMEJBQTBCLEVBQUUsSUFBSSxJQUM3QixRQUFRLENBQ1o7QUFDTCxLQUFHLENBQUM7QUFDSixDQUFDO0FBS0QsSUFBYSxpQkFBaUIseUJBQTlCLE1BQWEsaUJBQWlCO0FBQzlCLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUF5QixFQUFFO0FBQUksUUFDNUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLG1CQUFpQjtBQUNqQyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSx5QkFBeUI7QUFDNUMsb0JBQVUsUUFBUSxFQUFFLFFBQVE7QUFDNUIsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxtQkFBbUI7QUFDdEMsb0JBQVUsVUFBVSxFQUFFLHVCQUF1QjtBQUM3QyxvQkFBVSxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztBQUMzQyxpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGlCQUFpQjtBQUNwQyxvQkFBVSxRQUFRLEVBQUUsa0JBQWtCO0FBQ3RDLG9CQUFVLEtBQUssRUFBRSxJQUFJO0FBQ3JCLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQXRCWSxpQkFBaUIsMENBSDdCLFFBQVEsQ0FBQyxVQUNSO01BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUN6QixDQUFDLElBQ1csaUJBQWlCLENBc0I3Qjs7Ozs7OzswQkFDRDtBQUFDLFNBdkJZLGlCQUFpQjtBQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBCbG9ja1VJTW9kdWxlLCBIdHRwU2V0dGluZ3MgfSBmcm9tICduZy1ibG9jay11aSc7XG5pbXBvcnQgeyBCbG9ja1VJSHR0cFNldHRpbmdzIH0gZnJvbSAnLi9ibG9jay11aS1odHRwLXNldHRpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmxvY2tVSUludGVyY2VwdG9yIH0gZnJvbSAnLi9ibG9jay11aS1odHRwLmludGVyY2VwdG9yJztcblxuXG4vLyBOZWVkZWQgZm9yIEFPVCBjb21waWxpbmdcbmV4cG9ydCBjb25zdCBCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0Jsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVTZXR0aW5nc0luc3RhbmNlKHNldHRpbmdzOiBIdHRwU2V0dGluZ3MpOiBCbG9ja1VJSHR0cFNldHRpbmdzIHtcbiAgcmV0dXJuIHtcbiAgICBzZXR0aW5nczoge1xuICAgICAgYmxvY2tBbGxSZXF1ZXN0c0luUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAuLi5zZXR0aW5nc1xuICAgIH1cbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0Jsb2NrVUlNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlIdHRwTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxCbG9ja1VJSHR0cE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQmxvY2tVSUh0dHBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MsXG4gICAgICAgICAgdXNlVmFsdWU6IHNldHRpbmdzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJSHR0cFNldHRpbmdzLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IHByb3ZpZGVTZXR0aW5nc0luc3RhbmNlLFxuICAgICAgICAgIGRlcHM6IFtCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgdXNlQ2xhc3M6IEJsb2NrVUlJbnRlcmNlcHRvcixcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19