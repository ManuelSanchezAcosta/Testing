import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIInstanceService } from './block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './block-ui-instance.service';
let BlockUIService = class BlockUIService {
    constructor(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
        this.globalDispatch = this.blockUIInstance.decorate();
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    start(target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    }
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    stop(target) {
        this.dispatch(target, BlockUIActions.STOP);
    }
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    reset(target) {
        this.dispatch(target, BlockUIActions.RESET);
    }
    /**
    * Reset blocking for all BlockUI instances
    */
    resetGlobal() {
        this.globalDispatch.resetGlobal();
    }
    /**
    * Updates message for given BlockUI instance or instances
    */
    update(target, message) {
        this.dispatch(target, BlockUIActions.UPDATE, message);
    }
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    unsubscribe(target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    }
    /**
    * Checks if BlockUI is actively blocking
    */
    isActive(target = null) {
        const targets = target ? this.toArray(target) : null;
        const instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some((key) => {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    }
    dispatch(target = [], type, message) {
        const instances = this.toArray(target);
        instances.forEach(i => this.blockUIInstance.decorate(i)[type](message));
    }
    toArray(target = []) {
        return typeof target === 'string' ? [target] : target;
    }
};
BlockUIService.ɵfac = function BlockUIService_Factory(t) { return new (t || BlockUIService)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIInstanceService)); };
BlockUIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIService, factory: function (t) { return BlockUIService.ɵfac(t); } });
BlockUIService.ctorParameters = () => [
    { type: BlockUIInstanceService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIInstanceService }]; }, null); })();
export { BlockUIService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmctYmxvY2stdWkvc2VydmljZXMvYmxvY2stdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7OztBQUtyRSxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0FBQzNCLElBRUUsWUFDVSxlQUF1QztBQUNoRCxRQURTLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtBQUNuRCxRQUpFLG1CQUFjLEdBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUM5RCxJQUdNLENBQUM7QUFDUCxJQUNFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0osSUFBRSxLQUFLLENBQUMsTUFBeUIsRUFBRSxPQUFhO0FBQUksUUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0osSUFBRSxJQUFJLENBQUMsTUFBeUI7QUFBSSxRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsS0FBSyxDQUFDLE1BQXlCO0FBQUksUUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE1BQUU7QUFDSixJQUFFLFdBQVc7QUFBSyxRQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEMsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsTUFBTSxDQUFDLE1BQXlCLEVBQUUsT0FBWTtBQUFJLFFBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUQsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsV0FBVyxDQUFDLE1BQXlCO0FBQUksUUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RELElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE1BQUU7QUFDSixJQUFFLFFBQVEsQ0FBQyxTQUE0QixJQUFJO0FBQUksUUFDM0MsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDekQsUUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDO0FBQzVELFFBQ0ksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO0FBQ3ZELFlBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNwQixnQkFBUSxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdkMsYUFBTztBQUNQLFlBQ00sT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNsRixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFDVSxRQUFRLENBQUMsU0FBNEIsRUFBRSxFQUFFLElBQVksRUFBRSxPQUFhO0FBQzlFLFFBQUksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxRQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzVFLElBQUUsQ0FBQztBQUNILElBQ1UsT0FBTyxDQUFDLFNBQTRCLEVBQUU7QUFDaEQsUUFBSSxPQUFPLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzFELElBQUUsQ0FBQztBQUNILENBQUM7O3NJQUFBO0FBQ0Q7QUFBd0MsWUF0RVgsc0JBQXNCO0FBQ2pEO0FBTFcsY0FBYyxvQkFEMUIsVUFBVSxFQUFFLElBQ0EsY0FBYyxDQXlFMUI7O3VGQUNEO0FBQUMsU0ExRVksY0FBYztBQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrVUlBY3Rpb25zIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWFjdGlvbnMuY29uc3RhbnQnO1xuaW1wb3J0IHsgQmxvY2tVSUluc3RhbmNlU2VydmljZSB9IGZyb20gJy4vYmxvY2stdWktaW5zdGFuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0Jsb2NrVUkgfSBmcm9tICcuLi9tb2RlbHMvYmxvY2stdWkubW9kZWwnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCbG9ja1VJU2VydmljZSB7XG4gIGdsb2JhbERpc3BhdGNoOiBOZ0Jsb2NrVUkgPSB0aGlzLmJsb2NrVUlJbnN0YW5jZS5kZWNvcmF0ZSgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSUluc3RhbmNlOiBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlXG4gICkgeyB9XG5cbiAgLyoqXG4gICogU3RhcnRzIGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICBzdGFydCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdLCBtZXNzYWdlPzogYW55KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlNUQVJULCBtZXNzYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAqIFN0b3BzIGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICBzdG9wKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuU1RPUCk7XG4gIH1cblxuICAvKipcbiAgKiBSZXNldCBibG9ja2luZyBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgcmVzZXQodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5SRVNFVCk7XG4gIH1cblxuICAvKipcbiAgKiBSZXNldCBibG9ja2luZyBmb3IgYWxsIEJsb2NrVUkgaW5zdGFuY2VzXG4gICovXG4gIHJlc2V0R2xvYmFsKCk6IHZvaWQge1xuICAgIHRoaXMuZ2xvYmFsRGlzcGF0Y2gucmVzZXRHbG9iYWwoKTtcbiAgfVxuXG4gIC8qKlxuICAqIFVwZGF0ZXMgbWVzc2FnZSBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgdXBkYXRlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10sIG1lc3NhZ2U6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5VUERBVEUsIG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICogVW5zdWJzY3JpYmVzIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICB1bnN1YnNjcmliZSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlVOU1VCU0NSSUJFKTtcbiAgfVxuXG4gIC8qKlxuICAqIENoZWNrcyBpZiBCbG9ja1VJIGlzIGFjdGl2ZWx5IGJsb2NraW5nXG4gICovXG4gIGlzQWN0aXZlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10gPSBudWxsKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IHRhcmdldCA/IHRoaXMudG9BcnJheSh0YXJnZXQpIDogbnVsbDtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLmJsb2NrVUlJbnN0YW5jZS5ibG9ja1VJSW5zdGFuY2VzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGluc3RhbmNlcykuc29tZSgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2tleV0uaXNBY3RpdmU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRzLmluZGV4T2YoaW5zdGFuY2VzW2tleV0ubmFtZSkgPj0gMCAmJiBpbnN0YW5jZXNba2V5XS5pc0FjdGl2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2godGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdLCB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U/OiBhbnkpIHtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLnRvQXJyYXkodGFyZ2V0KTtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChpID0+IHRoaXMuYmxvY2tVSUluc3RhbmNlLmRlY29yYXRlKGkpW3R5cGVdKG1lc3NhZ2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9BcnJheSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gW10pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBbdGFyZ2V0XSA6IHRhcmdldDtcbiAgfVxufVxuIl19