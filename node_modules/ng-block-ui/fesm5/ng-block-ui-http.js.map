{"version":3,"file":"ng-block-ui-http.js","sources":["ng-block-ui/http/block-ui-http-settings.service.ts","ng-block-ui/http/block-ui-http.interceptor.ts","ng-block-ui/http/block-ui-http.module.ts","ng-block-ui/http/ng-block-ui-http.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n            this.blockUIService[method](BLOCKUI_DEFAULT);\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return {\n    settings: {\n      blockAllRequestsInProgress: true,\n      ...settings\n    }\n  };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  static forRoot(settings: HttpSettings = {}): ModuleWithProviders<BlockUIHttpModule> {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BlockUIHttpSettings as Éµc} from './block-ui-http-settings.service';\nexport {BlockUIInterceptor as Éµd} from './block-ui-http.interceptor';\nexport {BlockUIHttpModuleSettings as Éµa,provideSettingsInstance as Éµb} from './block-ui-http.module';"]}