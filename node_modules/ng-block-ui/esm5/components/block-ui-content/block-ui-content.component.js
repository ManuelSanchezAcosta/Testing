import { __assign, __decorate, __read, __spread } from "tslib";
import { Component, OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ViewEncapsulation, Input, ViewChild, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import { BlockUIActions } from '../../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';
import { styles } from './block-ui-content.component.style';
import { template } from './block-ui-content.component.template';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/block-ui-instance.service';
import * as ɵngcc2 from '@angular/common';

var _c0 = ["templateOutlet"];
function BlockUIContentComponent_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.message || ctx_r2.defaultMessage, " ");
} }
function BlockUIContentComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "div", 4);
    ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_div_1_div_2_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.message || ctx_r0.defaultMessage);
} }
function BlockUIContentComponent_2_ng_template_0_Template(rf, ctx) { }
function BlockUIContentComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, BlockUIContentComponent_2_ng_template_0_Template, 0, 0, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
} }
var _c1 = function (a0) { return { "active": a0 }; };
var BlockUIContentComponent = /** @class */ (function () {
    function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.defaultBlockState = {
            startTimeouts: [],
            stopTimeouts: [],
            updateTimeouts: [],
            blockCount: 0,
            startCallCount: 0,
            stopCallCount: 0
        };
        this.state = __assign({}, this.defaultBlockState);
    }
    BlockUIContentComponent.prototype.ngOnInit = function () {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    };
    BlockUIContentComponent.prototype.ngAfterViewInit = function () {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                var templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    };
    BlockUIContentComponent.prototype.ngAfterViewChecked = function () {
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.subscribeToBlockUI = function (blockUI$) {
        var _this = this;
        return blockUI$.subscribe(function (event) { return _this.onDispatchedEvent(event); });
    };
    BlockUIContentComponent.prototype.onDispatchedEvent = function (event) {
        switch (event.action) {
            case BlockUIActions.START:
                this.onStart(event);
                break;
            case BlockUIActions.STOP:
                this.onStop(event);
                break;
            case BlockUIActions.UPDATE:
                this.onUpdate(event);
                break;
            case BlockUIActions.RESET:
                this.onReset(event);
                break;
            case BlockUIActions.RESET_GLOBAL:
                this.resetState();
                break;
            case BlockUIActions.UNSUBSCRIBE:
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    };
    BlockUIContentComponent.prototype.onStart = function (_a) {
        var _this = this;
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            var delay = this.delayStart || this.settings.delayStart || 0;
            this.state.startCallCount += 1;
            var startTimeout = setTimeout(function () {
                _this.state.blockCount += 1;
                _this.showBlock(message);
                _this.updateInstanceBlockCount();
            }, delay);
            this.state.startTimeouts.push(startTimeout);
        }
    };
    BlockUIContentComponent.prototype.onStop = function (_a) {
        var _this = this;
        var name = _a.name;
        if (name === this.name) {
            var stopCount = this.state.stopCallCount + 1;
            if (this.state.startCallCount - stopCount >= 0) {
                var delay = this.delayStop || this.settings.delayStop || 0;
                this.state.stopCallCount = stopCount;
                var stopTimeout = setTimeout(function () {
                    _this.state.blockCount -= 1;
                    _this.updateInstanceBlockCount();
                    _this.detectChanges();
                }, delay);
                this.state.stopTimeouts.push(stopTimeout);
            }
        }
    };
    BlockUIContentComponent.prototype.onUpdate = function (_a) {
        var _this = this;
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            var delay = this.delayStart || this.settings.delayStart || 0;
            clearTimeout(this.state.updateTimeouts[0]);
            var updateTimeout = setTimeout(function () {
                _this.updateMessage(message);
            }, delay);
            this.state.updateTimeouts.push(updateTimeout);
        }
    };
    BlockUIContentComponent.prototype.onReset = function (_a) {
        var name = _a.name;
        if (name === this.name) {
            this.resetState();
        }
    };
    BlockUIContentComponent.prototype.updateMessage = function (message) {
        this.showBlock(message);
    };
    BlockUIContentComponent.prototype.showBlock = function (message) {
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.updateBlockTemplate = function (msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    };
    BlockUIContentComponent.prototype.resetState = function () {
        __spread(this.state.startTimeouts, this.state.stopTimeouts, this.state.updateTimeouts).forEach(clearTimeout);
        this.state = __assign({}, this.defaultBlockState);
        this.updateInstanceBlockCount();
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.onUnsubscribe = function (name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    };
    BlockUIContentComponent.prototype.updateInstanceBlockCount = function () {
        if (this.blockUI.blockUIInstances[this.name]) {
            var blockCount = this.state.blockCount;
            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;
        }
    };
    BlockUIContentComponent.prototype.detectChanges = function () {
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    };
    BlockUIContentComponent.prototype.ngOnDestroy = function () {
        this.resetState();
        this.onUnsubscribe(this.name);
        this.blockUI.clearInstance(this.name);
    };
    BlockUIContentComponent.ctorParameters = function () { return [
        { type: BlockUIInstanceService },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "delayStart", void 0);
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "delayStop", void 0);
    __decorate([
        Input('message')
    ], BlockUIContentComponent.prototype, "defaultMessage", void 0);
    __decorate([
        Input('template')
    ], BlockUIContentComponent.prototype, "templateCmp", void 0);
    __decorate([
        ViewChild('templateOutlet', { read: ViewContainerRef })
    ], BlockUIContentComponent.prototype, "templateOutlet", void 0);
BlockUIContentComponent.ɵfac = function BlockUIContentComponent_Factory(t) { return new (t || BlockUIContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
BlockUIContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BlockUIContentComponent, selectors: [["block-ui-content"]], viewQuery: function BlockUIContentComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOutlet = _t.first);
    } }, inputs: { name: "name", delayStart: "delayStart", delayStop: "delayStop", defaultMessage: ["message", "defaultMessage"], templateCmp: ["template", "templateCmp"] }, decls: 3, vars: 9, consts: [[3, "ngClass"], ["class", "block-ui-spinner", 4, "ngIf"], [4, "ngIf"], [1, "block-ui-spinner"], [1, "loader"], ["class", "message", 4, "ngIf"], [1, "message"], ["templateOutlet", ""]], template: function BlockUIContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BlockUIContentComponent_div_1_Template, 3, 1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_2_Template, 2, 0, undefined, 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate2("block-ui-wrapper ", ctx.name, " ", ctx.className, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c1, ctx.state.blockCount > 0));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.templateCmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.templateCmp);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf], styles: ["\n.block-ui-wrapper {\n  display: none;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.70);\n  z-index: 30000;\n  cursor: wait;\n}\n\n.block-ui-wrapper.block-ui-wrapper--element {\n  position: absolute;\n}\n\n.block-ui-wrapper.active {\n  display: block;\n}\n\n.block-ui-wrapper.block-ui-main {\n  position: fixed;\n}\n\n.block-ui-spinner,\n.block-ui-template {\n  position: absolute;\n  top: 40%;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.block-ui-spinner > .message {\n  font-size: 1.3em;\n  text-align: center;\n  color: #fff;\n}\n\n.block-ui__element {\n  position: relative;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 7px auto;\n  font-size: 5px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid #ffffff;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n"], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIContentComponent, [{
        type: Component,
        args: [{
                selector: 'block-ui-content',
                template: template,
                encapsulation: ViewEncapsulation.None,
                styles: [styles]
            }]
    }], function () { return [{ type: ɵngcc1.BlockUIInstanceService }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], delayStart: [{
            type: Input
        }], delayStop: [{
            type: Input
        }], defaultMessage: [{
            type: Input,
            args: ['message']
        }], templateCmp: [{
            type: Input,
            args: ['template']
        }], templateOutlet: [{
            type: ViewChild,
            args: ['templateOutlet', { read: ViewContainerRef }]
        }] }); })();
    return BlockUIContentComponent;
}());
export { BlockUIContentComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,