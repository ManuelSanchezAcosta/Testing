import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIInstanceService } from './block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './block-ui-instance.service';
var BlockUIService = /** @class */ (function () {
    function BlockUIService(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
        this.globalDispatch = this.blockUIInstance.decorate();
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.start = function (target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    };
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.stop = function (target) {
        this.dispatch(target, BlockUIActions.STOP);
    };
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.reset = function (target) {
        this.dispatch(target, BlockUIActions.RESET);
    };
    /**
    * Reset blocking for all BlockUI instances
    */
    BlockUIService.prototype.resetGlobal = function () {
        this.globalDispatch.resetGlobal();
    };
    /**
    * Updates message for given BlockUI instance or instances
    */
    BlockUIService.prototype.update = function (target, message) {
        this.dispatch(target, BlockUIActions.UPDATE, message);
    };
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    BlockUIService.prototype.unsubscribe = function (target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    };
    /**
    * Checks if BlockUI is actively blocking
    */
    BlockUIService.prototype.isActive = function (target) {
        if (target === void 0) { target = null; }
        var targets = target ? this.toArray(target) : null;
        var instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some(function (key) {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    };
    BlockUIService.prototype.dispatch = function (target, type, message) {
        var _this = this;
        if (target === void 0) { target = []; }
        var instances = this.toArray(target);
        instances.forEach(function (i) { return _this.blockUIInstance.decorate(i)[type](message); });
    };
    BlockUIService.prototype.toArray = function (target) {
        if (target === void 0) { target = []; }
        return typeof target === 'string' ? [target] : target;
    };
    BlockUIService.ctorParameters = function () { return [
        { type: BlockUIInstanceService }
    ]; };
BlockUIService.ɵfac = function BlockUIService_Factory(t) { return new (t || BlockUIService)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIInstanceService)); };
BlockUIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIService, factory: function (t) { return BlockUIService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIInstanceService }]; }, null); })();
    return BlockUIService;
}());
export { BlockUIService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmctYmxvY2stdWkvc2VydmljZXMvYmxvY2stdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7OztBQUtyRTtBQUNvQixJQUVsQix3QkFDVSxlQUF1QztBQUNoRCxRQURTLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtBQUNuRCxRQUpFLG1CQUFjLEdBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUM5RCxJQUdNLENBQUM7QUFDUCxJQUNFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0osSUFBRSw4QkFBSyxHQUFMLFVBQU0sTUFBeUIsRUFBRSxPQUFhO0FBQUksUUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFDRSxNQUFFO0FBQ0osSUFBRSw2QkFBSSxHQUFKLFVBQUssTUFBeUI7QUFBSSxRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsOEJBQUssR0FBTCxVQUFNLE1BQXlCO0FBQUksUUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE1BQUU7QUFDSixJQUFFLG9DQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEMsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsK0JBQU0sR0FBTixVQUFPLE1BQXlCLEVBQUUsT0FBWTtBQUFJLFFBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUQsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0UsTUFBRTtBQUNKLElBQUUsb0NBQVcsR0FBWCxVQUFZLE1BQXlCO0FBQUksUUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RELElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE1BQUU7QUFDSixJQUFFLGlDQUFRLEdBQVIsVUFBUyxNQUFnQztBQUFJLFFBQXBDLHVCQUFBLEVBQUEsYUFBZ0M7QUFBSSxRQUMzQyxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN6RCxRQUFJLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7QUFDNUQsUUFDSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBVztBQUFJLFlBQ2pELElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDcEIsZ0JBQVEsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3ZDLGFBQU87QUFDUCxZQUNNLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbEYsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUVILElBQVUsaUNBQVEsR0FBaEIsVUFBaUIsTUFBOEIsRUFBRSxJQUFZLEVBQUUsT0FBYTtBQUM5RSxRQURFLGlCQUdDO0FBQ0gsUUFKbUIsdUJBQUEsRUFBQSxXQUE4QjtBQUFJLFFBQ2pELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0MsUUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQS9DLENBQStDLENBQUMsQ0FBQztBQUM1RSxJQUFFLENBQUM7QUFFSCxJQUFVLGdDQUFPLEdBQWYsVUFBZ0IsTUFBOEI7QUFDaEQsUUFEa0IsdUJBQUEsRUFBQSxXQUE4QjtBQUNoRCxRQUFJLE9BQU8sT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDMUQsSUFBRSxDQUFDO0FBQ0Y7QUFDeUQsZ0JBdEU3QixzQkFBc0I7QUFDakQ7SUFMVyxjQUFjLHdCQUQxQixVQUFVLEVBQUUsUUFDQSxjQUFjLENBeUUxQjs7Ozt1RkFDRDtBQUFDLElBREQscUJBQUM7QUFDQSxDQURBLEFBekVELElBeUVDO0FBQ0QsU0ExRWEsY0FBYztBQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrVUlBY3Rpb25zIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWFjdGlvbnMuY29uc3RhbnQnO1xuaW1wb3J0IHsgQmxvY2tVSUluc3RhbmNlU2VydmljZSB9IGZyb20gJy4vYmxvY2stdWktaW5zdGFuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0Jsb2NrVUkgfSBmcm9tICcuLi9tb2RlbHMvYmxvY2stdWkubW9kZWwnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCbG9ja1VJU2VydmljZSB7XG4gIGdsb2JhbERpc3BhdGNoOiBOZ0Jsb2NrVUkgPSB0aGlzLmJsb2NrVUlJbnN0YW5jZS5kZWNvcmF0ZSgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSUluc3RhbmNlOiBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlXG4gICkgeyB9XG5cbiAgLyoqXG4gICogU3RhcnRzIGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICBzdGFydCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdLCBtZXNzYWdlPzogYW55KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlNUQVJULCBtZXNzYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAqIFN0b3BzIGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICBzdG9wKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuU1RPUCk7XG4gIH1cblxuICAvKipcbiAgKiBSZXNldCBibG9ja2luZyBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgcmVzZXQodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5SRVNFVCk7XG4gIH1cblxuICAvKipcbiAgKiBSZXNldCBibG9ja2luZyBmb3IgYWxsIEJsb2NrVUkgaW5zdGFuY2VzXG4gICovXG4gIHJlc2V0R2xvYmFsKCk6IHZvaWQge1xuICAgIHRoaXMuZ2xvYmFsRGlzcGF0Y2gucmVzZXRHbG9iYWwoKTtcbiAgfVxuXG4gIC8qKlxuICAqIFVwZGF0ZXMgbWVzc2FnZSBmb3IgZ2l2ZW4gQmxvY2tVSSBpbnN0YW5jZSBvciBpbnN0YW5jZXNcbiAgKi9cbiAgdXBkYXRlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10sIG1lc3NhZ2U6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5VUERBVEUsIG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICogVW5zdWJzY3JpYmVzIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICB1bnN1YnNjcmliZSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlVOU1VCU0NSSUJFKTtcbiAgfVxuXG4gIC8qKlxuICAqIENoZWNrcyBpZiBCbG9ja1VJIGlzIGFjdGl2ZWx5IGJsb2NraW5nXG4gICovXG4gIGlzQWN0aXZlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10gPSBudWxsKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IHRhcmdldCA/IHRoaXMudG9BcnJheSh0YXJnZXQpIDogbnVsbDtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLmJsb2NrVUlJbnN0YW5jZS5ibG9ja1VJSW5zdGFuY2VzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGluc3RhbmNlcykuc29tZSgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2tleV0uaXNBY3RpdmU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRzLmluZGV4T2YoaW5zdGFuY2VzW2tleV0ubmFtZSkgPj0gMCAmJiBpbnN0YW5jZXNba2V5XS5pc0FjdGl2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2godGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdLCB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U/OiBhbnkpIHtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLnRvQXJyYXkodGFyZ2V0KTtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChpID0+IHRoaXMuYmxvY2tVSUluc3RhbmNlLmRlY29yYXRlKGkpW3R5cGVdKG1lc3NhZ2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9BcnJheSh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gW10pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBbdGFyZ2V0XSA6IHRhcmdldDtcbiAgfVxufVxuIl19