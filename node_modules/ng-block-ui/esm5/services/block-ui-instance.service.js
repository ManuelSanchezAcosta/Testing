import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';
import * as ɵngcc0 from '@angular/core';
var BlockUIInstanceService = /** @class */ (function () {
    function BlockUIInstanceService() {
        this.blockUISettings = {};
        this.blockUIInstances = {};
        this.blockUISubject = new ReplaySubject(1);
        this.blockUIObservable = this.blockUISubject.asObservable();
        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));
    }
    BlockUIInstanceService.prototype.getSettings = function () {
        return this.blockUISettings;
    };
    BlockUIInstanceService.prototype.updateSettings = function (settings) {
        if (settings === void 0) { settings = {}; }
        this.blockUISettings = __assign(__assign({}, this.blockUISettings), settings);
    };
    BlockUIInstanceService.prototype.decorate = function (name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        var blockUI = {
            name: name,
            isActive: false,
            blockCount: 0,
            start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),
            update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),
            stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),
            reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),
            resetGlobal: this.dispatch(this.blockUISubject, BlockUIActions.RESET_GLOBAL, name),
            unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)
        };
        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;
        return blockUI;
    };
    BlockUIInstanceService.prototype.observe = function () {
        return this.blockUIObservable;
    };
    BlockUIInstanceService.prototype.clearInstance = function (instanceName) {
        this.dispatch(this.blockUISubject, BlockUIActions.RESET, instanceName);
    };
    BlockUIInstanceService.prototype.blockUIMiddleware = function (_a) {
        var action = _a.action, name = _a.name;
        var isActive = null;
        switch (action) {
            case (BlockUIActions.START):
                isActive = true;
                break;
            case (BlockUIActions.STOP):
            case (BlockUIActions.RESET):
                isActive = false;
                break;
        }
        if (isActive !== null) {
            this.blockUIInstances[name].isActive = isActive;
        }
    };
    BlockUIInstanceService.prototype.dispatch = function (subject, action, name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        return function (message) {
            subject.next({
                name: name,
                action: action,
                message: message
            });
        };
    };
BlockUIInstanceService.ɵfac = function BlockUIInstanceService_Factory(t) { return new (t || BlockUIInstanceService)(); };
BlockUIInstanceService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIInstanceService, factory: function (t) { return BlockUIInstanceService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIInstanceService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return BlockUIInstanceService;
}());
export { BlockUIInstanceService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaW5zdGFuY2Uuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmctYmxvY2stdWkvc2VydmljZXMvYmxvY2stdWktaW5zdGFuY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQzs7QUFPakY7QUFDb0IsSUFLbEI7QUFDa0IsUUFObEIsb0JBQWUsR0FBMEIsRUFBRSxDQUFDO0FBQzlDLFFBQUUscUJBQWdCLEdBQVEsRUFBRSxDQUFDO0FBQzdCLFFBQVUsbUJBQWMsR0FBdUIsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEUsUUFBVSxzQkFBaUIsR0FBb0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRixRQUVJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLElBQUUsQ0FBQztBQUNILElBQ0UsNENBQVcsR0FBWDtBQUFjLFFBQ1osT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ2hDLElBQUUsQ0FBQztBQUVILElBQUUsK0NBQWMsR0FBZCxVQUFlLFFBQW9DO0FBQUksUUFBeEMseUJBQUEsRUFBQSxhQUFvQztBQUFJLFFBQ3JELElBQUksQ0FBQyxlQUFlLHlCQUFRLElBQUksQ0FBQyxlQUFlLEdBQUssUUFBUSxDQUFFLENBQUM7QUFDcEUsSUFBRSxDQUFDO0FBRUgsSUFBRSx5Q0FBUSxHQUFSLFVBQVMsSUFBaUM7QUFBSSxRQUFyQyxxQkFBQSxFQUFBLHlCQUFpQztBQUFJLFFB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Z0RBQ0Q7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQXhFRCxJQXdFQztBQUNELFNBekVhLHNCQUFzQjtBQUNsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJsb2NrVUlBY3Rpb25zIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWFjdGlvbnMuY29uc3RhbnQnO1xuaW1wb3J0IHsgQmxvY2tVSURlZmF1bHROYW1lIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Jsb2NrLXVpLWRlZmF1bHQtbmFtZS5jb25zdGFudCc7XG5pbXBvcnQgeyBOZ0Jsb2NrVUkgfSBmcm9tICcuLi9tb2RlbHMvYmxvY2stdWkubW9kZWwnO1xuaW1wb3J0IHsgQmxvY2tVSVNldHRpbmdzIH0gZnJvbSAnLi4vbW9kZWxzL2Jsb2NrLXVpLXNldHRpbmdzLm1vZGVsJztcbmltcG9ydCB7IEJsb2NrVUlFdmVudCB9IGZyb20gJy4uL21vZGVscy9ibG9jay11aS1ldmVudC5tb2RlbCc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlJbnN0YW5jZVNlcnZpY2Uge1xuICBibG9ja1VJU2V0dGluZ3M6IEJsb2NrVUlTZXR0aW5ncyB8IGFueSA9IHt9O1xuICBibG9ja1VJSW5zdGFuY2VzOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBibG9ja1VJU3ViamVjdDogUmVwbGF5U3ViamVjdDxhbnk+ID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG4gIHByaXZhdGUgYmxvY2tVSU9ic2VydmFibGU6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuYmxvY2tVSVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ibG9ja1VJT2JzZXJ2YWJsZS5zdWJzY3JpYmUodGhpcy5ibG9ja1VJTWlkZGxld2FyZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGdldFNldHRpbmdzKCk6IEJsb2NrVUlTZXR0aW5ncyB8IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tVSVNldHRpbmdzO1xuICB9XG5cbiAgdXBkYXRlU2V0dGluZ3Moc2V0dGluZ3M6IEJsb2NrVUlTZXR0aW5ncyB8IGFueSA9IHt9KTogdm9pZCB7XG4gICAgdGhpcy5ibG9ja1VJU2V0dGluZ3MgPSB7IC4uLnRoaXMuYmxvY2tVSVNldHRpbmdzLCAuLi5zZXR0aW5ncyB9O1xuICB9XG5cbiAgZGVjb3JhdGUobmFtZTogc3RyaW5nID0gQmxvY2tVSURlZmF1bHROYW1lKTogTmdCbG9ja1VJIHtcbiAgICBjb25zdCBibG9ja1VJID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgIGJsb2NrQ291bnQ6IDAsXG4gICAgICBzdGFydDogdGhpcy5kaXNwYXRjaCh0aGlzLmJsb2NrVUlTdWJqZWN0LCBCbG9ja1VJQWN0aW9ucy5TVEFSVCwgbmFtZSksXG4gICAgICB1cGRhdGU6IHRoaXMuZGlzcGF0Y2godGhpcy5ibG9ja1VJU3ViamVjdCwgQmxvY2tVSUFjdGlvbnMuVVBEQVRFLCBuYW1lKSxcbiAgICAgIHN0b3A6IHRoaXMuZGlzcGF0Y2godGhpcy5ibG9ja1VJU3ViamVjdCwgQmxvY2tVSUFjdGlvbnMuU1RPUCwgbmFtZSksXG4gICAgICByZXNldDogdGhpcy5kaXNwYXRjaCh0aGlzLmJsb2NrVUlTdWJqZWN0LCBCbG9ja1VJQWN0aW9ucy5SRVNFVCwgbmFtZSksXG4gICAgICByZXNldEdsb2JhbDogdGhpcy5kaXNwYXRjaCh0aGlzLmJsb2NrVUlTdWJqZWN0LCBCbG9ja1VJQWN0aW9ucy5SRVNFVF9HTE9CQUwsIG5hbWUpLFxuICAgICAgdW5zdWJzY3JpYmU6IHRoaXMuZGlzcGF0Y2godGhpcy5ibG9ja1VJU3ViamVjdCwgQmxvY2tVSUFjdGlvbnMuVU5TVUJTQ1JJQkUsIG5hbWUpXG4gICAgfSBhcyBOZ0Jsb2NrVUk7XG5cbiAgICB0aGlzLmJsb2NrVUlJbnN0YW5jZXNbbmFtZV0gPSB0aGlzLmJsb2NrVUlJbnN0YW5jZXNbbmFtZV0gfHwgYmxvY2tVSTtcblxuICAgIHJldHVybiBibG9ja1VJO1xuICB9XG5cbiAgb2JzZXJ2ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmJsb2NrVUlPYnNlcnZhYmxlO1xuICB9XG5cbiAgY2xlYXJJbnN0YW5jZShpbnN0YW5jZU5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuZGlzcGF0Y2godGhpcy5ibG9ja1VJU3ViamVjdCwgQmxvY2tVSUFjdGlvbnMuUkVTRVQsIGluc3RhbmNlTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIGJsb2NrVUlNaWRkbGV3YXJlKHsgYWN0aW9uLCBuYW1lIH06IEJsb2NrVUlFdmVudCk6IHZvaWQge1xuICAgIGxldCBpc0FjdGl2ZTogYm9vbGVhbiA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAoQmxvY2tVSUFjdGlvbnMuU1RBUlQpOlxuICAgICAgICBpc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIChCbG9ja1VJQWN0aW9ucy5TVE9QKTpcbiAgICAgIGNhc2UgKEJsb2NrVUlBY3Rpb25zLlJFU0VUKTpcbiAgICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGlzQWN0aXZlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmJsb2NrVUlJbnN0YW5jZXNbbmFtZV0uaXNBY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRpc3BhdGNoKHN1YmplY3Q6IFJlcGxheVN1YmplY3Q8YW55PiwgYWN0aW9uOiBCbG9ja1VJQWN0aW9ucywgbmFtZTogc3RyaW5nID0gQmxvY2tVSURlZmF1bHROYW1lKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiAobWVzc2FnZT86IGFueSk6IHZvaWQgPT4ge1xuICAgICAgc3ViamVjdC5uZXh0KHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBtZXNzYWdlXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG4iXX0=