import { __assign, __decorate } from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { BlockUIModule } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import { BlockUIInterceptor } from './block-ui-http.interceptor';
// Needed for AOT compiling
import * as ɵngcc0 from '@angular/core';
export var BlockUIHttpModuleSettings = new InjectionToken('BlockUIHttpModuleSettings');
export function provideSettingsInstance(settings) {
    return {
        settings: __assign({ blockAllRequestsInProgress: true }, settings)
    };
}
var BlockUIHttpModule = /** @class */ (function () {
    function BlockUIHttpModule() {
    }
    BlockUIHttpModule_1 = BlockUIHttpModule;
    BlockUIHttpModule.forRoot = function (settings) {
        if (settings === void 0) { settings = {}; }
        return {
            ngModule: BlockUIHttpModule_1,
            providers: [
                {
                    provide: BlockUIHttpModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIHttpSettings,
                    useFactory: provideSettingsInstance,
                    deps: [BlockUIHttpModuleSettings]
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BlockUIInterceptor,
                    multi: true
                }
            ]
        };
    };
    var BlockUIHttpModule_1;
BlockUIHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUIHttpModule });
BlockUIHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUIHttpModule_Factory(t) { return new (t || BlockUIHttpModule)(); }, imports: [[BlockUIModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIHttpModule, { imports: function () { return [BlockUIModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIHttpModule, [{
        type: NgModule,
        args: [{
                imports: [BlockUIModule]
            }]
    }], function () { return []; }, null); })();
    return BlockUIHttpModule;
}());
export { BlockUIHttpModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUdqRSwyQkFBMkI7O0FBQzNCLE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUFTLDJCQUEyQixDQUFDLENBQUM7QUFFakcsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFFBQXNCO0FBQUksSUFDaEUsT0FBTztBQUNULFFBQUksUUFBUSxhQUNOLDBCQUEwQixFQUFFLElBQUksSUFDN0IsUUFBUSxDQUNaO0FBQ0wsS0FBRyxDQUFDO0FBQ0osQ0FBQztBQUtEO0FBQ29CLElBRHBCO0FBQStCLElBc0IvQixDQUFDO0FBQ0QsMEJBdkJhLGlCQUFpQjtBQUFFLElBQ3ZCLHlCQUFPLEdBQWQsVUFBZSxRQUEyQjtBQUFJLFFBQS9CLHlCQUFBLEVBQUEsYUFBMkI7QUFBSSxRQUM1QyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsbUJBQWlCO0FBQ2pDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHlCQUF5QjtBQUM1QyxvQkFBVSxRQUFRLEVBQUUsUUFBUTtBQUM1QixpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLG1CQUFtQjtBQUN0QyxvQkFBVSxVQUFVLEVBQUUsdUJBQXVCO0FBQzdDLG9CQUFVLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDO0FBQzNDLGlCQUFTO0FBQ1QsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsaUJBQWlCO0FBQ3BDLG9CQUFVLFFBQVEsRUFBRSxrQkFBa0I7QUFDdEMsb0JBQVUsS0FBSyxFQUFFLElBQUk7QUFDckIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0Y7SUF0QlksaUJBQWlCLDhDQUg3QixRQUFRLENBQUM7V0FDUixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFDekIsQ0FBQyxRQUNXLGlCQUFpQixDQXNCN0I7Ozs7Ozs7Z0RBQ0Q7QUFBQyxJQURELHdCQUFDO0FBQ0EsQ0FEQSxBQXRCRCxJQXNCQztBQUNELFNBdkJhLGlCQUFpQjtBQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBCbG9ja1VJTW9kdWxlLCBIdHRwU2V0dGluZ3MgfSBmcm9tICduZy1ibG9jay11aSc7XG5pbXBvcnQgeyBCbG9ja1VJSHR0cFNldHRpbmdzIH0gZnJvbSAnLi9ibG9jay11aS1odHRwLXNldHRpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmxvY2tVSUludGVyY2VwdG9yIH0gZnJvbSAnLi9ibG9jay11aS1odHRwLmludGVyY2VwdG9yJztcblxuXG4vLyBOZWVkZWQgZm9yIEFPVCBjb21waWxpbmdcbmV4cG9ydCBjb25zdCBCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0Jsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVTZXR0aW5nc0luc3RhbmNlKHNldHRpbmdzOiBIdHRwU2V0dGluZ3MpOiBCbG9ja1VJSHR0cFNldHRpbmdzIHtcbiAgcmV0dXJuIHtcbiAgICBzZXR0aW5nczoge1xuICAgICAgYmxvY2tBbGxSZXF1ZXN0c0luUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAuLi5zZXR0aW5nc1xuICAgIH1cbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0Jsb2NrVUlNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlIdHRwTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxCbG9ja1VJSHR0cE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQmxvY2tVSUh0dHBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MsXG4gICAgICAgICAgdXNlVmFsdWU6IHNldHRpbmdzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJSHR0cFNldHRpbmdzLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IHByb3ZpZGVTZXR0aW5nc0luc3RhbmNlLFxuICAgICAgICAgIGRlcHM6IFtCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICAgICAgdXNlQ2xhc3M6IEJsb2NrVUlJbnRlcmNlcHRvcixcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19