import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-block-ui';
import * as ɵngcc2 from './block-ui-http-settings.service';
var BlockUIInterceptor = /** @class */ (function () {
    function BlockUIInterceptor(blockUIService, blockUIHttpSettings) {
        this.blockUIService = blockUIService;
        this.blockUIHttpSettings = blockUIHttpSettings;
        this.activeHttpRequests = 0;
    }
    BlockUIInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        var active = false;
        if (this.shouldBlock(request)) {
            this.blockUIService.start(BLOCKUI_DEFAULT);
        }
        return next.handle(request)
            .pipe(finalize(function () {
            if (_this.shouldBlock(request)) {
                var blockAllRequestsInProgress = _this.blockUIHttpSettings.settings.blockAllRequestsInProgress;
                var method = blockAllRequestsInProgress ? 'stop' : 'reset';
                _this.blockUIService[method](BLOCKUI_DEFAULT);
            }
        }));
    };
    BlockUIInterceptor.prototype.shouldBlock = function (request) {
        var method = request.method, urlWithParams = request.urlWithParams;
        var settings = this.blockUIHttpSettings.settings;
        var requestFilters = settings.requestFilters || [];
        return !requestFilters.some(function (f) {
            if (f && f.method && f.url) {
                return f.method.toUpperCase() === method && f.url.test(urlWithParams);
            }
            else if (typeof f === 'function') {
                return f(request);
            }
            return f.test(urlWithParams);
        });
    };
    BlockUIInterceptor.ctorParameters = function () { return [
        { type: BlockUIService },
        { type: BlockUIHttpSettings }
    ]; };
BlockUIInterceptor.ɵfac = function BlockUIInterceptor_Factory(t) { return new (t || BlockUIInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIService), ɵngcc0.ɵɵinject(ɵngcc2.BlockUIHttpSettings)); };
BlockUIInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIInterceptor, factory: function (t) { return BlockUIInterceptor.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIService }, { type: ɵngcc2.BlockUIHttpSettings }]; }, null); })();
    return BlockUIInterceptor;
}());
export { BlockUIInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZXMiOlsibmctYmxvY2stdWkvaHR0cC9ibG9jay11aS1odHRwLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUd2RTtBQUFzRCxJQUdwRCw0QkFDVSxjQUE4QixFQUM5QixtQkFBd0M7QUFDakQsUUFGUyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxRQUMvQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQ3BELFFBQ0ksSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFDSCxJQUNFLHNDQUFTLEdBQVQsVUFBVSxPQUF5QixFQUFFLElBQWlCO0FBQUksUUFBMUQsaUJBaUJDO0FBQ0gsUUFqQkksSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO0FBQ2hDLFFBQ0ksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ25DLFlBQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUMvQixhQUFPLElBQUksQ0FDSCxRQUFRLENBQUM7QUFDWCxZQUFJLElBQUksS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN6QyxnQkFBb0IsSUFBQSwwRkFBMEIsQ0FBdUM7QUFDckYsZ0JBQVksSUFBTSxNQUFNLEdBQVcsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pGLGdCQUFZLEtBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekQsYUFBVztBQUNYLFFBQVEsQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNSLElBQUUsQ0FBQztBQUVILElBQUUsd0NBQVcsR0FBWCxVQUFZLE9BQXlCO0FBQUksUUFDL0IsSUFBQSx1QkFBTSxFQUFFLHFDQUFhLENBQWE7QUFDOUMsUUFBWSxJQUFBLDRDQUFRLENBQThCO0FBQ2xELFFBQUksSUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7QUFDekQsUUFDSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQU07QUFBSSxZQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7QUFDbEMsZ0JBQVEsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM5RSxhQUFPO0FBQUMsaUJBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDMUMsZ0JBQVEsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUIsYUFBTztBQUNQLFlBQ00sT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ25DLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDRjtBQUM2RCxnQkF6Q2xDLGNBQWM7QUFDeEMsZ0JBQStCLG1CQUFtQjtBQUNsRDtJQU5XLGtCQUFrQix3QkFEOUIsVUFBVSxFQUFFLFFBQ0Esa0JBQWtCLENBNEM5Qjs7OztxSEFDRDtBQUFDLElBREQseUJBQUM7QUFDQSxDQURBLEFBNUNELElBNENDO0FBQ0QsU0E3Q2Esa0JBQWtCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBFdmVudCxcbiAgSHR0cEludGVyY2VwdG9yXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmxvY2tVSVNlcnZpY2UsIEJMT0NLVUlfREVGQVVMVCB9IGZyb20gJ25nLWJsb2NrLXVpJztcbmltcG9ydCB7IEJsb2NrVUlIdHRwU2V0dGluZ3MgfSBmcm9tICcuL2Jsb2NrLXVpLWh0dHAtc2V0dGluZ3Muc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCbG9ja1VJSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIGFjdGl2ZUh0dHBSZXF1ZXN0czogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSVNlcnZpY2U6IEJsb2NrVUlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYmxvY2tVSUh0dHBTZXR0aW5nczogQmxvY2tVSUh0dHBTZXR0aW5nc1xuICApIHtcbiAgICB0aGlzLmFjdGl2ZUh0dHBSZXF1ZXN0cyA9IDA7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgbGV0IGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkQmxvY2socmVxdWVzdCkpIHtcbiAgICAgIHRoaXMuYmxvY2tVSVNlcnZpY2Uuc3RhcnQoQkxPQ0tVSV9ERUZBVUxUKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdClcbiAgICAgIC5waXBlKFxuICAgICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQmxvY2socmVxdWVzdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvY2tBbGxSZXF1ZXN0c0luUHJvZ3Jlc3MgfSA9IHRoaXMuYmxvY2tVSUh0dHBTZXR0aW5ncy5zZXR0aW5ncztcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZDogc3RyaW5nID0gYmxvY2tBbGxSZXF1ZXN0c0luUHJvZ3Jlc3MgPyAnc3RvcCcgOiAncmVzZXQnO1xuICAgICAgICAgICAgdGhpcy5ibG9ja1VJU2VydmljZVttZXRob2RdKEJMT0NLVUlfREVGQVVMVCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHNob3VsZEJsb2NrKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICBjb25zdCB7IG1ldGhvZCwgdXJsV2l0aFBhcmFtcyB9ID0gcmVxdWVzdDtcbiAgICBjb25zdCB7IHNldHRpbmdzIH0gPSB0aGlzLmJsb2NrVUlIdHRwU2V0dGluZ3M7XG4gICAgY29uc3QgcmVxdWVzdEZpbHRlcnMgPSBzZXR0aW5ncy5yZXF1ZXN0RmlsdGVycyB8fCBbXTtcblxuICAgIHJldHVybiAhcmVxdWVzdEZpbHRlcnMuc29tZSgoZjogYW55KSA9PiB7XG4gICAgICBpZiAoZiAmJiBmLm1ldGhvZCAmJiBmLnVybCkge1xuICAgICAgICByZXR1cm4gZi5tZXRob2QudG9VcHBlckNhc2UoKSA9PT0gbWV0aG9kICYmIGYudXJsLnRlc3QodXJsV2l0aFBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZi50ZXN0KHVybFdpdGhQYXJhbXMpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=