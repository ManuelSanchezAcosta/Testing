{"ast":null,"code":"import _slicedToArray from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Directive, ElementRef, Input, Output, EventEmitter, forwardRef, HostListener, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar FlatpickrDefaults = function FlatpickrDefaults() {\n  _classCallCheck(this, FlatpickrDefaults);\n\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  this.altFormat = 'F j, Y';\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n\n  this.altInput = false;\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n\n  this.altInputClass = '';\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n\n  this.allowInput = false;\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n\n  this.appendTo = undefined;\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n\n  this.ariaDateFormat = 'F j, Y';\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n\n  this.clickOpens = true;\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n\n  this.dateFormat = 'Y-m-d';\n  /**\n   * Initial value of the hour element.\n   */\n\n  this.defaultHour = 12;\n  /**\n   * Initial value of the minute element.\n   */\n\n  this.defaultMinute = 0;\n  /**\n   * Initial value of the seconds element.\n   */\n\n  this.defaultSeconds = 0;\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n\n  this.disable = [];\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n\n  this.disableMobile = false;\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n\n  this.enable = [];\n  /**\n   * Enables time picker.\n   */\n\n  this.enableTime = false;\n  /**\n   * Enables seconds in the time picker.\n   */\n\n  this.enableSeconds = false;\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n\n  this.formatDate = undefined;\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n\n  this.hourIncrement = 1;\n  /**\n   * Displays the calendar inline.\n   */\n\n  this.inline = false;\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n\n  this.maxDate = undefined;\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n\n  this.minDate = undefined;\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n\n  this.minuteIncrement = 5;\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n\n  this.mode = 'single';\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n\n  this.nextArrow = '>';\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n\n  this.noCalendar = false;\n  /**\n   * Default now to the current date\n   */\n\n  this.now = new Date();\n  /**\n   * HTML for the left arrow icon.\n   */\n\n  this.prevArrow = '<';\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n\n  this.shorthandCurrentMonth = false;\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n\n  this.static = false;\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n\n  this.time24hr = false;\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n\n  this.utc = false;\n  /**\n   * Enables display of week numbers in calendar.\n   */\n\n  this.weekNumbers = false;\n  /**\n   * Custom elements and input groups.\n   */\n\n  this.wrap = false;\n  /**\n   * Array of plugin instances to use.\n   */\n\n  this.plugins = [];\n  /**\n   * The locale object or string to use for the locale.\n   */\n\n  this.locale = 'default';\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n\n  this.convertModelValue = false;\n  /**\n   * The number of months shown.\n   */\n\n  this.showMonths = 1;\n};\n\nFlatpickrDefaults.ɵfac = function FlatpickrDefaults_Factory(t) {\n  return new (t || FlatpickrDefaults)();\n};\n\nFlatpickrDefaults.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FlatpickrDefaults,\n  factory: FlatpickrDefaults.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrDefaults, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nFLATPICKR_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return FlatpickrDirective;\n  }),\n  //tslint:disable-line\n  multi: true\n};\n\nvar FlatpickrDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} elm\n   * @param {?} defaults\n   * @param {?} renderer\n   */\n  function FlatpickrDirective(elm, defaults, renderer) {\n    _classCallCheck(this, FlatpickrDirective);\n\n    this.elm = elm;\n    this.defaults = defaults;\n    this.renderer = renderer;\n    /**\n     * Gets triggered once the calendar is in a ready state\n     */\n\n    this.flatpickrReady = new EventEmitter();\n    /**\n     * Gets triggered when the user selects a date, or changes the time on a selected date.\n     */\n\n    this.flatpickrChange = new EventEmitter();\n    /**\n     * Gets triggered when the input value is updated with a new date string.\n     */\n\n    this.flatpickrValueUpdate = new EventEmitter();\n    /**\n     * Gets triggered when the calendar is opened.\n     */\n\n    this.flatpickrOpen = new EventEmitter();\n    /**\n     * Gets triggered when the calendar is closed.\n     */\n\n    this.flatpickrClose = new EventEmitter();\n    /**\n     * Gets triggered when the month is changed, either by the user or programmatically.\n     */\n\n    this.flatpickrMonthChange = new EventEmitter();\n    /**\n     * Gets triggered when the year is changed, either by the user or programmatically.\n     */\n\n    this.flatpickrYearChange = new EventEmitter();\n    /**\n     * Take full control of every date cell with this output\n     */\n\n    this.flatpickrDayCreate = new EventEmitter();\n    this.isDisabled = false;\n\n    this.onChangeFn = function () {};\n\n    this.onTouchedFn = function () {};\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FlatpickrDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      var\n      /** @type {?} */\n      options = {\n        altFormat: this.altFormat,\n        altInput: this.altInput,\n        altInputClass: this.altInputClass,\n        allowInput: this.allowInput,\n        appendTo: this.appendTo,\n        ariaDateFormat: this.ariaDateFormat,\n        clickOpens: this.clickOpens,\n        dateFormat: this.dateFormat,\n        defaultHour: this.defaultHour,\n        defaultMinute: this.defaultMinute,\n        defaultSeconds: this.defaultSeconds,\n        disable: this.disable,\n        disableMobile: this.disableMobile,\n        enable: this.enable,\n        enableTime: this.enableTime,\n        enableSeconds: this.enableSeconds,\n        formatDate: this.formatDate,\n        hourIncrement: this.hourIncrement,\n        defaultDate: this.initialValue,\n        inline: this.inline,\n        maxDate: this.maxDate,\n        minDate: this.minDate,\n        minuteIncrement: this.minuteIncrement,\n        mode: this.mode,\n        nextArrow: this.nextArrow,\n        noCalendar: this.noCalendar,\n        now: this.now,\n        parseDate: this.parseDate,\n        prevArrow: this.prevArrow,\n        shorthandCurrentMonth: this.shorthandCurrentMonth,\n        showMonths: this.showMonths,\n        static: this.static,\n        time24hr: this.time24hr,\n        weekNumbers: this.weekNumbers,\n        getWeek: this.getWeek,\n        wrap: this.wrap,\n        plugins: this.plugins,\n        locale: this.locale,\n        onChange: function onChange(selectedDates, dateString, instance) {\n          _this.flatpickrChange.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onOpen: function onOpen(selectedDates, dateString, instance) {\n          _this.flatpickrOpen.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onClose: function onClose(selectedDates, dateString, instance) {\n          _this.flatpickrClose.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onMonthChange: function onMonthChange(selectedDates, dateString, instance) {\n          _this.flatpickrMonthChange.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onYearChange: function onYearChange(selectedDates, dateString, instance) {\n          _this.flatpickrYearChange.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onReady: function onReady(selectedDates, dateString, instance) {\n          _this.flatpickrReady.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onValueUpdate: function onValueUpdate(selectedDates, dateString, instance) {\n          _this.flatpickrValueUpdate.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance\n          });\n        },\n        onDayCreate: function onDayCreate(selectedDates, dateString, instance, dayElement) {\n          _this.flatpickrDayCreate.emit({\n            selectedDates: selectedDates,\n            dateString: dateString,\n            instance: instance,\n            dayElement: dayElement\n          });\n        }\n      };\n      Object.keys(options).forEach(function (key) {\n        if (typeof options[key] === 'undefined') {\n          options[key] =\n          /** @type {?} */\n          _this.defaults[key];\n        }\n      });\n      options.time_24hr = options.time24hr;\n      this.instance =\n      /** @type {?} */\n      flatpickr(this.elm.nativeElement, options);\n      this.setDisabledState(this.isDisabled);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this2 = this;\n\n      if (this.instance) {\n        Object.keys(changes).forEach(function (inputKey) {\n          _this2.instance.set(\n          /** @type {?} */\n          inputKey,\n          /** @type {?} */\n          _this2[inputKey]);\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.instance.destroy();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var\n      /** @type {?} */\n      convertedValue = value;\n\n      if (this.convertModelValue && this.mode === 'range' && value) {\n        convertedValue = [value.from, value.to];\n      }\n\n      if (this.instance) {\n        this.instance.setDate(convertedValue);\n      } else {\n        // flatpickr hasn't been initialised yet, store the value for later use\n        this.initialValue = convertedValue;\n      }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouchedFn = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n\n      if (this.instance) {\n        if (this.isDisabled) {\n          this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n        } else {\n          this.renderer.removeAttribute(this.instance._input, 'disabled');\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputChanged\",\n    value: function inputChanged() {\n      var _this3 = this;\n\n      var\n      /** @type {?} */\n      value = this.elm.nativeElement.value;\n\n      if (this.convertModelValue && typeof value === 'string') {\n        switch (this.mode) {\n          case 'multiple':\n            var\n            /** @type {?} */\n            dates = value.split('; ').map(function (str) {\n              return _this3.instance.parseDate(str, _this3.instance.config.dateFormat, !_this3.instance.config.enableTime);\n            });\n            this.onChangeFn(dates);\n            break;\n\n          case 'range':\n            var _value$split$map = value.split(this.instance.l10n.rangeSeparator).map(function (str) {\n              return _this3.instance.parseDate(str, _this3.instance.config.dateFormat, !_this3.instance.config.enableTime);\n            }),\n                _value$split$map2 = _slicedToArray(_value$split$map, 2),\n                from = _value$split$map2[0],\n                to = _value$split$map2[1];\n\n            this.onChangeFn({\n              from: from,\n              to: to\n            });\n            break;\n\n          case 'single':\n          default:\n            this.onChangeFn(this.instance.parseDate(value, this.instance.config.dateFormat, !this.instance.config.enableTime));\n        }\n      } else {\n        this.onChangeFn(value);\n      }\n    }\n  }]);\n\n  return FlatpickrDirective;\n}();\n\nFlatpickrDirective.ɵfac = function FlatpickrDirective_Factory(t) {\n  return new (t || FlatpickrDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FlatpickrDefaults), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nFlatpickrDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FlatpickrDirective,\n  selectors: [[\"\", \"mwlFlatpickr\", \"\"]],\n  hostBindings: function FlatpickrDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"blur\", function FlatpickrDirective_blur_HostBindingHandler() {\n        return ctx.onTouchedFn();\n      })(\"input\", function FlatpickrDirective_input_HostBindingHandler() {\n        return ctx.inputChanged();\n      });\n    }\n  },\n  inputs: {\n    altFormat: \"altFormat\",\n    altInput: \"altInput\",\n    altInputClass: \"altInputClass\",\n    allowInput: \"allowInput\",\n    appendTo: \"appendTo\",\n    ariaDateFormat: \"ariaDateFormat\",\n    clickOpens: \"clickOpens\",\n    dateFormat: \"dateFormat\",\n    defaultHour: \"defaultHour\",\n    defaultMinute: \"defaultMinute\",\n    defaultSeconds: \"defaultSeconds\",\n    disable: \"disable\",\n    disableMobile: \"disableMobile\",\n    enable: \"enable\",\n    enableTime: \"enableTime\",\n    enableSeconds: \"enableSeconds\",\n    formatDate: \"formatDate\",\n    hourIncrement: \"hourIncrement\",\n    inline: \"inline\",\n    maxDate: \"maxDate\",\n    minDate: \"minDate\",\n    minuteIncrement: \"minuteIncrement\",\n    mode: \"mode\",\n    nextArrow: \"nextArrow\",\n    noCalendar: \"noCalendar\",\n    now: \"now\",\n    parseDate: \"parseDate\",\n    prevArrow: \"prevArrow\",\n    shorthandCurrentMonth: \"shorthandCurrentMonth\",\n    showMonths: \"showMonths\",\n    static: \"static\",\n    time24hr: \"time24hr\",\n    weekNumbers: \"weekNumbers\",\n    getWeek: \"getWeek\",\n    wrap: \"wrap\",\n    plugins: \"plugins\",\n    locale: \"locale\",\n    convertModelValue: \"convertModelValue\"\n  },\n  outputs: {\n    flatpickrReady: \"flatpickrReady\",\n    flatpickrChange: \"flatpickrChange\",\n    flatpickrValueUpdate: \"flatpickrValueUpdate\",\n    flatpickrOpen: \"flatpickrOpen\",\n    flatpickrClose: \"flatpickrClose\",\n    flatpickrMonthChange: \"flatpickrMonthChange\",\n    flatpickrYearChange: \"flatpickrYearChange\",\n    flatpickrDayCreate: \"flatpickrDayCreate\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([FLATPICKR_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nFlatpickrDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FlatpickrDefaults\n  }, {\n    type: Renderer2\n  }];\n};\n\nFlatpickrDirective.propDecorators = {\n  altFormat: [{\n    type: Input\n  }],\n  altInput: [{\n    type: Input\n  }],\n  altInputClass: [{\n    type: Input\n  }],\n  allowInput: [{\n    type: Input\n  }],\n  appendTo: [{\n    type: Input\n  }],\n  ariaDateFormat: [{\n    type: Input\n  }],\n  clickOpens: [{\n    type: Input\n  }],\n  dateFormat: [{\n    type: Input\n  }],\n  defaultHour: [{\n    type: Input\n  }],\n  defaultMinute: [{\n    type: Input\n  }],\n  defaultSeconds: [{\n    type: Input\n  }],\n  disable: [{\n    type: Input\n  }],\n  disableMobile: [{\n    type: Input\n  }],\n  enable: [{\n    type: Input\n  }],\n  enableTime: [{\n    type: Input\n  }],\n  enableSeconds: [{\n    type: Input\n  }],\n  formatDate: [{\n    type: Input\n  }],\n  hourIncrement: [{\n    type: Input\n  }],\n  inline: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  minuteIncrement: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  nextArrow: [{\n    type: Input\n  }],\n  noCalendar: [{\n    type: Input\n  }],\n  now: [{\n    type: Input\n  }],\n  parseDate: [{\n    type: Input\n  }],\n  prevArrow: [{\n    type: Input\n  }],\n  shorthandCurrentMonth: [{\n    type: Input\n  }],\n  showMonths: [{\n    type: Input\n  }],\n  static: [{\n    type: Input\n  }],\n  time24hr: [{\n    type: Input\n  }],\n  weekNumbers: [{\n    type: Input\n  }],\n  getWeek: [{\n    type: Input\n  }],\n  wrap: [{\n    type: Input\n  }],\n  plugins: [{\n    type: Input\n  }],\n  locale: [{\n    type: Input\n  }],\n  convertModelValue: [{\n    type: Input\n  }],\n  flatpickrReady: [{\n    type: Output\n  }],\n  flatpickrChange: [{\n    type: Output\n  }],\n  flatpickrValueUpdate: [{\n    type: Output\n  }],\n  flatpickrOpen: [{\n    type: Output\n  }],\n  flatpickrClose: [{\n    type: Output\n  }],\n  flatpickrMonthChange: [{\n    type: Output\n  }],\n  flatpickrYearChange: [{\n    type: Output\n  }],\n  flatpickrDayCreate: [{\n    type: Output\n  }],\n  inputChanged: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mwlFlatpickr]',\n      providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n      host: {\n        // tslint:disable-line use-host-property-decorator\n        '(blur)': 'onTouchedFn()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FlatpickrDefaults\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    flatpickrReady: [{\n      type: Output\n    }],\n    flatpickrChange: [{\n      type: Output\n    }],\n    flatpickrValueUpdate: [{\n      type: Output\n    }],\n    flatpickrOpen: [{\n      type: Output\n    }],\n    flatpickrClose: [{\n      type: Output\n    }],\n    flatpickrMonthChange: [{\n      type: Output\n    }],\n    flatpickrYearChange: [{\n      type: Output\n    }],\n    flatpickrDayCreate: [{\n      type: Output\n    }],\n\n    /**\n     * @return {?}\n     */\n    inputChanged: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    altFormat: [{\n      type: Input\n    }],\n    altInput: [{\n      type: Input\n    }],\n    altInputClass: [{\n      type: Input\n    }],\n    allowInput: [{\n      type: Input\n    }],\n    appendTo: [{\n      type: Input\n    }],\n    ariaDateFormat: [{\n      type: Input\n    }],\n    clickOpens: [{\n      type: Input\n    }],\n    dateFormat: [{\n      type: Input\n    }],\n    defaultHour: [{\n      type: Input\n    }],\n    defaultMinute: [{\n      type: Input\n    }],\n    defaultSeconds: [{\n      type: Input\n    }],\n    disable: [{\n      type: Input\n    }],\n    disableMobile: [{\n      type: Input\n    }],\n    enable: [{\n      type: Input\n    }],\n    enableTime: [{\n      type: Input\n    }],\n    enableSeconds: [{\n      type: Input\n    }],\n    formatDate: [{\n      type: Input\n    }],\n    hourIncrement: [{\n      type: Input\n    }],\n    inline: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    minuteIncrement: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    nextArrow: [{\n      type: Input\n    }],\n    noCalendar: [{\n      type: Input\n    }],\n    now: [{\n      type: Input\n    }],\n    parseDate: [{\n      type: Input\n    }],\n    prevArrow: [{\n      type: Input\n    }],\n    shorthandCurrentMonth: [{\n      type: Input\n    }],\n    showMonths: [{\n      type: Input\n    }],\n    static: [{\n      type: Input\n    }],\n    time24hr: [{\n      type: Input\n    }],\n    weekNumbers: [{\n      type: Input\n    }],\n    getWeek: [{\n      type: Input\n    }],\n    wrap: [{\n      type: Input\n    }],\n    plugins: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }],\n    convertModelValue: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nUSER_DEFAULTS = new InjectionToken('flatpickr defaults');\n/**\n * @param {?} userDefaults\n * @return {?}\n */\n\nfunction defaultsFactory(userDefaults) {\n  var\n  /** @type {?} */\n  defaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\nvar FlatpickrModule = /*#__PURE__*/function () {\n  function FlatpickrModule() {\n    _classCallCheck(this, FlatpickrModule);\n  }\n\n  _createClass(FlatpickrModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * @param {?=} userDefaults\n     * @return {?}\n     */\n    value: function forRoot() {\n      var userDefaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: FlatpickrModule,\n        providers: [{\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        }, {\n          provide: FlatpickrDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }]\n      };\n    }\n  }]);\n\n  return FlatpickrModule;\n}();\n\nFlatpickrModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: FlatpickrModule\n});\nFlatpickrModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function FlatpickrModule_Factory(t) {\n    return new (t || FlatpickrModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FlatpickrModule, {\n    declarations: [FlatpickrDirective],\n    exports: [FlatpickrDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FlatpickrDirective],\n      exports: [FlatpickrDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { FlatpickrDefaults, USER_DEFAULTS, defaultsFactory, FlatpickrModule, FLATPICKR_CONTROL_VALUE_ACCESSOR as ɵa, FlatpickrDirective as ɵb };","map":{"version":3,"sources":["angularx-flatpickr/flatpickr-defaults.service.ts","angularx-flatpickr/flatpickr.directive.ts","angularx-flatpickr/flatpickr.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport type DisableEnableDate =\n  | string\n  | Date\n  | { from: Date | string; to: Date | string }\n  | ((date: Date) => boolean);\n\n// tslint:disable no-inferrable-types\n\nexport interface FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat?: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput?: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass?: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput?: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo?: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens?: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat?: string;\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number;\n  /**\n   * Initial value of the seconds element.\n   */\n  defaultSeconds?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable?: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile?: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable?: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime?: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds?: boolean;\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string;\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement?: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline?: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate?: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate?: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement?: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode?: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow?: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar?: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate?: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow?: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth?: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static?: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr?: boolean;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc?: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers?: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek?: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap?: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins?: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale?: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue?: boolean;\n\n  /**\n   * The number of months shown.\n   */\n  showMonths?: number;\n}\n\n@Injectable()\nexport class FlatpickrDefaults implements FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat: string = 'F j, Y';\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput: boolean = false;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass: string = '';\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput: boolean = false;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo: HTMLElement = undefined;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string = 'F j, Y';\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens: boolean = true;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat: string = 'Y-m-d';\n\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number = 12;\n\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number = 0;\n\n  /**\n   * Initial value of the seconds element.\n   */\n  defaultSeconds?: number = 0;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable: DisableEnableDate[] = [];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile: boolean = false;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable: DisableEnableDate[] = [];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime: boolean = false;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds: boolean = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string = undefined;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement: number = 1;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline: boolean = false;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate: string | Date = undefined;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate: string | Date = undefined;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement: number = 5;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode: 'single' | 'multiple' | 'range' = 'single';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow: string = '>';\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar: boolean = false;\n\n  /**\n   * Default now to the current date\n   */\n  now: Date | string | number = new Date();\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow: string = '<';\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth: boolean = false;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static: boolean = false;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr: boolean = false;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc: boolean = false;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers: boolean = false;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap: boolean = false;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins: any[] = [];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale: object | string = 'default';\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue: boolean = false;\n\n  /**\n   * The number of months shown.\n   */\n  showMonths: number = 1;\n}\n","import {\n  Directive,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  forwardRef,\n  HostListener,\n  Renderer2\n} from '@angular/core';\nimport {\n  FlatpickrDefaults,\n  DisableEnableDate\n} from './flatpickr-defaults.service';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n\nexport interface FlatPickrOutputOptions {\n  selectedDates: Date[];\n  dateString: string;\n  instance: any;\n}\n\nexport interface FlatPickrDayCreateOutputOptions\n  extends FlatPickrOutputOptions {\n  dayElement: HTMLElement;\n}\n\nexport const FLATPICKR_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => FlatpickrDirective), //tslint:disable-line\n  multi: true\n};\n\n@Directive({\n  selector: '[mwlFlatpickr]',\n  providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n  host: {\n    // tslint:disable-line use-host-property-decorator\n    '(blur)': 'onTouchedFn()'\n  }\n})\nexport class FlatpickrDirective\n  implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  @Input() altFormat: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  @Input() altInput: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  @Input() altInputClass: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  @Input() allowInput: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  @Input() appendTo: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  @Input() ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  @Input() clickOpens: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  @Input() dateFormat: string;\n\n  /**\n   * Initial value of the hour element.\n   */\n  @Input() defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  @Input() defaultMinute?: number;\n\n  /**\n   * Initial value of the seconds element.\n   */\n  @Input() defaultSeconds?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  @Input() disable: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  @Input() disableMobile: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  @Input() enable: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  @Input() enableTime: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  @Input() enableSeconds: boolean;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  @Input() formatDate?: (value: any) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  @Input() hourIncrement: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  @Input() inline: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  @Input() maxDate: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Input() minDate: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  @Input() minuteIncrement: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  @Input() mode: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  @Input() nextArrow: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  @Input() noCalendar: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  @Input() now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  @Input() parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  @Input() prevArrow: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  @Input() shorthandCurrentMonth: boolean;\n\n  /**\n   * The number of months shown.\n   */\n  @Input() showMonths: number;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  @Input() static: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  @Input() time24hr: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  @Input() weekNumbers: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  @Input() getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  @Input() wrap: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  @Input() plugins: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  @Input() locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  @Input() convertModelValue: boolean;\n\n  /**\n   * Gets triggered once the calendar is in a ready state\n   */\n  @Output()\n  flatpickrReady: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the user selects a date, or changes the time on a selected date.\n   */\n  @Output()\n  flatpickrChange: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the input value is updated with a new date string.\n   */\n  @Output()\n  flatpickrValueUpdate: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is opened.\n   */\n  @Output()\n  flatpickrOpen: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is closed.\n   */\n  @Output()\n  flatpickrClose: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the month is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrMonthChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the year is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrYearChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Take full control of every date cell with this output\n   */\n  @Output()\n  flatpickrDayCreate: EventEmitter<\n    FlatPickrDayCreateOutputOptions\n  > = new EventEmitter();\n\n  private instance: flatpickr.Instance;\n  private isDisabled = false;\n  private initialValue: any;\n\n  onChangeFn: (value: any) => void = () => {}; // tslint:disable-line\n\n  onTouchedFn = () => {};\n\n  constructor(\n    private elm: ElementRef,\n    private defaults: FlatpickrDefaults,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: any = {\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      allowInput: this.allowInput,\n      appendTo: this.appendTo,\n      ariaDateFormat: this.ariaDateFormat,\n      clickOpens: this.clickOpens,\n      dateFormat: this.dateFormat,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      defaultSeconds: this.defaultSeconds,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableTime: this.enableTime,\n      enableSeconds: this.enableSeconds,\n      formatDate: this.formatDate,\n      hourIncrement: this.hourIncrement,\n      defaultDate: this.initialValue,\n      inline: this.inline,\n      maxDate: this.maxDate,\n      minDate: this.minDate,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      nextArrow: this.nextArrow,\n      noCalendar: this.noCalendar,\n      now: this.now,\n      parseDate: this.parseDate,\n      prevArrow: this.prevArrow,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      showMonths: this.showMonths,\n      static: this.static,\n      time24hr: this.time24hr,\n      weekNumbers: this.weekNumbers,\n      getWeek: this.getWeek,\n      wrap: this.wrap,\n      plugins: this.plugins,\n      locale: this.locale,\n      onChange: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrChange.emit({ selectedDates, dateString, instance });\n      },\n      onOpen: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrOpen.emit({ selectedDates, dateString, instance });\n      },\n      onClose: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrClose.emit({ selectedDates, dateString, instance });\n      },\n      onMonthChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });\n      },\n      onYearChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrYearChange.emit({ selectedDates, dateString, instance });\n      },\n      onReady: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrReady.emit({ selectedDates, dateString, instance });\n      },\n      onValueUpdate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });\n      },\n      onDayCreate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any,\n        dayElement: HTMLElement\n      ) => {\n        this.flatpickrDayCreate.emit({\n          selectedDates,\n          dateString,\n          instance,\n          dayElement\n        });\n      }\n    };\n\n    Object.keys(options).forEach(key => {\n      if (typeof options[key] === 'undefined') {\n        options[key] = (this.defaults as any)[key];\n      }\n    });\n    options.time_24hr = options.time24hr;\n    this.instance = flatpickr(\n      this.elm.nativeElement,\n      options\n    ) as flatpickr.Instance;\n    this.setDisabledState(this.isDisabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance) {\n      Object.keys(changes).forEach(inputKey => {\n        this.instance.set(inputKey as any, (this as any)[inputKey]);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.instance.destroy();\n  }\n\n  writeValue(value: any): void {\n    let convertedValue: any = value;\n    if (this.convertModelValue && this.mode === 'range' && value) {\n      convertedValue = [value.from, value.to];\n    }\n\n    if (this.instance) {\n      this.instance.setDate(convertedValue);\n    } else {\n      // flatpickr hasn't been initialised yet, store the value for later use\n      this.initialValue = convertedValue;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouchedFn = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    if (this.instance) {\n      if (this.isDisabled) {\n        this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n      } else {\n        this.renderer.removeAttribute(this.instance._input, 'disabled');\n      }\n    }\n  }\n\n  @HostListener('input')\n  inputChanged(): void {\n    const value: string = this.elm.nativeElement.value;\n    if (this.convertModelValue && typeof value === 'string') {\n      switch (this.mode) {\n        case 'multiple':\n          const dates: Date[] = value\n            .split('; ')\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn(dates);\n          break;\n\n        case 'range':\n          const [from, to] = value\n            .split(this.instance.l10n.rangeSeparator)\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn({ from, to });\n          break;\n\n        case 'single':\n        default:\n          this.onChangeFn(\n            this.instance.parseDate(\n              value,\n              this.instance.config.dateFormat,\n              !this.instance.config.enableTime\n            )\n          );\n      }\n    } else {\n      this.onChangeFn(value);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  InjectionToken,\n  Provider\n} from '@angular/core';\nimport { FlatpickrDirective } from './flatpickr.directive';\nimport {\n  FlatpickrDefaults,\n  FlatpickrDefaultsInterface\n} from './flatpickr-defaults.service';\n\nexport const USER_DEFAULTS = new InjectionToken('flatpickr defaults');\n\nexport function defaultsFactory(\n  userDefaults: FlatpickrDefaultsInterface\n): FlatpickrDefaults {\n  const defaults: FlatpickrDefaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [FlatpickrDirective],\n  exports: [FlatpickrDirective]\n})\nexport class FlatpickrModule {\n  static forRoot(\n    userDefaults: FlatpickrDefaultsInterface = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: FlatpickrModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: FlatpickrDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}