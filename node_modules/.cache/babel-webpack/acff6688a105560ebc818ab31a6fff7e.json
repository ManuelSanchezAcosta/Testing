{"ast":null,"code":"import _inherits from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, TemplateRef, ContentChild, EventEmitter, HostBinding, Input, Output, Injectable, Component, ContentChildren, ViewEncapsulation, forwardRef, Host, HostListener, Optional, NgModule } from '@angular/core';\nimport { isBoolean } from 'util';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar _c0 = function _c0(a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    vertical: a0,\n    horizontal: a1,\n    small: a2,\n    \"large-filled\": a3,\n    \"large-filled-symbols\": a4,\n    \"large-empty\": a5,\n    \"large-empty-symbols\": a6\n  };\n};\n\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"direction\", ctx_r0.navBarDirection)(\"ngClass\", ɵngcc0.ɵɵpureFunction7(2, _c0, ctx_r0.navBarLocation == \"left\", ctx_r0.navBarLocation == \"top\", ctx_r0.navBarLayout == \"small\", ctx_r0.navBarLayout == \"large-filled\", ctx_r0.navBarLayout == \"large-filled-symbols\", ctx_r0.navBarLayout == \"large-empty\", ctx_r0.navBarLayout == \"large-empty-symbols\"));\n  }\n}\n\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"direction\", ctx_r1.navBarDirection)(\"ngClass\", ɵngcc0.ɵɵpureFunction7(2, _c0, ctx_r1.navBarLocation == \"right\", ctx_r1.navBarLocation == \"bottom\", ctx_r1.navBarLayout == \"small\", ctx_r1.navBarLayout == \"large-filled\", ctx_r1.navBarLayout == \"large-filled-symbols\", ctx_r1.navBarLayout == \"large-empty\", ctx_r1.navBarLayout == \"large-empty-symbols\"));\n  }\n}\n\nvar _c1 = function _c1(a1, a2) {\n  return {\n    \"wizard-steps\": true,\n    vertical: a1,\n    horizontal: a2\n  };\n};\n\nvar _c2 = [\"*\"];\n\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 5);\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef);\n  }\n}\n\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.stepTitle);\n  }\n}\n\nvar _c3 = function _c3(a0) {\n  return {\n    \"font-family\": a0\n  };\n};\n\nvar _c4 = function _c4(a0, a1, a2, a3, a4, a5) {\n  return {\n    default: a0,\n    current: a1,\n    done: a2,\n    editing: a3,\n    optional: a4,\n    navigable: a5\n  };\n};\n\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵelementStart(2, \"a\", 2);\n    ɵngcc0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 1, \"ng-container\", 3);\n    ɵngcc0.ɵɵtemplate(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var step_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(6, _c3, step_r1.navigationSymbol.fontFamily))(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c4, ctx_r0.isDefault(step_r1), ctx_r0.isCurrent(step_r1), ctx_r0.isDone(step_r1), ctx_r0.isEditing(step_r1), ctx_r0.isOptional(step_r1), ctx_r0.isNavigable(step_r1)));\n    ɵngcc0.ɵɵattribute(\"step-symbol\", step_r1.navigationSymbol.symbol);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"awGoToStep\", step_r1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n  }\n}\n\nvar WizardStepTitleDirective =\n/**\n * Constructor\n *\n * @param {?} templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n */\nfunction WizardStepTitleDirective(templateRef) {\n  _classCallCheck(this, WizardStepTitleDirective);\n\n  this.templateRef = templateRef;\n};\n\nWizardStepTitleDirective.ɵfac = function WizardStepTitleDirective_Factory(t) {\n  return new (t || WizardStepTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nWizardStepTitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepTitleDirective,\n  selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]]\n});\n/** @nocollapse */\n\nWizardStepTitleDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n * @abstract\n */\n\n\nvar WizardStep = /*#__PURE__*/function () {\n  function WizardStep() {\n    _classCallCheck(this, WizardStep);\n\n    /**\n     * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n     */\n    this.navigationSymbol = {\n      symbol: ''\n    };\n    /**\n     * A boolean describing if the wizard step has been completed\n     */\n\n    this.completed = false;\n    /**\n     * A boolean describing if the wizard step is currently selected\n     */\n\n    this.selected = false;\n    /**\n     * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n     */\n\n    this.defaultSelected = false;\n    /**\n     * A boolean describing if the wizard step is an optional step\n     */\n\n    this.optional = false;\n    /**\n     * A function or boolean deciding, if this step can be entered\n     */\n\n    this.canEnter = true;\n    /**\n     * A function or boolean deciding, if this step can be exited\n     */\n\n    this.canExit = true;\n    /**\n     * This [[EventEmitter]] is called when the step is entered.\n     * The bound method should be used to do initialization work.\n     */\n\n    this.stepEnter = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   * @return {?}\n   */\n\n\n  _createClass(WizardStep, [{\n    key: \"enter\",\n\n    /**\n     * A function called when the step is entered\n     *\n     * @param {?} direction The direction in which the step is entered\n     * @return {?}\n     */\n    value: function enter(direction) {\n      this.stepEnter.emit(direction);\n    }\n    /**\n     * A function called when the step is exited\n     *\n     * @param {?} direction The direction in which the step is exited\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(direction) {\n      this.stepExit.emit(direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     * @param {?} direction The direction in which this step should be entered\n     * @return {?} A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     */\n\n  }, {\n    key: \"canEnterStep\",\n    value: function canEnterStep(direction) {\n      return WizardStep.canTransitionStep(this.canEnter, direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     * @param {?} direction The direction in which this step should be left\n     * @return {?} A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     */\n\n  }, {\n    key: \"canExitStep\",\n    value: function canExitStep(direction) {\n      return WizardStep.canTransitionStep(this.canExit, direction);\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return !this.selected;\n    }\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     * @param {?} condition A condition variable, deciding if the step can be transitioned\n     * @param {?} direction The direction in which this step should be transitioned\n     * @return {?} A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     */\n\n  }], [{\n    key: \"canTransitionStep\",\n    value: function canTransitionStep(condition, direction) {\n      if (isBoolean(condition)) {\n        return Promise.resolve(\n        /** @type {?} */\n        condition);\n      } else if (condition instanceof Function) {\n        return Promise.resolve(condition(direction));\n      } else {\n        return Promise.reject(new Error(\"Input value '\".concat(condition, \"' is neither a boolean nor a function\")));\n      }\n    }\n  }]);\n\n  return WizardStep;\n}();\n\nWizardStep.ɵfac = function WizardStep_Factory(t) {\n  return new (t || WizardStep)();\n};\n\nWizardStep.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStep,\n  contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function WizardStep_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n    }\n  },\n  inputs: {\n    navigationSymbol: \"navigationSymbol\",\n    canEnter: \"canEnter\",\n    canExit: \"canExit\",\n    stepId: \"stepId\",\n    stepTitle: \"stepTitle\"\n  },\n  outputs: {\n    stepEnter: \"stepEnter\",\n    stepExit: \"stepExit\"\n  }\n});\nWizardStep.propDecorators = {\n  \"stepTitleTemplate\": [{\n    type: ContentChild,\n    args: [WizardStepTitleDirective]\n  }],\n  \"stepId\": [{\n    type: Input\n  }],\n  \"stepTitle\": [{\n    type: Input\n  }],\n  \"navigationSymbol\": [{\n    type: Input\n  }],\n  \"canEnter\": [{\n    type: Input\n  }],\n  \"canExit\": [{\n    type: Input\n  }],\n  \"stepEnter\": [{\n    type: Output\n  }],\n  \"stepExit\": [{\n    type: Output\n  }],\n  \"hidden\": [{\n    type: HostBinding,\n    args: ['hidden']\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/** @enum {number} */\n\nvar MovingDirection = {\n  /**\n     * A forward step transition\n     */\n  Forwards: 0,\n\n  /**\n     * A backward step transition\n     */\n  Backwards: 1,\n\n  /**\n     * No step transition was done\n     */\n  Stay: 2\n};\nMovingDirection[MovingDirection.Forwards] = \"Forwards\";\nMovingDirection[MovingDirection.Backwards] = \"Backwards\";\nMovingDirection[MovingDirection.Stay] = \"Stay\";\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n * @abstract\n */\n\nvar NavigationMode = /*#__PURE__*/function () {\n  /**\n   * @param {?} wizardState\n   */\n  function NavigationMode(wizardState) {\n    _classCallCheck(this, NavigationMode);\n\n    this.wizardState = wizardState;\n  }\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   * @param {?=} preFinalize\n   * @param {?=} postFinalize\n   * @return {?}\n   */\n\n\n  _createClass(NavigationMode, [{\n    key: \"goToPreviousStep\",\n    value: function goToPreviousStep(preFinalize, postFinalize) {\n      if (this.wizardState.hasPreviousStep()) {\n        this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n      }\n    }\n    /**\n     * Tries to transition the wizard to the next step from the `currentStep`\n     * @param {?=} preFinalize\n     * @param {?=} postFinalize\n     * @return {?}\n     */\n\n  }, {\n    key: \"goToNextStep\",\n    value: function goToNextStep(preFinalize, postFinalize) {\n      if (this.wizardState.hasNextStep()) {\n        this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n      }\n    }\n  }]);\n\n  return NavigationMode;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\n\n\nvar FreeNavigationMode = /*#__PURE__*/function (_NavigationMode) {\n  _inherits(FreeNavigationMode, _NavigationMode);\n\n  var _super = _createSuper(FreeNavigationMode);\n\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  function FreeNavigationMode(wizardState) {\n    _classCallCheck(this, FreeNavigationMode);\n\n    return _super.call(this, wizardState);\n  }\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param {?} destinationIndex The index of the destination wizard step\n   * @return {?} True if the destination wizard step can be entered, false otherwise\n   */\n\n\n  _createClass(FreeNavigationMode, [{\n    key: \"canGoToStep\",\n    value: function canGoToStep(destinationIndex) {\n      var _this = this;\n\n      var\n      /** @type {?} */\n      hasStep = this.wizardState.hasStep(destinationIndex);\n      var\n      /** @type {?} */\n      movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n      var\n      /** @type {?} */\n      canExitCurrentStep = function canExitCurrentStep(previous) {\n        return previous ? _this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n      };\n\n      var\n      /** @type {?} */\n      canEnterDestinationStep = function canEnterDestinationStep(previous) {\n        return previous ? _this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n      };\n\n      return Promise.resolve(hasStep).then(canExitCurrentStep).then(canEnterDestinationStep);\n    }\n    /**\n     * Tries to enter the wizard step with the given destination index.\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param {?} destinationIndex The index of the destination wizard step, which should be entered\n     * @param {?=} preFinalize An event emitter, to be called before the step has been transitioned\n     * @param {?=} postFinalize An event emitter, to be called after the step has been transitioned\n     * @return {?}\n     */\n\n  }, {\n    key: \"goToStep\",\n    value: function goToStep(destinationIndex, preFinalize, postFinalize) {\n      var _this2 = this;\n\n      this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n        if (navigationAllowed) {\n          // the current step can be exited in the given direction\n          var\n          /** @type {?} */\n          movingDirection = _this2.wizardState.getMovingDirection(destinationIndex);\n          /* istanbul ignore if */\n\n\n          if (preFinalize) {\n            preFinalize.emit();\n          } // leave current step\n\n\n          _this2.wizardState.currentStep.completed = true;\n\n          _this2.wizardState.currentStep.exit(movingDirection);\n\n          _this2.wizardState.currentStep.selected = false;\n          _this2.wizardState.currentStepIndex = destinationIndex; // go to next step\n\n          _this2.wizardState.currentStep.enter(movingDirection);\n\n          _this2.wizardState.currentStep.selected = true;\n          /* istanbul ignore if */\n\n          if (postFinalize) {\n            postFinalize.emit();\n          }\n        } else {\n          // if the current step can't be left, reenter the current step\n          _this2.wizardState.currentStep.exit(MovingDirection.Stay);\n\n          _this2.wizardState.currentStep.enter(MovingDirection.Stay);\n        }\n      });\n    }\n    /**\n     * @param {?} destinationIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(destinationIndex) {\n      return true;\n    }\n    /**\n     * Resets the state of this wizard.\n     * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n     * In addition the whole wizard is set as incomplete\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // the wizard doesn't contain a step with the default step index\n      if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n        throw new Error(\"The wizard doesn't contain a step with index \".concat(this.wizardState.defaultStepIndex));\n      } // reset the step internal state\n\n\n      this.wizardState.wizardSteps.forEach(function (step) {\n        step.completed = false;\n        step.selected = false;\n      }); // set the first step as the current step\n\n      this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n      this.wizardState.currentStep.selected = true;\n      this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    }\n  }]);\n\n  return FreeNavigationMode;\n}(NavigationMode);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n * @abstract\n */\n\n\nvar WizardCompletionStep = /*#__PURE__*/function (_WizardStep) {\n  _inherits(WizardCompletionStep, _WizardStep);\n\n  var _super2 = _createSuper(WizardCompletionStep);\n\n  function WizardCompletionStep() {\n    var _this3;\n\n    _classCallCheck(this, WizardCompletionStep);\n\n    _this3 = _super2.apply(this, arguments);\n    /**\n     * @inheritDoc\n     */\n\n    _this3.stepExit = new EventEmitter();\n    /**\n     * @inheritDoc\n     */\n\n    _this3.canExit = false;\n    return _this3;\n  }\n  /**\n   * @inheritDoc\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  _createClass(WizardCompletionStep, [{\n    key: \"enter\",\n    value: function enter(direction) {\n      this.completed = true;\n      this.stepEnter.emit(direction);\n    }\n    /**\n     * @inheritDoc\n     * @param {?} direction\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(direction) {\n      // set this completion step as incomplete\n      this.completed = false;\n      this.stepExit.emit(direction);\n    }\n  }]);\n\n  return WizardCompletionStep;\n}(WizardStep);\n\nWizardCompletionStep.ɵfac = function WizardCompletionStep_Factory(t) {\n  return ɵWizardCompletionStep_BaseFactory(t || WizardCompletionStep);\n};\n\nWizardCompletionStep.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStep,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵWizardCompletionStep_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\n\nvar SemiStrictNavigationMode = /*#__PURE__*/function (_NavigationMode2) {\n  _inherits(SemiStrictNavigationMode, _NavigationMode2);\n\n  var _super3 = _createSuper(SemiStrictNavigationMode);\n\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  function SemiStrictNavigationMode(wizardState) {\n    _classCallCheck(this, SemiStrictNavigationMode);\n\n    return _super3.call(this, wizardState);\n  }\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param {?} destinationIndex The index of the destination wizard step\n   * @return {?} True if the destination wizard step can be entered, false otherwise\n   */\n\n\n  _createClass(SemiStrictNavigationMode, [{\n    key: \"canGoToStep\",\n    value: function canGoToStep(destinationIndex) {\n      var _this4 = this;\n\n      var\n      /** @type {?} */\n      hasStep = this.wizardState.hasStep(destinationIndex);\n      var\n      /** @type {?} */\n      movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n      var\n      /** @type {?} */\n      canExitCurrentStep = function canExitCurrentStep(previous) {\n        return previous ? _this4.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n      };\n\n      var\n      /** @type {?} */\n      canEnterDestinationStep = function canEnterDestinationStep(previous) {\n        return previous ? _this4.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n      }; // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n\n\n      var\n      /** @type {?} */\n      destinationStep = function destinationStep(previous) {\n        if (previous) {\n          var\n          /** @type {?} */\n          allNormalStepsCompleted = _this4.wizardState.wizardSteps.filter(function (step, index) {\n            return index < destinationIndex;\n          }).every(function (step) {\n            return step.completed || step.optional || step.selected;\n          });\n\n          return Promise.resolve(!(_this4.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n        } else {\n          return Promise.resolve(false);\n        }\n      };\n\n      return Promise.resolve(hasStep).then(canExitCurrentStep).then(canEnterDestinationStep).then(destinationStep);\n    }\n    /**\n     * Tries to enter the wizard step with the given destination index.\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param {?} destinationIndex The index of the destination wizard step, which should be entered\n     * @param {?=} preFinalize An event emitter, to be called before the step has been transitioned\n     * @param {?=} postFinalize An event emitter, to be called after the step has been transitioned\n     * @return {?}\n     */\n\n  }, {\n    key: \"goToStep\",\n    value: function goToStep(destinationIndex, preFinalize, postFinalize) {\n      var _this5 = this;\n\n      this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n        if (navigationAllowed) {\n          // the current step can be exited in the given direction\n          var\n          /** @type {?} */\n          movingDirection = _this5.wizardState.getMovingDirection(destinationIndex);\n          /* istanbul ignore if */\n\n\n          if (preFinalize) {\n            preFinalize.emit();\n          } // leave current step\n\n\n          _this5.wizardState.currentStep.completed = true;\n\n          _this5.wizardState.currentStep.exit(movingDirection);\n\n          _this5.wizardState.currentStep.selected = false;\n          _this5.wizardState.currentStepIndex = destinationIndex; // go to next step\n\n          _this5.wizardState.currentStep.enter(movingDirection);\n\n          _this5.wizardState.currentStep.selected = true;\n          /* istanbul ignore if */\n\n          if (postFinalize) {\n            postFinalize.emit();\n          }\n        } else {\n          // if the current step can't be left, reenter the current step\n          _this5.wizardState.currentStep.exit(MovingDirection.Stay);\n\n          _this5.wizardState.currentStep.enter(MovingDirection.Stay);\n        }\n      });\n    }\n    /**\n     * @inheritDoc\n     * @param {?} destinationIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(destinationIndex) {\n      if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n        // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n        return this.wizardState.wizardSteps.filter(function (step, index) {\n          return index < destinationIndex;\n        }).every(function (step) {\n          return step.completed || step.optional || step.selected;\n        });\n      } else {\n        // a \"normal\" step can always be entered\n        return true;\n      }\n    }\n    /**\n     * @inheritDoc\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // the wizard doesn't contain a step with the default step index\n      if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n        throw new Error(\"The wizard doesn't contain a step with index \".concat(this.wizardState.defaultStepIndex));\n      } // the default step is a completion step and the wizard contains more than one step\n\n\n      var\n      /** @type {?} */\n      defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep && this.wizardState.wizardSteps.length !== 1;\n\n      if (defaultCompletionStep) {\n        throw new Error(\"The default step index \".concat(this.wizardState.defaultStepIndex, \" references a completion step\"));\n      } // reset the step internal state\n\n\n      this.wizardState.wizardSteps.forEach(function (step) {\n        step.completed = false;\n        step.selected = false;\n      }); // set the first step as the current step\n\n      this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n      this.wizardState.currentStep.selected = true;\n      this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    }\n  }]);\n\n  return SemiStrictNavigationMode;\n}(NavigationMode);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\n\n\nvar StrictNavigationMode = /*#__PURE__*/function (_NavigationMode3) {\n  _inherits(StrictNavigationMode, _NavigationMode3);\n\n  var _super4 = _createSuper(StrictNavigationMode);\n\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  function StrictNavigationMode(wizardState) {\n    _classCallCheck(this, StrictNavigationMode);\n\n    return _super4.call(this, wizardState);\n  }\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param {?} destinationIndex The index of the destination wizard step\n   * @return {?} True if the destination wizard step can be entered, false otherwise\n   */\n\n\n  _createClass(StrictNavigationMode, [{\n    key: \"canGoToStep\",\n    value: function canGoToStep(destinationIndex) {\n      var _this6 = this;\n\n      var\n      /** @type {?} */\n      hasStep = this.wizardState.hasStep(destinationIndex);\n      var\n      /** @type {?} */\n      movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n      var\n      /** @type {?} */\n      canExitCurrentStep = function canExitCurrentStep(previous) {\n        return previous ? _this6.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n      };\n\n      var\n      /** @type {?} */\n      canEnterDestinationStep = function canEnterDestinationStep(previous) {\n        return previous ? _this6.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n      };\n\n      var\n      /** @type {?} */\n      allPreviousStepsComplete = function allPreviousStepsComplete(previous) {\n        if (previous) {\n          return Promise.resolve(_this6.wizardState.wizardSteps.filter(function (step, index) {\n            return index < destinationIndex && index !== _this6.wizardState.currentStepIndex;\n          }).every(function (step) {\n            return step.completed || step.optional;\n          }));\n        } else {\n          return Promise.resolve(false);\n        }\n      };\n\n      return Promise.resolve(hasStep).then(canExitCurrentStep).then(canEnterDestinationStep).then(allPreviousStepsComplete);\n    }\n    /**\n     * Tries to enter the wizard step with the given destination index.\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - all steps between the old current step and the destination step are marked as incomplete\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param {?} destinationIndex The index of the destination wizard step, which should be entered\n     * @param {?=} preFinalize An event emitter, to be called before the step has been transitioned\n     * @param {?=} postFinalize An event emitter, to be called after the step has been transitioned\n     * @return {?}\n     */\n\n  }, {\n    key: \"goToStep\",\n    value: function goToStep(destinationIndex, preFinalize, postFinalize) {\n      var _this7 = this;\n\n      this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n        if (navigationAllowed) {\n          var\n          /** @type {?} */\n          movingDirection = _this7.wizardState.getMovingDirection(destinationIndex);\n          /* istanbul ignore if */\n\n\n          if (preFinalize) {\n            preFinalize.emit();\n          } // leave current step\n\n\n          _this7.wizardState.currentStep.completed = true;\n\n          _this7.wizardState.currentStep.exit(movingDirection);\n\n          _this7.wizardState.currentStep.selected = false; // set all steps after the destination step to incomplete\n\n          _this7.wizardState.wizardSteps.filter(function (step, index) {\n            return _this7.wizardState.currentStepIndex > destinationIndex && index > destinationIndex;\n          }).forEach(function (step) {\n            return step.completed = false;\n          });\n\n          _this7.wizardState.currentStepIndex = destinationIndex; // go to next step\n\n          _this7.wizardState.currentStep.enter(movingDirection);\n\n          _this7.wizardState.currentStep.selected = true;\n          /* istanbul ignore if */\n\n          if (postFinalize) {\n            postFinalize.emit();\n          }\n        } else {\n          // if the current step can't be left, reenter the current step\n          _this7.wizardState.currentStep.exit(MovingDirection.Stay);\n\n          _this7.wizardState.currentStep.enter(MovingDirection.Stay);\n        }\n      });\n    }\n    /**\n     * @param {?} destinationIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(destinationIndex) {\n      // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n      return destinationIndex < this.wizardState.currentStepIndex;\n    }\n    /**\n     * Resets the state of this wizard.\n     * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n     * In addition the whole wizard is set as incomplete\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this8 = this;\n\n      // the wizard doesn't contain a step with the default step index\n      if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n        throw new Error(\"The wizard doesn't contain a step with index \".concat(this.wizardState.defaultStepIndex));\n      } // at least one step is before the default step, that is not optional\n\n\n      var\n      /** @type {?} */\n      illegalDefaultStep = this.wizardState.wizardSteps.filter(function (step, index) {\n        return index < _this8.wizardState.defaultStepIndex;\n      }).some(function (step) {\n        return !step.optional;\n      });\n\n      if (illegalDefaultStep) {\n        throw new Error(\"The default step index \".concat(this.wizardState.defaultStepIndex, \" is located after a non optional step\"));\n      } // reset the step internal state\n\n\n      this.wizardState.wizardSteps.forEach(function (step) {\n        step.completed = false;\n        step.selected = false;\n      }); // set the first step as the current step\n\n      this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n      this.wizardState.currentStep.selected = true;\n      this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    }\n  }]);\n\n  return StrictNavigationMode;\n}(NavigationMode);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param {?} navigationMode The name of the to be used navigation mode\n * @param {?} wizardState The wizard state of the wizard\n * @return {?} The created [[NavigationMode]]\n */\n\n\nfunction navigationModeFactory(navigationMode, wizardState) {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n\n\nvar WizardState = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function WizardState() {\n    _classCallCheck(this, WizardState);\n\n    /**\n     * The initial step index, as taken from the [[WizardComponent]]\n     */\n    this._defaultStepIndex = 0;\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n\n    this.wizardSteps = [];\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     */\n\n    this.currentStepIndex = -1;\n  }\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param {?} defaultStepIndex The new default wizard step index\n   * @return {?}\n   */\n\n\n  _createClass(WizardState, [{\n    key: \"updateNavigationMode\",\n\n    /**\n     * Updates the navigation mode to the navigation mode with the given name\n     *\n     * @param {?} updatedNavigationMode The name of the new navigation mode\n     * @return {?}\n     */\n    value: function updateNavigationMode(updatedNavigationMode) {\n      this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n    }\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param {?} updatedWizardSteps The updated wizard steps\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWizardSteps\",\n    value: function updateWizardSteps(updatedWizardSteps) {\n      // the wizard is currently not in the initialization phase\n      if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n        this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n      }\n\n      this.wizardSteps = updatedWizardSteps;\n    }\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param {?} stepIndex The to be checked index of a step inside this wizard\n     * @return {?} True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n\n  }, {\n    key: \"hasStep\",\n    value: function hasStep(stepIndex) {\n      return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    }\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @return {?} True if this wizard has a previous step before the current step\n     */\n\n  }, {\n    key: \"hasPreviousStep\",\n    value: function hasPreviousStep() {\n      return this.hasStep(this.currentStepIndex - 1);\n    }\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @return {?} True if this wizard has a next step after the current step\n     */\n\n  }, {\n    key: \"hasNextStep\",\n    value: function hasNextStep() {\n      return this.hasStep(this.currentStepIndex + 1);\n    }\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @return {?} True if the wizard is currently inside its last step\n     */\n\n  }, {\n    key: \"isLastStep\",\n    value: function isLastStep() {\n      return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    }\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     * @param {?} stepIndex The given index\n     * @return {?} The found [[WizardStep]] at the given index `stepIndex`\n     */\n\n  }, {\n    key: \"getStepAtIndex\",\n    value: function getStepAtIndex(stepIndex) {\n      if (!this.hasStep(stepIndex)) {\n        throw new Error(\"Expected a known step, but got stepIndex: \".concat(stepIndex, \".\"));\n      }\n\n      return this.wizardSteps[stepIndex];\n    }\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param {?} stepId The given step id\n     * @return {?} The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n\n  }, {\n    key: \"getIndexOfStepWithId\",\n    value: function getIndexOfStepWithId(stepId) {\n      return this.wizardSteps.findIndex(function (step) {\n        return step.stepId === stepId;\n      });\n    }\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param {?} step The given [[WizardStep]]\n     * @return {?} The found index of `step` or `-1` if the step is not included in the wizard\n     */\n\n  }, {\n    key: \"getIndexOfStep\",\n    value: function getIndexOfStep(step) {\n      return this.wizardSteps.indexOf(step);\n    }\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param {?} destinationStep The given destination step\n     * @return {?} The calculated [[MovingDirection]]\n     */\n\n  }, {\n    key: \"getMovingDirection\",\n    value: function getMovingDirection(destinationStep) {\n      var\n      /** @type {?} */\n      movingDirection;\n\n      if (destinationStep > this.currentStepIndex) {\n        movingDirection = MovingDirection.Forwards;\n      } else if (destinationStep < this.currentStepIndex) {\n        movingDirection = MovingDirection.Backwards;\n      } else {\n        movingDirection = MovingDirection.Stay;\n      }\n\n      return movingDirection;\n    }\n  }, {\n    key: \"defaultStepIndex\",\n    set: function set(defaultStepIndex) {\n      this._defaultStepIndex = defaultStepIndex;\n    }\n    /**\n     * The initial step index.\n     * This value can be either:\n     * - the index of a wizard step with a `selected` directive, or\n     * - the default step index, set in the [[WizardComponent]]\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      var\n      /** @type {?} */\n      foundDefaultStep = this.wizardSteps.find(function (step) {\n        return step.defaultSelected;\n      });\n\n      if (foundDefaultStep) {\n        return this.getIndexOfStep(foundDefaultStep);\n      } else {\n        return this._defaultStepIndex;\n      }\n    }\n  }, {\n    key: \"currentStep\",\n\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     * @return {?}\n     */\n    get: function get() {\n      if (this.hasStep(this.currentStepIndex)) {\n        return this.wizardSteps[this.currentStepIndex];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     * @return {?}\n     */\n\n  }, {\n    key: \"completed\",\n    get: function get() {\n      return this.wizardSteps.every(function (step) {\n        return step.completed || step.optional;\n      });\n    }\n  }]);\n\n  return WizardState;\n}();\n\nWizardState.ɵfac = function WizardState_Factory(t) {\n  return new (t || WizardState)();\n};\n\nWizardState.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: WizardState,\n  factory: WizardState.ɵfac\n});\n/** @nocollapse */\n\nWizardState.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardState, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} model The model for this wizard component\n   */\n  function WizardComponent(model) {\n    _classCallCheck(this, WizardComponent);\n\n    this.model = model;\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n\n    this.navBarLocation = 'top';\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n\n    this.navBarLayout = 'small';\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n\n    this.navBarDirection = 'left-to-right';\n    /**\n     * The navigation mode used for transitioning between different steps.\n     * The navigation mode can be either `strict`, `semi-strict` or `free`\n     */\n\n    this.navigationMode = 'strict';\n    /**\n     * The initially selected step, represented by its index\n     */\n\n    this.defaultStepIndex = 0;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n\n    this.disableNavigationBar = false;\n  }\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @return {?} True if this wizard uses a horizontal orientation\n   */\n\n\n  _createClass(WizardComponent, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * Updates the model after certain input values have changed\n     *\n     * @param {?} changes The detected changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      for (var _i = 0, _Object$keys = Object.keys(changes); _i < _Object$keys.length; _i++) {\n        var\n        /** @type {?} */\n        propName = _Object$keys[_i];\n        var\n        /** @type {?} */\n        change = changes[propName];\n\n        if (!change.firstChange) {\n          switch (propName) {\n            case 'defaultStepIndex':\n              this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n              break;\n\n            case 'disableNavigationBar':\n              this.model.disableNavigationBar = change.currentValue;\n              break;\n\n            case 'navigationMode':\n              this.model.updateNavigationMode(change.currentValue);\n              break;\n\n            /* istanbul ignore next */\n\n            default:\n          }\n        }\n      }\n    }\n    /**\n     * Initialization work\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this9 = this;\n\n      // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n      this.wizardSteps.changes.subscribe(function (changedWizardSteps) {\n        _this9.model.updateWizardSteps(changedWizardSteps.toArray());\n      }); // initialize the model\n\n      this.model.disableNavigationBar = this.disableNavigationBar;\n      this.model.defaultStepIndex = this.defaultStepIndex;\n      this.model.updateWizardSteps(this.wizardSteps.toArray());\n      this.model.updateNavigationMode(this.navigationMode); // finally reset the whole wizard state\n\n      this.navigation.reset();\n    }\n  }, {\n    key: \"horizontalOrientation\",\n    get: function get() {\n      return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n    }\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @return {?} True if this wizard uses a vertical orientation\n     */\n\n  }, {\n    key: \"verticalOrientation\",\n    get: function get() {\n      return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n    }\n    /**\n     * The navigation mode for this wizard\n     * @return {?}\n     */\n\n  }, {\n    key: \"navigation\",\n    get: function get() {\n      return this.model.navigationMode;\n    }\n  }]);\n\n  return WizardComponent;\n}();\n\nWizardComponent.ɵfac = function WizardComponent_Factory(t) {\n  return new (t || WizardComponent)(ɵngcc0.ɵɵdirectiveInject(WizardState));\n};\n\nWizardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardComponent,\n  selectors: [[\"aw-wizard\"]],\n  contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStep, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardSteps = _t);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function WizardComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n    }\n  },\n  inputs: {\n    navBarLocation: \"navBarLocation\",\n    navBarLayout: \"navBarLayout\",\n    navBarDirection: \"navBarDirection\",\n    navigationMode: \"navigationMode\",\n    defaultStepIndex: \"defaultStepIndex\",\n    disableNavigationBar: \"disableNavigationBar\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([WizardState]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 6,\n  consts: [[3, \"direction\", \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [3, \"direction\", \"ngClass\"]],\n  template: function WizardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 10, \"aw-wizard-navigation-bar\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 10, \"aw-wizard-navigation-bar\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"left\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c1, ctx.navBarLocation == \"left\" || ctx.navBarLocation == \"right\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"bottom\"));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"bottom\" || ctx.navBarLocation == \"right\");\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ɵngcc1.NgClass, WizardNavigationBarComponent];\n  },\n  styles: [\"aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nWizardComponent.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }];\n};\n\nWizardComponent.propDecorators = {\n  \"wizardSteps\": [{\n    type: ContentChildren,\n    args: [WizardStep]\n  }],\n  \"navBarLocation\": [{\n    type: Input\n  }],\n  \"navBarLayout\": [{\n    type: Input\n  }],\n  \"navBarDirection\": [{\n    type: Input\n  }],\n  \"navigationMode\": [{\n    type: Input\n  }],\n  \"defaultStepIndex\": [{\n    type: Input\n  }],\n  \"disableNavigationBar\": [{\n    type: Input\n  }],\n  \"horizontalOrientation\": [{\n    type: HostBinding,\n    args: ['class.horizontal']\n  }],\n  \"verticalOrientation\": [{\n    type: HostBinding,\n    args: ['class.vertical']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard',\n      template: \"<aw-wizard-navigation-bar\\n  [direction]=\\\"navBarDirection\\\"\\n  *ngIf=\\\"navBarLocation == 'top' || navBarLocation == 'left'\\\"\\n  [ngClass]=\\\"{\\n    vertical: navBarLocation == 'left',\\n    horizontal: navBarLocation == 'top',\\n    small: navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n<aw-wizard-navigation-bar\\n  [direction]=\\\"navBarDirection\\\"\\n  *ngIf=\\\"navBarLocation == 'bottom' || navBarLocation == 'right'\\\"\\n  [ngClass]=\\\"{\\n    vertical: navBarLocation == 'right',\\n    horizontal: navBarLocation == 'bottom',\\n    small: navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\",\n      styles: [\"aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}\"],\n      encapsulation: ViewEncapsulation.None,\n      providers: [WizardState]\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }];\n  }, {\n    navBarLocation: [{\n      type: Input\n    }],\n    navBarLayout: [{\n      type: Input\n    }],\n    navBarDirection: [{\n      type: Input\n    }],\n    navigationMode: [{\n      type: Input\n    }],\n    defaultStepIndex: [{\n      type: Input\n    }],\n    disableNavigationBar: [{\n      type: Input\n    }],\n    horizontalOrientation: [{\n      type: HostBinding,\n      args: ['class.horizontal']\n    }],\n    verticalOrientation: [{\n      type: HostBinding,\n      args: ['class.vertical']\n    }],\n    wizardSteps: [{\n      type: ContentChildren,\n      args: [WizardStep]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Created by marc on 20.05.17.\n */\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardCompletionStepComponent = /*#__PURE__*/function (_WizardCompletionStep) {\n  _inherits(WizardCompletionStepComponent, _WizardCompletionStep);\n\n  var _super5 = _createSuper(WizardCompletionStepComponent);\n\n  function WizardCompletionStepComponent() {\n    _classCallCheck(this, WizardCompletionStepComponent);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return WizardCompletionStepComponent;\n}(WizardCompletionStep);\n\nWizardCompletionStepComponent.ɵfac = function WizardCompletionStepComponent_Factory(t) {\n  return ɵWizardCompletionStepComponent_BaseFactory(t || WizardCompletionStepComponent);\n};\n\nWizardCompletionStepComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardCompletionStepComponent,\n  selectors: [[\"aw-wizard-completion-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepComponent;\n    })\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepComponent;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 1,\n  vars: 0,\n  template: function WizardCompletionStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\"aw-wizard-completion-step{height:auto;width:100%}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nWizardCompletionStepComponent.ctorParameters = function () {\n  return [];\n};\n\nvar ɵWizardCompletionStepComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-completion-step',\n      template: \"<ng-content></ng-content>\\n\",\n      styles: [\"aw-wizard-completion-step{height:auto;width:100%}\"],\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepComponent;\n        })\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepComponent;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardNavigationBarComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The state the wizard currently resides in\n   */\n  function WizardNavigationBarComponent(wizardState) {\n    _classCallCheck(this, WizardNavigationBarComponent);\n\n    this.wizardState = wizardState;\n    /**\n     * The direction in which the wizard steps should be shown in the navigation bar.\n     * This value can be either `left-to-right` or `right-to-left`\n     */\n\n    this.direction = 'left-to-right';\n  }\n  /**\n   * The navigation mode\n   * @return {?}\n   */\n\n\n  _createClass(WizardNavigationBarComponent, [{\n    key: \"isCurrent\",\n\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as current\n     */\n    value: function isCurrent(wizardStep) {\n      return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as done\n     */\n\n  }, {\n    key: \"isDone\",\n    value: function isDone(wizardStep) {\n      return wizardStep.completed && !wizardStep.selected || this.wizardState.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as default\n     */\n\n  }, {\n    key: \"isDefault\",\n    value: function isDefault(wizardStep) {\n      return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as editing\n     */\n\n  }, {\n    key: \"isEditing\",\n    value: function isEditing(wizardStep) {\n      return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as optional\n     */\n\n  }, {\n    key: \"isOptional\",\n    value: function isOptional(wizardStep) {\n      return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n     * A wizard step can be navigated to if:\n     * - the step is currently not selected\n     * - the navigation bar isn't disabled\n     * - the navigation mode allows navigation to the step\n     *\n     * @param {?} wizardStep The wizard step to be checked\n     * @return {?} True if the step can be marked as navigable\n     */\n\n  }, {\n    key: \"isNavigable\",\n    value: function isNavigable(wizardStep) {\n      return !wizardStep.selected && !this.wizardState.disableNavigationBar && this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n    }\n  }, {\n    key: \"navigationMode\",\n    get: function get() {\n      return this.wizardState.navigationMode;\n    }\n    /**\n     * Returns all [[WizardStep]]s contained in the wizard\n     *\n     * @return {?} An array containing all [[WizardStep]]s\n     */\n\n  }, {\n    key: \"wizardSteps\",\n    get: function get() {\n      switch (this.direction) {\n        case 'right-to-left':\n          return this.wizardState.wizardSteps.slice().reverse();\n\n        case 'left-to-right':\n        default:\n          return this.wizardState.wizardSteps;\n      }\n    }\n    /**\n     * Returns the number of wizard steps, that need to be displaced in the navigation bar\n     *\n     * @return {?} The number of wizard steps to be displayed\n     */\n\n  }, {\n    key: \"numberOfWizardSteps\",\n    get: function get() {\n      return this.wizardState.wizardSteps.length;\n    }\n  }]);\n\n  return WizardNavigationBarComponent;\n}();\n\nWizardNavigationBarComponent.ɵfac = function WizardNavigationBarComponent_Factory(t) {\n  return new (t || WizardNavigationBarComponent)(ɵngcc0.ɵɵdirectiveInject(WizardState));\n};\n\nWizardNavigationBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardNavigationBarComponent,\n  selectors: [[\"aw-wizard-navigation-bar\"]],\n  inputs: {\n    direction: \"direction\"\n  },\n  decls: 2,\n  vars: 4,\n  consts: [[3, \"ngStyle\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngStyle\", \"ngClass\"], [3, \"awGoToStep\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n  template: function WizardNavigationBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\");\n      ɵngcc0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 5, 15, \"li\", 0);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, ɵngcc1.NgStyle, ɵngcc1.NgClass, GoToStepDirective, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet];\n  },\n  styles: [\"aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}\", \"aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nWizardNavigationBarComponent.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }];\n};\n\nWizardNavigationBarComponent.propDecorators = {\n  \"direction\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-navigation-bar',\n      template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li *ngFor=\\\"let step of wizardSteps\\\"\\n      [attr.step-symbol]=\\\"step.navigationSymbol.symbol\\\"\\n      [ngStyle]=\\\"{\\n        'font-family': step.navigationSymbol.fontFamily\\n      }\\\"\\n      [ngClass]=\\\"{\\n        default: isDefault(step),\\n        current: isCurrent(step),\\n        done: isDone(step),\\n        editing: isEditing(step),\\n        optional: isOptional(step),\\n        navigable: isNavigable(step)\\n  }\\\">\\n    <div>\\n      <a [awGoToStep]=\\\"step\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </a>\\n    </div>\\n  </li>\\n</ul>\\n\",\n      styles: [\"aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}\", \"aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}\"],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }];\n  }, {\n    direction: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardStepComponent = /*#__PURE__*/function (_WizardStep2) {\n  _inherits(WizardStepComponent, _WizardStep2);\n\n  var _super6 = _createSuper(WizardStepComponent);\n\n  function WizardStepComponent() {\n    _classCallCheck(this, WizardStepComponent);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return WizardStepComponent;\n}(WizardStep);\n\nWizardStepComponent.ɵfac = function WizardStepComponent_Factory(t) {\n  return ɵWizardStepComponent_BaseFactory(t || WizardStepComponent);\n};\n\nWizardStepComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: WizardStepComponent,\n  selectors: [[\"aw-wizard-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardStepComponent;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 1,\n  vars: 0,\n  template: function WizardStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\"aw-wizard-step{height:auto;width:100%}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nWizardStepComponent.ctorParameters = function () {\n  return [];\n};\n\nvar ɵWizardStepComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(WizardStepComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-step',\n      template: \"<ng-content></ng-content>\\n\",\n      styles: [\"aw-wizard-step{height:auto;width:100%}\"],\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardStepComponent;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar EnableBackLinksDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} completionStep The wizard completion step, which should be exitable\n   */\n  function EnableBackLinksDirective(completionStep) {\n    _classCallCheck(this, EnableBackLinksDirective);\n\n    this.completionStep = completionStep;\n    /**\n     * This EventEmitter is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Initialization work\n   * @return {?}\n   */\n\n\n  _createClass(EnableBackLinksDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.completionStep.canExit = true;\n      this.completionStep.stepExit = this.stepExit;\n    }\n  }]);\n\n  return EnableBackLinksDirective;\n}();\n\nEnableBackLinksDirective.ɵfac = function EnableBackLinksDirective_Factory(t) {\n  return new (t || EnableBackLinksDirective)(ɵngcc0.ɵɵdirectiveInject(WizardCompletionStep, 1));\n};\n\nEnableBackLinksDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: EnableBackLinksDirective,\n  selectors: [[\"\", \"awEnableBackLinks\", \"\"]],\n  outputs: {\n    stepExit: \"stepExit\"\n  }\n});\n/** @nocollapse */\n\nEnableBackLinksDirective.ctorParameters = function () {\n  return [{\n    type: WizardCompletionStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\nEnableBackLinksDirective.propDecorators = {\n  \"stepExit\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awEnableBackLinks]'\n    }]\n  }], function () {\n    return [{\n      type: WizardCompletionStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    stepExit: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n * @record\n */\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param {?} value The value to be checked\n * @return {?} True if the given value implements [[StepOffset]] and false otherwise\n */\n\n\nfunction isStepOffset(value) {\n  return value.hasOwnProperty('stepOffset');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n * @record\n */\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param {?} value The value to be checked\n * @return {?} True if the given value implements [[StepId]] and false otherwise\n */\n\n\nfunction isStepId(value) {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n * @record\n */\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param {?} value The value to be checked\n * @return {?} True if the given value implements [[StepIndex]] and false otherwise\n */\n\n\nfunction isStepIndex(value) {\n  return value.hasOwnProperty('stepIndex');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Created by marc on 09.01.17.\n */\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar GoToStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The wizard state\n   * @param {?} wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  function GoToStepDirective(wizardState, wizardStep) {\n    _classCallCheck(this, GoToStepDirective);\n\n    this.wizardState = wizardState;\n    this.wizardStep = wizardStep;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param {?} emitter The [[EventEmitter]] to be set\n   * @return {?}\n   */\n\n\n  _createClass(GoToStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     * @param {?} event\n     * @return {?}\n     */\n    value: function onClick(event) {\n      this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * The navigation mode\n     * @return {?}\n     */\n\n  }, {\n    key: \"navigationMode\",\n    get: function get() {\n      return this.wizardState.navigationMode;\n    }\n    /**\n     * Returns the destination step of this directive as an absolute step index inside the wizard\n     *\n     * @throws If `targetStep` is of an unknown type an `Error` is thrown\n     * @return {?} The index of the destination step\n     */\n\n  }, {\n    key: \"destinationStep\",\n    get: function get() {\n      var\n      /** @type {?} */\n      destinationStep;\n\n      if (isStepIndex(this.targetStep)) {\n        destinationStep = this.targetStep.stepIndex;\n      } else if (isStepId(this.targetStep)) {\n        destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n      } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n        destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n      } else if (this.targetStep instanceof WizardStep) {\n        destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n      } else {\n        throw new Error(\"Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId\");\n      }\n\n      return destinationStep;\n    }\n  }]);\n\n  return GoToStepDirective;\n}();\n\nGoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) {\n  return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardState), ɵngcc0.ɵɵdirectiveInject(WizardStep, 8));\n};\n\nGoToStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GoToStepDirective,\n  selectors: [[\"\", \"awGoToStep\", \"\"]],\n  hostBindings: function GoToStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    targetStep: [\"awGoToStep\", \"targetStep\"]\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n/** @nocollapse */\n\nGoToStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }, {\n    type: WizardStep,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nGoToStepDirective.propDecorators = {\n  \"preFinalize\": [{\n    type: Output\n  }],\n  \"postFinalize\": [{\n    type: Output\n  }],\n  \"finalize\": [{\n    type: Output\n  }],\n  \"targetStep\": [{\n    type: Input,\n    args: ['awGoToStep']\n  }],\n  \"onClick\": [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awGoToStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }, {\n      type: WizardStep,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     * @param {?} event\n     * @return {?}\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    targetStep: [{\n      type: Input,\n      args: ['awGoToStep']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar NextStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The state of the wizard\n   */\n  function NextStepDirective(wizardState) {\n    _classCallCheck(this, NextStepDirective);\n\n    this.wizardState = wizardState;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param {?} emitter The [[EventEmitter]] to be set\n   * @return {?}\n   */\n\n\n  _createClass(NextStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     * @param {?} event\n     * @return {?}\n     */\n    value: function onClick(event) {\n      this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * The navigation mode\n     * @return {?}\n     */\n\n  }, {\n    key: \"navigationMode\",\n    get: function get() {\n      return this.wizardState.navigationMode;\n    }\n  }]);\n\n  return NextStepDirective;\n}();\n\nNextStepDirective.ɵfac = function NextStepDirective_Factory(t) {\n  return new (t || NextStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardState));\n};\n\nNextStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NextStepDirective,\n  selectors: [[\"\", \"awNextStep\", \"\"]],\n  hostBindings: function NextStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n/** @nocollapse */\n\nNextStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }];\n};\n\nNextStepDirective.propDecorators = {\n  \"preFinalize\": [{\n    type: Output\n  }],\n  \"postFinalize\": [{\n    type: Output\n  }],\n  \"finalize\": [{\n    type: Output\n  }],\n  \"onClick\": [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NextStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNextStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     * @param {?} event\n     * @return {?}\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar OptionalStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  function OptionalStepDirective(wizardStep) {\n    _classCallCheck(this, OptionalStepDirective);\n\n    this.wizardStep = wizardStep;\n  }\n  /**\n   * Initialization work\n   * @return {?}\n   */\n\n\n  _createClass(OptionalStepDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.wizardStep.optional = true;\n    }\n  }]);\n\n  return OptionalStepDirective;\n}();\n\nOptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) {\n  return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\n\nOptionalStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: OptionalStepDirective,\n  selectors: [[\"\", \"awOptionalStep\", \"\"]]\n});\n/** @nocollapse */\n\nOptionalStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awOptionalStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar PreviousStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The state of the wizard\n   */\n  function PreviousStepDirective(wizardState) {\n    _classCallCheck(this, PreviousStepDirective);\n\n    this.wizardState = wizardState;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param {?} emitter The [[EventEmitter]] to be set\n   * @return {?}\n   */\n\n\n  _createClass(PreviousStepDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     * @param {?} event\n     * @return {?}\n     */\n    value: function onClick(event) {\n      this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n    }\n  }, {\n    key: \"finalize\",\n    set: function set(emitter) {\n      /* istanbul ignore next */\n      this.preFinalize = emitter;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      return this.preFinalize;\n    }\n    /**\n     * The navigation mode\n     * @return {?}\n     */\n\n  }, {\n    key: \"navigationMode\",\n    get: function get() {\n      return this.wizardState.navigationMode;\n    }\n  }]);\n\n  return PreviousStepDirective;\n}();\n\nPreviousStepDirective.ɵfac = function PreviousStepDirective_Factory(t) {\n  return new (t || PreviousStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardState));\n};\n\nPreviousStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: PreviousStepDirective,\n  selectors: [[\"\", \"awPreviousStep\", \"\"]],\n  hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\n/** @nocollapse */\n\nPreviousStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }];\n};\n\nPreviousStepDirective.propDecorators = {\n  \"preFinalize\": [{\n    type: Output\n  }],\n  \"postFinalize\": [{\n    type: Output\n  }],\n  \"finalize\": [{\n    type: Output\n  }],\n  \"onClick\": [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PreviousStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awPreviousStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     * @param {?} event\n     * @return {?}\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar ResetWizardDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardState The wizard state\n   */\n  function ResetWizardDirective(wizardState) {\n    _classCallCheck(this, ResetWizardDirective);\n\n    this.wizardState = wizardState;\n    /**\n     * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n     */\n\n    this.finalize = new EventEmitter();\n  }\n  /**\n   * The navigation mode\n   * @return {?}\n   */\n\n\n  _createClass(ResetWizardDirective, [{\n    key: \"onClick\",\n\n    /**\n     * Resets the wizard\n     * @param {?} event\n     * @return {?}\n     */\n    value: function onClick(event) {\n      // do some optional cleanup work\n      this.finalize.emit(); // reset the wizard to its initial state\n\n      this.navigationMode.reset();\n    }\n  }, {\n    key: \"navigationMode\",\n    get: function get() {\n      return this.wizardState.navigationMode;\n    }\n  }]);\n\n  return ResetWizardDirective;\n}();\n\nResetWizardDirective.ɵfac = function ResetWizardDirective_Factory(t) {\n  return new (t || ResetWizardDirective)(ɵngcc0.ɵɵdirectiveInject(WizardState));\n};\n\nResetWizardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ResetWizardDirective,\n  selectors: [[\"\", \"awResetWizard\", \"\"]],\n  hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  outputs: {\n    finalize: \"finalize\"\n  }\n});\n/** @nocollapse */\n\nResetWizardDirective.ctorParameters = function () {\n  return [{\n    type: WizardState\n  }];\n};\n\nResetWizardDirective.propDecorators = {\n  \"finalize\": [{\n    type: Output\n  }],\n  \"onClick\": [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetWizardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awResetWizard]'\n    }]\n  }], function () {\n    return [{\n      type: WizardState\n    }];\n  }, {\n    finalize: [{\n      type: Output\n    }],\n\n    /**\n     * Resets the wizard\n     * @param {?} event\n     * @return {?}\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar SelectedStepDirective = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param {?} wizardStep The wizard step, which should be selected by default\n   */\n  function SelectedStepDirective(wizardStep) {\n    _classCallCheck(this, SelectedStepDirective);\n\n    this.wizardStep = wizardStep;\n  }\n  /**\n   * Initialization work\n   * @return {?}\n   */\n\n\n  _createClass(SelectedStepDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.wizardStep.defaultSelected = true;\n    }\n  }]);\n\n  return SelectedStepDirective;\n}();\n\nSelectedStepDirective.ɵfac = function SelectedStepDirective_Factory(t) {\n  return new (t || SelectedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\n\nSelectedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SelectedStepDirective,\n  selectors: [[\"\", \"awSelectedStep\", \"\"]]\n});\n/** @nocollapse */\n\nSelectedStepDirective.ctorParameters = function () {\n  return [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awSelectedStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardCompletionStepDirective = /*#__PURE__*/function (_WizardCompletionStep2) {\n  _inherits(WizardCompletionStepDirective, _WizardCompletionStep2);\n\n  var _super7 = _createSuper(WizardCompletionStepDirective);\n\n  function WizardCompletionStepDirective() {\n    _classCallCheck(this, WizardCompletionStepDirective);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return WizardCompletionStepDirective;\n}(WizardCompletionStep);\n\nWizardCompletionStepDirective.ɵfac = function WizardCompletionStepDirective_Factory(t) {\n  return ɵWizardCompletionStepDirective_BaseFactory(t || WizardCompletionStepDirective);\n};\n\nWizardCompletionStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStepDirective,\n  selectors: [[\"\", \"awWizardCompletionStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepDirective;\n    })\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(function () {\n      return WizardCompletionStepDirective;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nWizardCompletionStepDirective.ctorParameters = function () {\n  return [];\n};\n\nvar ɵWizardCompletionStepDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardCompletionStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepDirective;\n        })\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(function () {\n          return WizardCompletionStepDirective;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n\n\nvar WizardStepDirective = /*#__PURE__*/function (_WizardStep3) {\n  _inherits(WizardStepDirective, _WizardStep3);\n\n  var _super8 = _createSuper(WizardStepDirective);\n\n  function WizardStepDirective() {\n    _classCallCheck(this, WizardStepDirective);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return WizardStepDirective;\n}(WizardStep);\n\nWizardStepDirective.ɵfac = function WizardStepDirective_Factory(t) {\n  return ɵWizardStepDirective_BaseFactory(t || WizardStepDirective);\n};\n\nWizardStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepDirective,\n  selectors: [[\"\", \"awWizardStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(function () {\n      return WizardStepDirective;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nWizardStepDirective.ctorParameters = function () {\n  return [];\n};\n\nvar ɵWizardStepDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(WizardStepDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(function () {\n          return WizardStepDirective;\n        })\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n\n\nvar ArchwizardModule = /*#__PURE__*/function () {\n  function ArchwizardModule() {\n    _classCallCheck(this, ArchwizardModule);\n  }\n\n  _createClass(ArchwizardModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * @return {?}\n     */\n    value: function forRoot() {\n      return {\n        ngModule: ArchwizardModule,\n        providers: []\n      };\n    }\n  }]);\n\n  return ArchwizardModule;\n}();\n\nArchwizardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ArchwizardModule\n});\nArchwizardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ArchwizardModule_Factory(t) {\n    return new (t || ArchwizardModule)();\n  },\n  imports: [[CommonModule]]\n});\n/** @nocollapse */\n\nArchwizardModule.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ArchwizardModule, {\n    declarations: function declarations() {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ArchwizardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective],\n      imports: [CommonModule],\n      exports: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArchwizardModule, WizardComponent, WizardCompletionStepComponent, WizardNavigationBarComponent, WizardStepComponent, EnableBackLinksDirective, GoToStepDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStepDirective, WizardStepDirective, WizardStepTitleDirective, FreeNavigationMode, NavigationMode, SemiStrictNavigationMode, StrictNavigationMode, WizardState, navigationModeFactory, MovingDirection, WizardCompletionStep, WizardStep, isStepId, isStepIndex, isStepOffset, WizardCompletionStepComponent as ɵg, WizardNavigationBarComponent as ɵf, WizardStepComponent as ɵe, WizardComponent as ɵa, EnableBackLinksDirective as ɵm, GoToStepDirective as ɵi, NextStepDirective as ɵj, OptionalStepDirective as ɵl, PreviousStepDirective as ɵk, ResetWizardDirective as ɵq, SelectedStepDirective as ɵp, WizardCompletionStepDirective as ɵo, WizardStepTitleDirective as ɵd, WizardStepDirective as ɵn, WizardState as ɵb, WizardCompletionStep as ɵh, WizardStep as ɵc };","map":{"version":3,"sources":["angular-archwizard/out/directives/wizard-step-title.directive.ts","angular-archwizard/out/util/wizard-step.interface.ts","angular-archwizard/out/navigation/navigation-mode.interface.ts","angular-archwizard/out/navigation/free-navigation-mode.ts","angular-archwizard/out/util/wizard-completion-step.interface.ts","angular-archwizard/out/navigation/semi-strict-navigation-mode.ts","angular-archwizard/out/navigation/strict-navigation-mode.ts","angular-archwizard/out/navigation/navigation-mode.provider.ts","angular-archwizard/out/navigation/wizard-state.model.ts","angular-archwizard/out/components/wizard.component.ts","angular-archwizard/out/components/wizard-completion-step.component.ts","angular-archwizard/out/components/wizard-navigation-bar.component.ts","angular-archwizard/out/components/wizard-step.component.ts","angular-archwizard/out/directives/enable-back-links.directive.ts","angular-archwizard/out/util/step-offset.interface.ts","angular-archwizard/out/util/step-id.interface.ts","angular-archwizard/out/util/step-index.interface.ts","angular-archwizard/out/directives/go-to-step.directive.ts","angular-archwizard/out/directives/next-step.directive.ts","angular-archwizard/out/directives/optional-step.directive.ts","angular-archwizard/out/directives/previous-step.directive.ts","angular-archwizard/out/directives/reset-wizard.directive.ts","angular-archwizard/out/directives/selected-step.directive.ts","angular-archwizard/out/directives/wizard-completion-step.directive.ts","angular-archwizard/out/directives/wizard-step.directive.ts","angular-archwizard/out/archwizard.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by marc on 01.06.17.\n */\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","import {MovingDirection} from './moving-direction.enum';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {isBoolean} from 'util';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (isBoolean(condition)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n */\nexport abstract class NavigationMode {\n  constructor(protected wizardState: WizardState) {\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination step\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n\n  /**\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  abstract isNavigable(destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  abstract reset(): void;\n\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   */\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasPreviousStep()) {\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n  }\n\n  /**\n   * Tries to transition the wizard to the next step from the `currentStep`\n   */\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasNextStep()) {\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\nexport class FreeNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    return true;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete\n    this.completed = false;\n    this.stepExit.emit(direction);\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\nexport class SemiStrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n    const destinationStep = (previous: boolean) => {\n      if (previous) {\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex)\n          .every(step => step.completed || step.optional || step.selected);\n\n        return Promise.resolve(\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(destinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isNavigable(destinationIndex: number): boolean {\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n    } else {\n      // a \"normal\" step can always be entered\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n      this.wizardState.wizardSteps.length !== 1;\n\n    if (defaultCompletionStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\nexport class StrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const allPreviousStepsComplete = (previous: boolean) => {\n      if (previous) {\n        return Promise.resolve(this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\n          .every(step => step.completed || step.optional)\n        );\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(allPreviousStepsComplete);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - all steps between the old current step and the destination step are marked as incomplete\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        // set all steps after the destination step to incomplete\n        this.wizardState.wizardSteps\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\n          .forEach(step => step.completed = false);\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n    return destinationIndex < this.wizardState.currentStepIndex;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // at least one step is before the default step, that is not optional\n    const illegalDefaultStep = this.wizardState.wizardSteps\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\n      .some(step => !step.optional);\n\n    if (illegalDefaultStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {FreeNavigationMode} from './free-navigation-mode';\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\nimport {StrictNavigationMode} from './strict-navigation-mode';\n\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param navigationMode The name of the to be used navigation mode\n * @param wizardState The wizard state of the wizard\n * @returns The created [[NavigationMode]]\n */\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n};\n","import {Injectable} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {navigationModeFactory} from './navigation-mode.provider';\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n@Injectable()\nexport class WizardState {\n  /**\n   * The initial step index, as taken from the [[WizardComponent]]\n   */\n  private _defaultStepIndex = 0;\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public wizardSteps: Array<WizardStep> = [];\n\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param defaultStepIndex The new default wizard step index\n   */\n  public set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n\n  /**\n   * The initial step index.\n   * This value can be either:\n   * - the index of a wizard step with a `selected` directive, or\n   * - the default step index, set in the [[WizardComponent]]\n   */\n  public get defaultStepIndex(): number {\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  };\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public navigationMode: NavigationMode;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  public disableNavigationBar: boolean;\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Updates the navigation mode to the navigation mode with the given name\n   *\n   * @param updatedNavigationMode The name of the new navigation mode\n   */\n  updateNavigationMode(updatedNavigationMode: string): void {\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param updatedWizardSteps The updated wizard steps\n   */\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this.wizardSteps = updatedWizardSteps;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  template: `<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'top' || navBarLocation == 'left'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'left',\n    horizontal: navBarLocation == 'top',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n\n<div [ngClass]=\"{\n  'wizard-steps': true,\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\n}\">\n  <ng-content></ng-content>\n</div>\n\n<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'bottom' || navBarLocation == 'right'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'right',\n    horizontal: navBarLocation == 'bottom',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n`,\n  styles: [`aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WizardState]\n})\nexport class WizardComponent implements OnChanges, AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardSteps: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The navigation mode used for transitioning between different steps.\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\n   */\n  @Input()\n  public navigationMode = 'strict';\n\n  /**\n   * The initially selected step, represented by its index\n   */\n  @Input()\n  public defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * The navigation mode for this wizard\n   */\n  public get navigation(): NavigationMode {\n    return this.model.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param model The model for this wizard component\n   */\n  constructor(public model: WizardState) {\n  }\n\n  /**\n   * Updates the model after certain input values have changed\n   *\n   * @param changes The detected changes\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    for (const propName of Object.keys(changes)) {\n      let change = changes[propName];\n\n      if (!change.firstChange) {\n        switch (propName) {\n          case 'defaultStepIndex':\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n            break;\n          case 'disableNavigationBar':\n            this.model.disableNavigationBar = change.currentValue;\n            break;\n          case 'navigationMode':\n            this.model.updateNavigationMode(change.currentValue);\n            break;\n          /* istanbul ignore next */\n          default:\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.model.disableNavigationBar = this.disableNavigationBar;\n    this.model.defaultStepIndex = this.defaultStepIndex;\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\n    this.model.updateNavigationMode(this.navigationMode);\n\n    // finally reset the whole wizard state\n    this.navigation.reset();\n  }\n}\n","/**\n * Created by marc on 20.05.17.\n */\n\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-completion-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  template: `<ul class=\"steps-indicator steps-{{numberOfWizardSteps}}\">\n  <li *ngFor=\"let step of wizardSteps\"\n      [attr.step-symbol]=\"step.navigationSymbol.symbol\"\n      [ngStyle]=\"{\n        'font-family': step.navigationSymbol.fontFamily\n      }\"\n      [ngClass]=\"{\n        default: isDefault(step),\n        current: isCurrent(step),\n        done: isDone(step),\n        editing: isEditing(step),\n        optional: isOptional(step),\n        navigable: isNavigable(step)\n  }\">\n    <div>\n      <a [awGoToStep]=\"step\">\n        <ng-container *ngIf=\"step.stepTitleTemplate\" [ngTemplateOutlet]=\"step.stepTitleTemplate.templateRef\"></ng-container>\n        <ng-container *ngIf=\"!step.stepTitleTemplate\">{{step.stepTitle}}</ng-container>\n      </a>\n    </div>\n  </li>\n</ul>\n`,\n  styles: [`aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}`, `aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}`],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * The navigation mode\n   */\n  public get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state the wizard currently resides in\n   */\n  constructor(public wizardState: WizardState) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizardState.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizardState.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizardState.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as current\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as done\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as default\n   */\n  public isDefault(wizardStep: WizardStep): boolean {\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as editing\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as optional\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * Created by marc on 09.01.17.\n */\n\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: Event): void {\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.navigationMode.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {WizardComponent} from './components/wizard.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\n\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot(): ModuleWithProviders {\n    return {ngModule: ArchwizardModule, providers: []};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}