{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CountdownComponent_div_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.divider, \" \");\n  }\n}\n\nfunction CountdownComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"p\", 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, CountdownComponent_div_1_span_3_Template, 2, 1, \"span\", 3);\n    ɵngcc0.ɵɵelementStart(4, \"p\", 4);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var time_r1 = ctx.$implicit;\n    var i_r2 = ctx.index;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"measurements \", time_r1, \"\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.showZero && ctx_r0.displayNumbers[i_r2] < 10 ? \"0\" + ctx_r0.displayNumbers[i_r2].trim() : ctx_r0.displayNumbers[i_r2], \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.display[i_r2 + 1]);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", time_r1, \" \");\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar CountdownComponent = /*#__PURE__*/function () {\n  function CountdownComponent() {\n    var _this = this;\n\n    _classCallCheck(this, CountdownComponent);\n\n    this.displayString = '';\n    this.showZero = false;\n    this.reached = new EventEmitter();\n    this.display = [];\n    this.displayNumbers = [];\n    this.wasReached = false;\n    setInterval(function () {\n      return _this._displayString();\n    }, 100);\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(CountdownComponent, [{\n    key: \"_displayString\",\n    value: function _displayString() {\n      if (this.wasReached) return;\n\n      if (typeof this.units === 'string') {\n        this.units = this.units.split('|');\n      }\n      /** @type {?} */\n\n\n      var givenDate = new Date(this.end);\n      /** @type {?} */\n\n      var now = new Date();\n      /** @type {?} */\n\n      var dateDifference = givenDate - now;\n\n      if (dateDifference < 100 && dateDifference > 0 || dateDifference < 0 && !this.wasReached) {\n        this.wasReached = true;\n        this.reached.next(now);\n      }\n      /** @type {?} */\n\n\n      var lastUnit = this.units[this.units.length - 1];\n      /** @type {?} */\n\n      var unitConstantForMillisecs = {\n        year: 1000 * 60 * 60 * 24 * 7 * 4 * 12,\n        month: 1000 * 60 * 60 * 24 * 7 * 4,\n        weeks: 1000 * 60 * 60 * 24 * 7,\n        days: 1000 * 60 * 60 * 24,\n        hours: 1000 * 60 * 60,\n        minutes: 1000 * 60,\n        seconds: 1000\n      };\n      /** @type {?} */\n\n      var unitsLeft = {};\n      /** @type {?} */\n\n      var returnText = '';\n      /** @type {?} */\n\n      var returnNumbers = '';\n      /** @type {?} */\n\n      var totalMillisecsLeft = dateDifference;\n      /** @type {?} */\n\n      var i;\n      /** @type {?} */\n\n      var unit;\n\n      for (i in this.units) {\n        if (this.units.hasOwnProperty(i)) {\n          unit = this.units[i].trim();\n\n          if (unitConstantForMillisecs[unit.toLowerCase()] === false) {\n            //$interval.cancel(countDownInterval);\n            throw new Error('Cannot repeat unit: ' + unit);\n          }\n\n          if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {\n            throw new Error('Unit: ' + unit + ' is not supported. Please use following units: year, month, weeks, days, hours, minutes, seconds, milliseconds');\n          } // If it was reached, everything is zero\n\n\n          unitsLeft[unit] = this.wasReached ? 0 : totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];\n\n          if (lastUnit === unit) {\n            unitsLeft[unit] = Math.ceil(unitsLeft[unit]);\n          } else {\n            unitsLeft[unit] = Math.floor(unitsLeft[unit]);\n          }\n\n          totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];\n          unitConstantForMillisecs[unit.toLowerCase()] = false; // If it's less than 0, round to 0\n\n          unitsLeft[unit] = unitsLeft[unit] > 0 ? unitsLeft[unit] : 0;\n          returnNumbers += ' ' + unitsLeft[unit] + ' | ';\n          returnText += ' ' + unit;\n        }\n      }\n\n      if (this.text === null || !this.text) {\n        this.text = {\n          Year: 'Year',\n          Month: 'Month',\n          Weeks: 'Weeks',\n          Days: 'Days',\n          Hours: 'Hours',\n          Minutes: 'Minutes',\n          Seconds: 'Seconds',\n          MilliSeconds: 'Milliseconds'\n        };\n      }\n\n      this.displayString = returnText.replace('Year', this.text.Year + ' | ').replace('Month', this.text.Month + ' | ').replace('Weeks', this.text.Weeks + ' | ').replace('Days', this.text.Days + ' | ').replace('Hours', this.text.Hours + ' | ').replace('Minutes', this.text.Minutes + ' | ').replace('Seconds', this.text.Seconds);\n      this.displayNumbers = returnNumbers.split('|');\n      this.display = this.displayString.split('|');\n    }\n  }]);\n\n  return CountdownComponent;\n}();\n\nCountdownComponent.ɵfac = function CountdownComponent_Factory(t) {\n  return new (t || CountdownComponent)();\n};\n\nCountdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CountdownComponent,\n  selectors: [[\"countdown\"]],\n  inputs: {\n    displayString: \"displayString\",\n    showZero: \"showZero\",\n    units: \"units\",\n    text: \"text\",\n    end: \"end\",\n    divider: \"divider\"\n  },\n  outputs: {\n    reached: \"reached\"\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 1,\n  consts: [[1, \"countdown\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"measurements-number\"], [\"class\", \"divider\", 4, \"ngIf\"], [1, \"measurements-text\"], [1, \"divider\"]],\n  template: function CountdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, CountdownComponent_div_1_Template, 6, 6, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.display);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n  styles: [\".countdown[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]{flex:.1}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{float:right}\"]\n});\n/** @nocollapse */\n\nCountdownComponent.ctorParameters = function () {\n  return [];\n};\n\nCountdownComponent.propDecorators = {\n  units: [{\n    type: Input\n  }],\n  end: [{\n    type: Input\n  }],\n  displayString: [{\n    type: Input\n  }],\n  text: [{\n    type: Input\n  }],\n  divider: [{\n    type: Input\n  }],\n  showZero: [{\n    type: Input\n  }],\n  reached: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountdownComponent, [{\n    type: Component,\n    args: [{\n      selector: 'countdown',\n      template: \"<div class=\\\"countdown\\\">\\n  <div *ngFor=\\\"let time of display; let i = index\\\" class=\\\"measurements {{time}}\\\">\\n    <p class=\\\"measurements-number\\\">\\n      {{ (showZero && displayNumbers[i] < 10) ? '0' + displayNumbers[i].trim() : displayNumbers[i]}}\\n    </p>\\n    <span *ngIf=\\\"display[i+1]\\\" class=\\\"divider\\\"> {{divider}} </span>\\n    <p class=\\\"measurements-text\\\">\\n      {{time}}\\n    </p>\\n  </div>\\n</div>\\n<ng-content></ng-content>\",\n      styles: [\".countdown{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif}.countdown .measurements{flex:.1}.countdown .measurements .divider{float:right}\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    displayString: [{\n      type: Input\n    }],\n    showZero: [{\n      type: Input\n    }],\n    reached: [{\n      type: Output\n    }],\n    units: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    end: [{\n      type: Input\n    }],\n    divider: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\n\nvar CountdownModule = function CountdownModule() {\n  _classCallCheck(this, CountdownModule);\n};\n\nCountdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CountdownModule\n});\nCountdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CountdownModule_Factory(t) {\n    return new (t || CountdownModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountdownModule, {\n    declarations: function declarations() {\n      return [CountdownComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CountdownComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountdownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CountdownComponent],\n      exports: [CountdownComponent]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\n\n\nexport { CountdownComponent, CountdownModule };","map":{"version":3,"sources":["ng2-countdown-timer/lib/countdown/countdown.component.ts","ng2-countdown-timer/lib/countdown.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,kB;AA+BE,gCAAA;AAAA;;AAAA;;AACF,SAAA,aAAA,GAVmC,EAUnC;AATA,SAAA,QAAA,GAE+B,KAF/B;AAGA,SAAA,OAAA,GAA0C,IAAI,YAAJ,EAA1C;AACA,SAAA,OAAA,GAAiB,EAAjB;AACA,SAAA,cAAA,GAAwB,EAAxB;AACA,SAAA,UAAA,GAAwB,KAAxB;AAGI,IAAA,WAAW,CAAC;AAAA,aAAM,KAAI,CAAC,cAAL,EAAN;AAAA,KAAD,EAA8B,GAA9B,CAAX;AACD;AACH;AACO;AACF;;;;;qCADW;AACZ,UAAI,KAAK,UAAT,EACE;;AAEF,UAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;AAClC,aAAK,KAAL,GAAa,KAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAb;AACD;AACL;;;AACI,UAAI,SAAS,GAAQ,IAAI,IAAJ,CAAS,KAAK,GAAd,CAArB;AACJ;;AAAI,UAAI,GAAG,GAAQ,IAAI,IAAJ,EAAf;AACJ;;AAAI,UAAI,cAAc,GAAQ,SAAS,GAAG,GAAtC;;AAEA,UAAK,cAAc,GAAG,GAAjB,IAAwB,cAAc,GAAG,CAA1C,IAAgD,cAAc,GAAG,CAAjB,IAAsB,CAAC,KAAK,UAAhF,EAA4F;AAC1F,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,OAAL,CAAa,IAAb,CAAkB,GAAlB;AACD;AACL;;;AACI,UAAI,QAAQ,GAAG,KAAK,KAAL,CAAW,KAAK,KAAL,CAAW,MAAX,GAAoB,CAA/B,CAAf;AAgBJ;;AAhBI,UACE,wBAAwB,GAAG;AACzB,QAAA,IAAI,EAAK,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CAAvB,GAA4B,CAA7B,GAAkC,EADhB;AAEzB,QAAA,KAAK,EAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CAAvB,GAA4B,CAFX;AAGzB,QAAA,KAAK,EAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CAHL;AAIzB,QAAA,IAAI,EAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAJC;AAKzB,QAAA,KAAK,EAAG,OAAO,EAAP,GAAY,EALK;AAMzB,QAAA,OAAO,EAAG,OAAO,EANQ;AAOzB,QAAA,OAAO,EAAE;AAPgB,OAD7B;AAgBJ;;AAhBI,UAUE,SAAS,GAAG,EAVd;AAgBJ;;AAhBI,UAWE,UAAU,GAAG,EAXf;AAgBJ;;AAhBI,UAYE,aAAa,GAAG,EAZlB;AAgBJ;;AAhBI,UAaE,kBAAkB,GAAG,cAbvB;AAgBJ;;AAhBI,UAcE,CAdF;AAgBJ;;AAhBI,UAeE,IAfF;;AAiBA,WAAK,CAAL,IAAU,KAAK,KAAf,EAAsB;AACpB,YAAI,KAAK,KAAL,CAAW,cAAX,CAA0B,CAA1B,CAAJ,EAAkC;AAEhC,UAAA,IAAI,GAAG,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,EAAP;;AACA,cAAI,wBAAwB,CAAC,IAAI,CAAC,WAAL,EAAD,CAAxB,KAAiD,KAArD,EAA4D;AACpE;AACU,kBAAM,IAAI,KAAJ,CAAU,yBAAyB,IAAnC,CAAN;AAED;;AACD,cAAI,wBAAwB,CAAC,cAAzB,CAAwC,IAAI,CAAC,WAAL,EAAxC,MAAgE,KAApE,EAA2E;AACzE,kBAAM,IAAI,KAAJ,CAAU,WAAW,IAAX,GAAkB,gHAA5B,CAAN;AACD,WAV+B,CAWxC;;;AAEQ,UAAA,SAAS,CAAC,IAAD,CAAT,GAAmB,KAAK,UAAN,GAAoB,CAApB,GAAwB,kBAAkB,GAAG,wBAAwB,CAAC,IAAI,CAAC,WAAL,EAAD,CAAvF;;AAEA,cAAI,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAA,SAAS,CAAC,IAAD,CAAT,GAAkB,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,IAAD,CAAnB,CAAlB;AACD,WAFD,MAEO;AACL,YAAA,SAAS,CAAC,IAAD,CAAT,GAAkB,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,IAAD,CAApB,CAAlB;AACD;;AAED,UAAA,kBAAkB,IAAI,SAAS,CAAC,IAAD,CAAT,GAAkB,wBAAwB,CAAC,IAAI,CAAC,WAAL,EAAD,CAAhE;AACA,UAAA,wBAAwB,CAAC,IAAI,CAAC,WAAL,EAAD,CAAxB,GAA+C,KAA/C,CAtBgC,CAuBxC;;AAEQ,UAAA,SAAS,CAAC,IAAD,CAAT,GAAmB,SAAS,CAAC,IAAD,CAAT,GAAkB,CAAnB,GAAwB,SAAS,CAAC,IAAD,CAAjC,GAA0C,CAA5D;AAEA,UAAA,aAAa,IAAI,MAAM,SAAS,CAAC,IAAD,CAAf,GAAwB,KAAzC;AACA,UAAA,UAAU,IAAI,MAAM,IAApB;AACD;AACF;;AAED,UAAI,KAAK,IAAL,KAAc,IAAd,IAAsB,CAAC,KAAK,IAAhC,EAAsC;AACpC,aAAK,IAAL,GAAY;AACV,UAAA,IAAI,EAAE,MADI;AAEV,UAAA,KAAK,EAAE,OAFG;AAGV,UAAA,KAAK,EAAE,OAHG;AAIV,UAAA,IAAI,EAAE,MAJI;AAKV,UAAA,KAAK,EAAE,OALG;AAMV,UAAA,OAAO,EAAE,SANC;AAOV,UAAA,OAAO,EAAE,SAPC;AAQV,UAAA,YAAY,EAAE;AARJ,SAAZ;AAUD;;AAED,WAAK,aAAL,GAAqB,UAAU,CAC5B,OADkB,CACV,MADU,EACF,KAAK,IAAL,CAAU,IAAV,GAAiB,KADf,EAElB,OAFkB,CAEV,OAFU,EAED,KAAK,IAAL,CAAU,KAAV,GAAkB,KAFjB,EAGlB,OAHkB,CAGV,OAHU,EAGD,KAAK,IAAL,CAAU,KAAV,GAAkB,KAHjB,EAIlB,OAJkB,CAIV,MAJU,EAIF,KAAK,IAAL,CAAU,IAAV,GAAiB,KAJf,EAKlB,OALkB,CAKV,OALU,EAKD,KAAK,IAAL,CAAU,KAAV,GAAkB,KALjB,EAMlB,OANkB,CAMV,SANU,EAMC,KAAK,IAAL,CAAU,OAAV,GAAoB,KANrB,EAOlB,OAPkB,CAOV,SAPU,EAOC,KAAK,IAAL,CAAU,OAPX,CAArB;AASA,WAAK,cAAL,GAAsB,aAAa,CAAC,KAAd,CAAoB,GAApB,CAAtB;AACA,WAAK,OAAL,GAAe,KAAK,aAAL,CAAmB,KAAnB,CAAyB,GAAzB,CAAf;AACD;;;;;;mCA5HF,0B,CAAS,C,EAAA;AAAC,SAAA,KAAA,CAAA,IAAA,kBAAA,GAAA;AACY,C;;AACrB,kBAAA,CAAA,IAAA,GAAU,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,kBAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,WAAA,CAAA,CAAA;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA;AAAA,EAAA,OAAA,EAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA;AAAA,EAAA,kBAAA,EAAA,GAAA;AAAA,EAAA,KAAA,EAAA,CAAA;AAAA,EAAA,IAAA,EAAA,CAAA;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,WAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,qBAAA,CAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,mBAAA,CAAA,EAWc,CAAA,CAAA,EAAA,SAAA,CAXd,CAAA;AAYV,EAAA,QAAS,EAAA,SAAA,2BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;2EAAgO,C;YAC1O,CAAA,Y;;;;;;;;GAbW;2CAAA;WAcN,0V;AAdM,CAAA,CAAV;AAcM;;AAAoB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,EAAA;AAAA,CAAA;;AAGd,kBAAA,CAAA,cAAA,GAAA;AACiB,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAF5B;AAE4B,GAAA,CADjB;AADA,EAAA,GAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA,CACA;AAAA,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA,CAAA;AACA,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA,CADA;AAEA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA,CAFA;AAGA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA,CAHA;AAIA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACX;AADW,GAAA;AAJA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKE,C;AAAI;AAAK;AAAmC;AAG/C;;;IC7Bb,e;;;;8BAIC,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,eAAS,CAAC,IAAV,GAAU,MAAa,CAAA,gBAAb,CAAa;AACvB,EAAA,OAAA,EAAA,SAAc,uBAAd,CACE,CADF,EACE;AAAA,WAAkB,KAAA,CAAA,IAAA,eAAA,GAAlB;AACD,GAHsB;AAGtB,EAAA,OACD,EAAA,CAAA,CAAA,YAAA,CAAA;AAJuB,CAAb,CAAV;;CAKE,YAAA;AAAA,GAAA,OAAA,SAAA,KAAkB,WAAlB,IACD,SADC,KAEH,MAAA,CAAA,kBAAA,CAAA,eAAA,EAAA;AAAA,IAAA,YAAA,EAAA,wBAAA;AAAA,aAAA,CAAA,kBAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,YAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,kBAAA,CAAA;AAAA;AAAA,GAAA,CAFG;AAEH,C;;;;;;;;;;;AACK,C;AAAI;AAAK;AACC;AAAmE;;AAAO;AAAK;AAAmC;AAAmE","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'countdown',\r\n  template: `<div class=\"countdown\">\r\n  <div *ngFor=\"let time of display; let i = index\" class=\"measurements {{time}}\">\r\n    <p class=\"measurements-number\">\r\n      {{ (showZero && displayNumbers[i] < 10) ? '0' + displayNumbers[i].trim() : displayNumbers[i]}}\r\n    </p>\r\n    <span *ngIf=\"display[i+1]\" class=\"divider\"> {{divider}} </span>\r\n    <p class=\"measurements-text\">\r\n      {{time}}\r\n    </p>\r\n  </div>\r\n</div>\r\n<ng-content></ng-content>`,\r\n  styles: [`.countdown{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif}.countdown .measurements{flex:.1}.countdown .measurements .divider{float:right}`]\r\n})\r\nexport class CountdownComponent {\r\n\r\n  @Input() units: any;\r\n  @Input() end: any;\r\n  @Input() displayString: String = '';\r\n  @Input() text: any;\r\n  @Input() divider: any;\r\n  @Input() showZero: Boolean = false;\r\n  @Output() reached: EventEmitter<Date> = new EventEmitter();\r\n  display: any = [];\r\n  displayNumbers: any = [];\r\n  wasReached: Boolean = false;\r\n\r\n  constructor() {\r\n    setInterval(() => this._displayString(), 100);\r\n  }\r\n\r\n  _displayString() {\r\n    if (this.wasReached)\r\n      return;\r\n\r\n    if (typeof this.units === 'string') {\r\n      this.units = this.units.split('|');\r\n    }\r\n\r\n    let givenDate: any = new Date(this.end);\r\n    let now: any = new Date();\r\n    let dateDifference: any = givenDate - now;\r\n\r\n    if ((dateDifference < 100 && dateDifference > 0) || dateDifference < 0 && !this.wasReached) {\r\n      this.wasReached = true;\r\n      this.reached.next(now);\r\n    }\r\n\r\n    let lastUnit = this.units[this.units.length - 1],\r\n      unitConstantForMillisecs = {\r\n        year: (((1000 * 60 * 60 * 24 * 7) * 4) * 12),\r\n        month: ((1000 * 60 * 60 * 24 * 7) * 4),\r\n        weeks: (1000 * 60 * 60 * 24 * 7),\r\n        days: (1000 * 60 * 60 * 24),\r\n        hours: (1000 * 60 * 60),\r\n        minutes: (1000 * 60),\r\n        seconds: 1000\r\n      },\r\n      unitsLeft = {},\r\n      returnText = '',\r\n      returnNumbers = '',\r\n      totalMillisecsLeft = dateDifference,\r\n      i,\r\n      unit: any;\r\n\r\n    for (i in this.units) {\r\n      if (this.units.hasOwnProperty(i)) {\r\n\r\n        unit = this.units[i].trim();\r\n        if (unitConstantForMillisecs[unit.toLowerCase()] === false) {\r\n          //$interval.cancel(countDownInterval);\r\n          throw new Error('Cannot repeat unit: ' + unit);\r\n\r\n        }\r\n        if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {\r\n          throw new Error('Unit: ' + unit + ' is not supported. Please use following units: year, month, weeks, days, hours, minutes, seconds, milliseconds');\r\n        }\r\n\r\n        // If it was reached, everything is zero\r\n        unitsLeft[unit] = (this.wasReached) ? 0 : totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];\r\n\r\n        if (lastUnit === unit) {\r\n          unitsLeft[unit] = Math.ceil(unitsLeft[unit]);\r\n        } else {\r\n          unitsLeft[unit] = Math.floor(unitsLeft[unit]);\r\n        }\r\n\r\n        totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];\r\n        unitConstantForMillisecs[unit.toLowerCase()] = false;\r\n\r\n        // If it's less than 0, round to 0\r\n        unitsLeft[unit] = (unitsLeft[unit] > 0) ? unitsLeft[unit] : 0;\r\n\r\n        returnNumbers += ' ' + unitsLeft[unit] + ' | ';\r\n        returnText += ' ' + unit;\r\n      }\r\n    }\r\n\r\n    if (this.text === null || !this.text) {\r\n      this.text = {\r\n        Year: 'Year',\r\n        Month: 'Month',\r\n        Weeks: 'Weeks',\r\n        Days: 'Days',\r\n        Hours: 'Hours',\r\n        Minutes: 'Minutes',\r\n        Seconds: 'Seconds',\r\n        MilliSeconds: 'Milliseconds'\r\n      };\r\n    }\r\n\r\n    this.displayString = returnText\r\n      .replace('Year', this.text.Year + ' | ')\r\n      .replace('Month', this.text.Month + ' | ')\r\n      .replace('Weeks', this.text.Weeks + ' | ')\r\n      .replace('Days', this.text.Days + ' | ')\r\n      .replace('Hours', this.text.Hours + ' | ')\r\n      .replace('Minutes', this.text.Minutes + ' | ')\r\n      .replace('Seconds', this.text.Seconds);\r\n\r\n    this.displayNumbers = returnNumbers.split('|');\r\n    this.display = this.displayString.split('|');\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';  \r\nimport { CountdownComponent } from './countdown/countdown.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    CountdownComponent\r\n  ],\r\n  exports: [\r\n    CountdownComponent,\r\n  ]\r\n})\r\nexport class CountdownModule { }\r\n"]},"metadata":{},"sourceType":"module"}