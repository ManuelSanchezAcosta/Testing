{"ast":null,"code":"import _toConsumableArray from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan, observeOn } from 'rxjs/operators';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nexport var AngularFirestoreCollectionGroup = /*#__PURE__*/function () {\n  function AngularFirestoreCollectionGroup(query, afs) {\n    _classCallCheck(this, AngularFirestoreCollectionGroup);\n\n    this.query = query;\n    this.afs = afs;\n  }\n\n  _createClass(AngularFirestoreCollectionGroup, [{\n    key: \"stateChanges\",\n    value: function stateChanges(events) {\n      if (!events || events.length === 0) {\n        return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n      }\n\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, map(function (actions) {\n        return actions.filter(function (change) {\n          return events.indexOf(change.type) > -1;\n        });\n      }), filter(function (changes) {\n        return changes.length > 0;\n      }));\n    }\n  }, {\n    key: \"auditTrail\",\n    value: function auditTrail(events) {\n      return this.stateChanges(events).pipe(scan(function (current, action) {\n        return [].concat(_toConsumableArray(current), _toConsumableArray(action));\n      }, []));\n    }\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges(events) {\n      var validatedEvents = validateEventsArray(events);\n      var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n      return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n      return fromCollectionRefScheduled$.pipe(this.afs.keepUnstableUntilFirst, map(function (actions) {\n        return actions.payload.docs.map(function (a) {\n          return a.data();\n        });\n      }));\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n  }]);\n\n  return AngularFirestoreCollectionGroup;\n}();","map":{"version":3,"sources":["../../../../../src/firestore/collection-group/collection-group.ts"],"names":[],"mappings":";;;AAAA,SAAqB,IAArB,QAAiC,MAAjC;AACA,SAAS,iBAAT,QAAkC,uBAAlC;AACA,SAAS,GAAT,EAAc,MAAd,EAAsB,IAAtB,EAA4B,SAA5B,QAA6C,gBAA7C;AAIA,SAAS,mBAAT,QAAoC,0BAApC;AACA,SAAS,UAAT,EAAqB,aAArB,QAA0C,uBAA1C;AAqBA,WAAa,+BAAb;AAOE,2CACmB,KADnB,EAEmB,GAFnB,EAEwC;AAAA;;AADrB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,GAAA,GAAA,GAAA;AAA0B;;AAT/C;AAAA;AAAA,iCAiBe,MAjBf,EAiB4C;AACxC,UAAG,CAAC,MAAD,IAAW,MAAM,CAAC,MAAP,KAAkB,CAAhC,EAAmC;AACjC,eAAO,UAAU,CAAI,KAAK,KAAT,EAAgB,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApC,CAAV,CAA8D,IAA9D,CACL,KAAK,GAAL,CAAS,sBADJ,CAAP;AAGD;;AACD,aAAO,UAAU,CAAI,KAAK,KAAT,EAAgB,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApC,CAAV,CACJ,IADI,CAEH,KAAK,GAAL,CAAS,sBAFN,EAGH,GAAG,CAAC,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,MAAR,CAAe,UAAA,MAAM;AAAA,iBAAI,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,IAAtB,IAA8B,CAAC,CAAnC;AAAA,SAArB,CAAJ;AAAA,OAAR,CAHA,EAIH,MAAM,CAAC,UAAA,OAAO;AAAA,eAAK,OAAO,CAAC,MAAR,GAAiB,CAAtB;AAAA,OAAR,CAJH,CAAP;AAMD;AA7BH;AAAA;AAAA,+BAoCa,MApCb,EAoC0C;AACtC,aAAO,KAAK,YAAL,CAAkB,MAAlB,EAA0B,IAA1B,CAA+B,IAAI,CAAC,UAAC,OAAD,EAAU,MAAV;AAAA,4CAAyB,OAAzB,sBAAqC,MAArC;AAAA,OAAD,EAA+C,EAA/C,CAAnC,CAAP;AACD;AAtCH;AAAA;AAAA,oCA6CkB,MA7ClB,EA6C+C;AAC3C,UAAM,eAAe,GAAG,mBAAmB,CAAC,MAAD,CAA3C;AACA,UAAM,uBAAuB,GAAG,aAAa,CAAI,KAAK,KAAT,EAAgB,eAAhB,EAAiC,KAAK,GAAL,CAAS,UAAT,CAAoB,cAArD,CAA7C;AACA,aAAO,uBAAuB,CAAC,IAAxB,CACL,KAAK,GAAL,CAAS,sBADJ,CAAP;AAGD;AAnDH;AAAA;AAAA,mCAwDc;AACV,UAAM,2BAA2B,GAAG,iBAAiB,CAAI,KAAK,KAAT,EAAgB,KAAK,GAAL,CAAS,UAAT,CAAoB,cAApC,CAArD;AACA,aAAO,2BAA2B,CAC/B,IADI,CAEH,KAAK,GAAL,CAAS,sBAFN,EAGH,GAAG,CAAC,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAqB,GAArB,CAAyB,UAAA,CAAC;AAAA,iBAAI,CAAC,CAAC,IAAF,EAAJ;AAAA,SAA1B,CAAJ;AAAA,OAAR,CAHA,CAAP;AAKD;AA/DH;AAAA;AAAA,wBAqEM,OArEN,EAqEoC;AAChC,aAAO,IAAI,CAAC,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAAD,CAAJ,CAA8B,IAA9B,CACL,SAAS,CAAC,KAAK,GAAL,CAAS,UAAT,CAAoB,aAArB,CADJ,CAAP;AAGD;AAzEH;;AAAA;AAAA","sourcesContent":["import { Observable, from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan, observeOn } from 'rxjs/operators';\nimport { firestore } from 'firebase/app';\n\nimport { DocumentChangeType, Query, DocumentData, DocumentChangeAction } from '../interfaces';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nimport { AngularFirestore } from '../firestore';\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollectionGroup<T=DocumentData> {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   * @param query\n   * @param afs\n   */\n  constructor(\n    private readonly query: Query,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   * @param events\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if(!events || events.length === 0) {\n      return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n        this.afs.keepUnstableUntilFirst\n      );\n    }\n    return docChanges<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        this.afs.keepUnstableUntilFirst,\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n        filter(changes =>  changes.length > 0)\n      );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   * @param events\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   * @param events\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   */\n  valueChanges(): Observable<T[]> {\n    const fromCollectionRefScheduled$ = fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$\n      .pipe(\n        this.afs.keepUnstableUntilFirst,\n        map(actions => actions.payload.docs.map(a => a.data()))\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   * @param options\n   */\n  get(options?: firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular)\n    );\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}