{"ast":null,"code":"import { indexOf } from \"./utils\";\n/**\r\n * @class Autolinker.HtmlTag\r\n * @extends Object\r\n *\r\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\r\n *\r\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\r\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\r\n *\r\n * ## Examples\r\n *\r\n * Example instantiation:\r\n *\r\n *     var tag = new Autolinker.HtmlTag( {\r\n *         tagName : 'a',\r\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\r\n *         innerHtml : 'Google'\r\n *     } );\r\n *\r\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\r\n *\r\n *     // Individual accessor methods\r\n *     tag.getTagName();                 // 'a'\r\n *     tag.getAttr( 'href' );            // 'http://google.com'\r\n *     tag.hasClass( 'external-link' );  // true\r\n *\r\n *\r\n * Using mutator methods (which may be used in combination with instantiation config properties):\r\n *\r\n *     var tag = new Autolinker.HtmlTag();\r\n *     tag.setTagName( 'a' );\r\n *     tag.setAttr( 'href', 'http://google.com' );\r\n *     tag.addClass( 'external-link' );\r\n *     tag.setInnerHtml( 'Google' );\r\n *\r\n *     tag.getTagName();                 // 'a'\r\n *     tag.getAttr( 'href' );            // 'http://google.com'\r\n *     tag.hasClass( 'external-link' );  // true\r\n *\r\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\r\n *\r\n *\r\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( match ) {\r\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\r\n *             tag.setAttr( 'rel', 'nofollow' );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n *\r\n *\r\n * ## Example use with a new tag for the replacement\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( match ) {\r\n *             var tag = new Autolinker.HtmlTag( {\r\n *                 tagName : 'button',\r\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\r\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\r\n *             } );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\r\n */\n\nvar HtmlTag =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  /**\r\n   * @method constructor\r\n   * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\r\n   */\n  function HtmlTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\r\n     * @cfg {String} tagName\r\n     *\r\n     * The tag name. Ex: 'a', 'button', etc.\r\n     *\r\n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\r\n     * is executed.\r\n     */\n\n\n    this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {Object.<String, String>} attrs\r\n     *\r\n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\r\n     * values are the attribute values.\r\n     */\n\n    this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {String} innerHTML\r\n     *\r\n     * The inner HTML for the tag.\r\n     */\n\n    this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @protected\r\n     * @property {RegExp} whitespaceRegex\r\n     *\r\n     * Regular expression used to match whitespace in a string of CSS classes.\r\n     */\n\n    this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    this.tagName = cfg.tagName || '';\n    this.attrs = cfg.attrs || {};\n    this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n  }\n  /**\r\n   * Sets the tag name that will be used to generate the tag with.\r\n   *\r\n   * @param {String} tagName\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setTagName = function (tagName) {\n    this.tagName = tagName;\n    return this;\n  };\n  /**\r\n   * Retrieves the tag name.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HtmlTag.prototype.getTagName = function () {\n    return this.tagName || '';\n  };\n  /**\r\n   * Sets an attribute on the HtmlTag.\r\n   *\r\n   * @param {String} attrName The attribute name to set.\r\n   * @param {String} attrValue The attribute value to set.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n    var tagAttrs = this.getAttrs();\n    tagAttrs[attrName] = attrValue;\n    return this;\n  };\n  /**\r\n   * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\r\n   *\r\n   * @param {String} attrName The attribute name to retrieve.\r\n   * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\r\n   */\n\n\n  HtmlTag.prototype.getAttr = function (attrName) {\n    return this.getAttrs()[attrName];\n  };\n  /**\r\n   * Sets one or more attributes on the HtmlTag.\r\n   *\r\n   * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setAttrs = function (attrs) {\n    Object.assign(this.getAttrs(), attrs);\n    return this;\n  };\n  /**\r\n   * Retrieves the attributes Object (map) for the HtmlTag.\r\n   *\r\n   * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\r\n   */\n\n\n  HtmlTag.prototype.getAttrs = function () {\n    return this.attrs || (this.attrs = {});\n  };\n  /**\r\n   * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\r\n   *\r\n   * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setClass = function (cssClass) {\n    return this.setAttr('class', cssClass);\n  };\n  /**\r\n   * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\r\n   *\r\n   * @param {String} cssClass One or more space-separated CSS classes to add.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.addClass = function (cssClass) {\n    var classAttr = this.getClass(),\n        whitespaceRegex = this.whitespaceRegex,\n        classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n        newClasses = cssClass.split(whitespaceRegex),\n        newClass;\n\n    while (newClass = newClasses.shift()) {\n      if (indexOf(classes, newClass) === -1) {\n        classes.push(newClass);\n      }\n    }\n\n    this.getAttrs()['class'] = classes.join(\" \");\n    return this;\n  };\n  /**\r\n   * Convenience method to remove one or more CSS classes from the HtmlTag.\r\n   *\r\n   * @param {String} cssClass One or more space-separated CSS classes to remove.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.removeClass = function (cssClass) {\n    var classAttr = this.getClass(),\n        whitespaceRegex = this.whitespaceRegex,\n        classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n        removeClasses = cssClass.split(whitespaceRegex),\n        removeClass;\n\n    while (classes.length && (removeClass = removeClasses.shift())) {\n      var idx = indexOf(classes, removeClass);\n\n      if (idx !== -1) {\n        classes.splice(idx, 1);\n      }\n    }\n\n    this.getAttrs()['class'] = classes.join(\" \");\n    return this;\n  };\n  /**\r\n   * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\r\n   * there are multiple.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HtmlTag.prototype.getClass = function () {\n    return this.getAttrs()['class'] || \"\";\n  };\n  /**\r\n   * Convenience method to check if the tag has a CSS class or not.\r\n   *\r\n   * @param {String} cssClass The CSS class to check for.\r\n   * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\r\n   */\n\n\n  HtmlTag.prototype.hasClass = function (cssClass) {\n    return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n  };\n  /**\r\n   * Sets the inner HTML for the tag.\r\n   *\r\n   * @param {String} html The inner HTML to set.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setInnerHTML = function (html) {\n    this.innerHTML = html;\n    return this;\n  };\n  /**\r\n   * Backwards compatibility method name.\r\n   *\r\n   * @param {String} html The inner HTML to set.\r\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\r\n   */\n\n\n  HtmlTag.prototype.setInnerHtml = function (html) {\n    return this.setInnerHTML(html);\n  };\n  /**\r\n   * Retrieves the inner HTML for the tag.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HtmlTag.prototype.getInnerHTML = function () {\n    return this.innerHTML || \"\";\n  };\n  /**\r\n   * Backward compatibility method name.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HtmlTag.prototype.getInnerHtml = function () {\n    return this.getInnerHTML();\n  };\n  /**\r\n   * Override of superclass method used to generate the HTML string for the tag.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HtmlTag.prototype.toAnchorString = function () {\n    var tagName = this.getTagName(),\n        attrsStr = this.buildAttrsStr();\n    attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n    return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n  };\n  /**\r\n   * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\r\n   * the stringified HtmlTag.\r\n   *\r\n   * @protected\r\n   * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\r\n   */\n\n\n  HtmlTag.prototype.buildAttrsStr = function () {\n    if (!this.attrs) return \"\"; // no `attrs` Object (map) has been set, return empty string\n\n    var attrs = this.getAttrs(),\n        attrsArr = [];\n\n    for (var prop in attrs) {\n      if (attrs.hasOwnProperty(prop)) {\n        attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n      }\n    }\n\n    return attrsArr.join(\" \");\n  };\n\n  return HtmlTag;\n}();\n\nexport { HtmlTag };","map":null,"metadata":{},"sourceType":"module"}