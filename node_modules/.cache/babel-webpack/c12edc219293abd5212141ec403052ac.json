{"ast":null,"code":"import _classCallCheck from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Router, NavigationStart, NavigationError, NavigationEnd, NavigationCancel } from '@angular/router';\nimport { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@ngx-loading-bar/core';\n\nvar LoadingBarRouterModule = /*@__PURE__*/function () {\n  var LoadingBarRouterModule = /*#__PURE__*/function () {\n    /**\n     * @param {?} router\n     * @param {?} loadingBar\n     */\n    function LoadingBarRouterModule(router, loadingBar) {\n      var _this = this;\n\n      _classCallCheck(this, LoadingBarRouterModule);\n\n      router.events.subscribe(function (event) {\n        /** @type {?} */\n        var state = _this.getCurrentNavigationState(router);\n\n        if (state && state.ignoreLoadingBar) {\n          return;\n        }\n\n        if (event instanceof NavigationStart) {\n          loadingBar.start();\n        }\n\n        if (event instanceof NavigationError || event instanceof NavigationEnd || event instanceof NavigationCancel) {\n          loadingBar.complete();\n        }\n      });\n    }\n    /**\n     * @private\n     * @param {?} router\n     * @return {?}\n     */\n\n\n    _createClass(LoadingBarRouterModule, [{\n      key: \"getCurrentNavigationState\",\n      value: function getCurrentNavigationState(router) {\n        // `getCurrentNavigation` only available in angular `7.2`\n\n        /** @type {?} */\n        var currentNavigation = router.getCurrentNavigation && router.getCurrentNavigation();\n\n        if (currentNavigation && currentNavigation.extras) {\n          return currentNavigation.extras.state;\n        }\n\n        return {};\n      }\n    }]);\n\n    return LoadingBarRouterModule;\n  }();\n\n  LoadingBarRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: LoadingBarRouterModule\n  });\n  LoadingBarRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function LoadingBarRouterModule_Factory(t) {\n      return new (t || LoadingBarRouterModule)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.LoadingBarService));\n    },\n    imports: [[RouterModule, LoadingBarModule], RouterModule, LoadingBarModule]\n  });\n  return LoadingBarRouterModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarRouterModule, {\n    imports: function imports() {\n      return [RouterModule, LoadingBarModule];\n    },\n    exports: function exports() {\n      return [RouterModule, LoadingBarModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { LoadingBarRouterModule };","map":null,"metadata":{},"sourceType":"module"}