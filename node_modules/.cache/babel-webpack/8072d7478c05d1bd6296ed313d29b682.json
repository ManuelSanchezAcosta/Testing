{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, PLATFORM_ID, Inject, NgModule, Component, Input, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingBarComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r2.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r2.diameter)(\"height\", ctx_r2.diameter);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 6);\n    ɵngcc0.ɵɵelement(2, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var progress_r1 = ɵngcc0.ɵɵnextContext().ngIf;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background\", ctx_r3.color)(\"height\", ctx_r3.height)(\"width\", progress_r1 + \"%\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r3.height);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, LoadingBarComponent_ng_container_0_div_1_Template, 2, 6, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, LoadingBarComponent_ng_container_0_div_2_Template, 3, 10, \"div\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeSpinner);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeBar);\n  }\n}\n\nvar LoadingBarService = /*@__PURE__*/function () {\n  var LoadingBarService = /*#__PURE__*/function () {\n    /**\n     * @param {?} platformId\n     */\n    function LoadingBarService(platformId) {\n      _classCallCheck(this, LoadingBarService);\n\n      this.platformId = platformId;\n      this.progress$ =\n      /** @type {?} */\n      new Subject().pipe(debounceTime(0));\n      this._pendingRequests = 0;\n      this._value = 0;\n    }\n    /**\n     * @param {?=} initialValue\n     * @return {?}\n     */\n\n\n    _createClass(LoadingBarService, [{\n      key: \"start\",\n      value: function start() {\n        var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n        ++this._pendingRequests;\n\n        if (this._value === 0 || this._pendingRequests === 1) {\n          // Inserts the loading bar element into the dom, and sets it to 2%\n          this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.complete();\n\n        while (this._pendingRequests > 0) {\n          this.complete();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"complete\",\n      value: function complete() {\n        var _this = this;\n\n        if (this._pendingRequests === 0 && this._value === 0) {\n          return;\n        }\n\n        if (this._pendingRequests > 0) {\n          --this._pendingRequests;\n        }\n\n        if (this._pendingRequests === 0 || this._pendingRequests === 0 && this._value > 0) {\n          if (this._value !== 100) {\n            this.set(100);\n          } // Attempt to aggregate any start/complete calls within 500ms:\n\n\n          setTimeout(function () {\n            return _this.set(0);\n          }, 500);\n        }\n      }\n      /**\n       * Set the loading bar's width to a certain percent.\n       *\n       * @param {?} n any value between 0 and 100\n       * @return {?}\n       */\n\n    }, {\n      key: \"set\",\n      value: function set(n) {\n        var _this2 = this;\n\n        if (!isPlatformBrowser(this.platformId)) {\n          this._pendingRequests = 0;\n          return;\n        }\n\n        if (n === 0 && this._pendingRequests > 0) {\n          n = 2;\n        }\n\n        this._value = n;\n        this.progress$.next(n);\n\n        if (this._pendingRequests === 0) {\n          return;\n        } // increment loadingbar to give the illusion that there is always\n        // progress but make sure to cancel the previous timeouts so we don't\n        // have multiple incs running at the same time.\n\n\n        clearTimeout(this._incTimeout);\n\n        if (this._value > 0 && this._value < 100) {\n          this._incTimeout = setTimeout(function () {\n            return _this2.increment();\n          }, 250);\n        }\n      }\n      /**\n       * Increments the loading bar by a random amount\n       * but slows down as it progresses\n       * @param {?=} rnd\n       * @return {?}\n       */\n\n    }, {\n      key: \"increment\",\n      value: function increment() {\n        var rnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        if (rnd > 0) {\n          this.set(this._value + rnd);\n        }\n        /** @type {?} */\n\n\n        var stat = this._value;\n\n        if (stat >= 0 && stat < 25) {\n          // Start out between 3 - 6% increments\n          rnd = Math.random() * (5 - 3 + 1) + 3;\n        } else if (stat >= 25 && stat < 65) {\n          // increment between 0 - 3%\n          rnd = Math.random() * 3;\n        } else if (stat >= 65 && stat < 90) {\n          // increment between 0 - 2%\n          rnd = Math.random() * 2;\n        } else if (stat >= 90 && stat < 99) {\n          // finally, increment it .5 %\n          rnd = 0.5;\n        } else {\n          // after 99%, don't increment:\n          rnd = 0;\n        }\n\n        this.set(this._value + rnd);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.progress$.complete();\n      }\n    }]);\n\n    return LoadingBarService;\n  }();\n\n  LoadingBarService.ɵfac = function LoadingBarService_Factory(t) {\n    return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  LoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: LoadingBarService,\n    factory: LoadingBarService.ɵfac,\n    providedIn: 'root'\n  });\n  /** @nocollapse */\n\n  LoadingBarService.ngInjectableDef = defineInjectable({\n    factory: function LoadingBarService_Factory() {\n      return new LoadingBarService(inject(PLATFORM_ID));\n    },\n    token: LoadingBarService,\n    providedIn: \"root\"\n  });\n  return LoadingBarService;\n}();\n\nvar LoadingBarComponent = /*@__PURE__*/function () {\n  var LoadingBarComponent =\n  /**\n   * @param {?} loader\n   */\n  function LoadingBarComponent(loader) {\n    _classCallCheck(this, LoadingBarComponent);\n\n    this.loader = loader;\n    this.includeSpinner = true;\n    this.includeBar = true;\n    this.fixed = true;\n    this.value = null;\n  };\n\n  LoadingBarComponent.ɵfac = function LoadingBarComponent_Factory(t) {\n    return new (t || LoadingBarComponent)(ɵngcc0.ɵɵdirectiveInject(LoadingBarService));\n  };\n\n  LoadingBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: LoadingBarComponent,\n    selectors: [[\"ngx-loading-bar\"]],\n    hostVars: 2,\n    hostBindings: function LoadingBarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"loading-bar-fixed\", ctx.fixed);\n      }\n    },\n    inputs: {\n      includeSpinner: \"includeSpinner\",\n      includeBar: \"includeBar\",\n      fixed: \"fixed\",\n      value: \"value\",\n      color: \"color\",\n      height: \"height\",\n      diameter: \"diameter\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"id\", \"loading-bar-spinner\", 3, \"color\", 4, \"ngIf\"], [\"id\", \"loading-bar\", 3, \"color\", 4, \"ngIf\"], [\"id\", \"loading-bar-spinner\"], [1, \"spinner-icon\"], [\"id\", \"loading-bar\"], [1, \"bar\"], [1, \"peg\"]],\n    template: function LoadingBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, LoadingBarComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.value !== null ? ctx.value : ɵngcc0.ɵɵpipeBind1(1, 1, ctx.loader.progress$));\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    pipes: [ɵngcc1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block}.loading-bar-fixed[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{position:fixed}.loading-bar-fixed[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{position:fixed;top:10px;left:10px}[dir=rtl]   .loading-bar-fixed[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{right:10px;left:unset}.loading-bar-fixed[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .peg[_ngcontent-%COMP%]{display:block}[_nghost-%COMP%] > div[_ngcontent-%COMP%]{pointer-events:none;transition:350ms linear;color:#29d}[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl]   [_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{right:0;left:unset}[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .peg[_ngcontent-%COMP%]{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{display:block;position:absolute;z-index:10002;top:5px;left:0}[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]   .spinner-icon[_ngcontent-%COMP%]{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"]\n  });\n  return LoadingBarComponent;\n}();\n\nvar LoadingBarModule = /*@__PURE__*/function () {\n  var LoadingBarModule = function LoadingBarModule() {\n    _classCallCheck(this, LoadingBarModule);\n  };\n\n  LoadingBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: LoadingBarModule\n  });\n  LoadingBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function LoadingBarModule_Factory(t) {\n      return new (t || LoadingBarModule)();\n    },\n    imports: [[CommonModule]]\n  });\n  return LoadingBarModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarModule, {\n    declarations: function declarations() {\n      return [LoadingBarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [LoadingBarComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { LoadingBarModule, LoadingBarComponent, LoadingBarService };","map":null,"metadata":{},"sourceType":"module"}