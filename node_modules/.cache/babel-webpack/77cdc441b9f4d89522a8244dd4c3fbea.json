{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, EventEmitter, SecurityContext, Input, Output, Component, ViewEncapsulation, forwardRef, Inject, PLATFORM_ID, ElementRef, Renderer2, NgZone, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nvar _c1 = [\"[quill-editor-toolbar]\"];\nvar defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }], [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], [{\n    direction: 'rtl'\n  }], [{\n    size: ['small', false, 'large', 'huge']\n  }], [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }], [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'], ['link', 'image', 'video'] // link and image, video\n  ]\n};\nvar QUILL_CONFIG_TOKEN = new InjectionToken('config');\nvar QuillEditorComponent_1; // tslint:disable-next-line:variable-name\n\nvar Quill = null;\n\nvar getFormat = function getFormat(format, configFormat) {\n  var passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar ɵ0 = getFormat;\n\nvar QuillEditorComponent = /*@__PURE__*/function () {\n  var QuillEditorComponent = QuillEditorComponent_1 = /*#__PURE__*/function () {\n    function QuillEditorComponent(elementRef, domSanitizer, doc, // tslint:disable-next-line:ban-types\n    platformId, renderer, zone, config) {\n      var _this = this;\n\n      _classCallCheck(this, QuillEditorComponent);\n\n      this.elementRef = elementRef;\n      this.domSanitizer = domSanitizer;\n      this.doc = doc;\n      this.platformId = platformId;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.config = config;\n      this.required = false;\n      this.customToolbarPosition = 'top';\n      this.sanitize = false;\n      this.styles = null;\n      this.strict = true;\n      this.customOptions = [];\n      this.preserveWhitespace = false;\n      this.onEditorCreated = new EventEmitter();\n      this.onContentChanged = new EventEmitter();\n      this.onSelectionChanged = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.disabled = false; // used to store initial value before ViewInit\n\n      this.valueGetter = function (quillEditor, editorElement) {\n        var html = editorElement.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br><div>') {\n          html = null;\n        }\n\n        var modelValue = html;\n        var format = getFormat(_this.format, _this.config.format);\n\n        if (format === 'text') {\n          modelValue = quillEditor.getText();\n        } else if (format === 'object') {\n          modelValue = quillEditor.getContents();\n        } else if (format === 'json') {\n          try {\n            modelValue = JSON.stringify(quillEditor.getContents());\n          } catch (e) {\n            modelValue = quillEditor.getText();\n          }\n        }\n\n        return modelValue;\n      };\n\n      this.valueSetter = function (quillEditor, value) {\n        var format = getFormat(_this.format, _this.config.format);\n\n        if (format === 'html') {\n          if (_this.sanitize) {\n            value = _this.domSanitizer.sanitize(SecurityContext.HTML, value);\n          }\n\n          return quillEditor.clipboard.convert(value);\n        } else if (format === 'json') {\n          try {\n            return JSON.parse(value);\n          } catch (e) {\n            return [{\n              insert: value\n            }];\n          }\n        }\n\n        return value;\n      };\n\n      this.selectionChangeHandler = function (range, oldRange, source) {\n        _this.zone.run(function () {\n          if (range === null) {\n            _this.onBlur.emit({\n              editor: _this.quillEditor,\n              source: source\n            });\n          } else if (oldRange === null) {\n            _this.onFocus.emit({\n              editor: _this.quillEditor,\n              source: source\n            });\n          }\n\n          _this.onSelectionChanged.emit({\n            editor: _this.quillEditor,\n            oldRange: oldRange,\n            range: range,\n            source: source\n          });\n\n          if (!range && _this.onModelTouched) {\n            _this.onModelTouched();\n          }\n        });\n      };\n\n      this.textChangeHandler = function (delta, oldDelta, source) {\n        // only emit changes emitted by user interactions\n        var text = _this.quillEditor.getText();\n\n        var content = _this.quillEditor.getContents();\n\n        var html = _this.editorElem.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br><div>') {\n          html = null;\n        }\n\n        _this.zone.run(function () {\n          var trackChanges = _this.trackChanges || _this.config.trackChanges;\n\n          if ((source === Quill.sources.USER || trackChanges && trackChanges === 'all') && _this.onModelChange) {\n            _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));\n          }\n\n          _this.onContentChanged.emit({\n            content: content,\n            delta: delta,\n            editor: _this.quillEditor,\n            html: html,\n            oldDelta: oldDelta,\n            source: source,\n            text: text\n          });\n        });\n      };\n    } // tslint:disable-next-line:no-empty\n\n\n    _createClass(QuillEditorComponent, [{\n      key: \"onModelChange\",\n      value: function onModelChange(_modelValue) {} // tslint:disable-next-line:no-empty\n\n    }, {\n      key: \"onModelTouched\",\n      value: function onModelTouched() {}\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this2 = this;\n\n        if (isPlatformServer(this.platformId)) {\n          return;\n        }\n\n        if (!Quill) {\n          Quill = require('quill');\n        }\n\n        this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n        var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n        var modules = this.modules || this.config.modules || defaultModules;\n\n        if (modules.toolbar === undefined) {\n          modules.toolbar = defaultModules.toolbar;\n        }\n\n        var placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;\n\n        if (placeholder === undefined) {\n          placeholder = 'Insert text here ...';\n        }\n\n        if (toolbarElem) {\n          // tslint:disable-next-line:no-string-literal\n          modules['toolbar'] = toolbarElem;\n        }\n\n        if (this.styles) {\n          Object.keys(this.styles).forEach(function (key) {\n            _this2.renderer.setStyle(_this2.editorElem, key, _this2.styles[key]);\n          });\n        }\n\n        this.customOptions.forEach(function (customOption) {\n          var newCustomOption = Quill.import(customOption.import);\n          newCustomOption.whitelist = customOption.whitelist;\n          Quill.register(newCustomOption, true);\n        });\n        var bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n\n        if (!bounds) {\n          bounds = this.config.bounds ? this.config.bounds : this.doc.body;\n        }\n\n        var debug = this.debug;\n\n        if (!debug && debug !== false && this.config.debug) {\n          debug = this.config.debug;\n        }\n\n        var readOnly = this.readOnly;\n\n        if (!readOnly && this.readOnly !== false) {\n          readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;\n        }\n\n        var scrollingContainer = this.scrollingContainer;\n\n        if (!scrollingContainer && this.scrollingContainer !== null) {\n          scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;\n        }\n\n        var formats = this.formats;\n\n        if (!formats && formats === undefined) {\n          formats = this.config.formats || this.config.formats === null ? this.config.formats : undefined;\n        }\n\n        this.quillEditor = new Quill(this.editorElem, {\n          bounds: bounds,\n          debug: debug,\n          formats: formats,\n          modules: modules,\n          placeholder: placeholder,\n          readOnly: readOnly,\n          scrollingContainer: scrollingContainer,\n          strict: this.strict,\n          theme: this.theme || (this.config.theme ? this.config.theme : 'snow')\n        });\n\n        if (this.content) {\n          var format = getFormat(this.format, this.config.format);\n\n          if (format === 'object') {\n            this.quillEditor.setContents(this.content, 'silent');\n          } else if (format === 'text') {\n            this.quillEditor.setText(this.content, 'silent');\n          } else if (format === 'json') {\n            try {\n              this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n            } catch (e) {\n              this.quillEditor.setText(this.content, 'silent');\n            }\n          } else {\n            if (this.sanitize) {\n              this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n            }\n\n            var contents = this.quillEditor.clipboard.convert(this.content);\n            this.quillEditor.setContents(contents, 'silent');\n          }\n\n          this.quillEditor.history.clear();\n        } // initialize disabled status based on this.disabled as default value\n\n\n        this.setDisabledState(); // mark model as touched if editor lost focus\n\n        this.quillEditor.on('selection-change', this.selectionChangeHandler); // update model if text changes\n\n        this.quillEditor.on('text-change', this.textChangeHandler); // trigger created in a timeout to avoid changed models after checked\n        // if you are using the editor api in created output to change the editor content\n\n        setTimeout(function () {\n          return _this2.onEditorCreated.emit(_this2.quillEditor);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.quillEditor) {\n          this.quillEditor.off('selection-change', this.selectionChangeHandler);\n          this.quillEditor.off('text-change', this.textChangeHandler);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this3 = this;\n\n        if (!this.quillEditor) {\n          return;\n        } // tslint:disable:no-string-literal\n\n\n        if (changes['readOnly']) {\n          this.quillEditor.enable(!changes['readOnly'].currentValue);\n        }\n\n        if (changes['placeholder']) {\n          this.quillEditor.root.dataset.placeholder = changes['placeholder'].currentValue;\n        }\n\n        if (changes['styles']) {\n          var currentStyling = changes['styles'].currentValue;\n          var previousStyling = changes['styles'].previousValue;\n\n          if (previousStyling) {\n            Object.keys(previousStyling).forEach(function (key) {\n              _this3.renderer.removeStyle(_this3.editorElem, key);\n            });\n          }\n\n          if (currentStyling) {\n            Object.keys(currentStyling).forEach(function (key) {\n              _this3.renderer.setStyle(_this3.editorElem, key, _this3.styles[key]);\n            });\n          }\n        } // tslint:enable:no-string-literal\n\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(currentValue) {\n        this.content = currentValue;\n        var format = getFormat(this.format, this.config.format);\n\n        if (this.quillEditor) {\n          if (currentValue) {\n            if (format === 'text') {\n              this.quillEditor.setText(currentValue);\n            } else {\n              this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n            }\n\n            return;\n          }\n\n          this.quillEditor.setText('');\n        }\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.disabled;\n        // store initial value to set appropriate disabled status after ViewInit\n        this.disabled = isDisabled;\n\n        if (this.quillEditor) {\n          if (isDisabled) {\n            this.quillEditor.disable();\n            this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n          } else {\n            if (!this.readOnly) {\n              this.quillEditor.enable();\n            }\n\n            this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n          }\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onModelTouched = fn;\n      }\n    }, {\n      key: \"validate\",\n      value: function validate() {\n        if (!this.quillEditor) {\n          return null;\n        }\n\n        var err = {};\n        var valid = true;\n        var textLength = this.quillEditor.getText().trim().length;\n\n        if (this.minLength && textLength && textLength < this.minLength) {\n          err.minLengthError = {\n            given: textLength,\n            minLength: this.minLength\n          };\n          valid = false;\n        }\n\n        if (this.maxLength && textLength > this.maxLength) {\n          err.maxLengthError = {\n            given: textLength,\n            maxLength: this.maxLength\n          };\n          valid = false;\n        }\n\n        if (this.required && !textLength) {\n          err.requiredError = {\n            empty: true\n          };\n          valid = false;\n        }\n\n        return valid ? null : err;\n      }\n    }]);\n\n    return QuillEditorComponent;\n  }();\n\n  QuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) {\n    return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n  };\n\n  QuillEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: QuillEditorComponent,\n    selectors: [[\"quill-editor\"]],\n    inputs: {\n      required: \"required\",\n      customToolbarPosition: \"customToolbarPosition\",\n      sanitize: \"sanitize\",\n      styles: \"styles\",\n      strict: \"strict\",\n      customOptions: \"customOptions\",\n      preserveWhitespace: \"preserveWhitespace\",\n      valueGetter: \"valueGetter\",\n      valueSetter: \"valueSetter\",\n      format: \"format\",\n      theme: \"theme\",\n      modules: \"modules\",\n      debug: \"debug\",\n      readOnly: \"readOnly\",\n      placeholder: \"placeholder\",\n      maxLength: \"maxLength\",\n      minLength: \"minLength\",\n      formats: \"formats\",\n      scrollingContainer: \"scrollingContainer\",\n      bounds: \"bounds\",\n      trackChanges: \"trackChanges\"\n    },\n    outputs: {\n      onEditorCreated: \"onEditorCreated\",\n      onContentChanged: \"onContentChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return QuillEditorComponent_1;\n      })\n    }, {\n      multi: true,\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(function () {\n        return QuillEditorComponent_1;\n      })\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function QuillEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  QuillEditorComponent = QuillEditorComponent_1 = __decorate([__param(2, Inject(DOCUMENT)), __param(3, Inject(PLATFORM_ID)), __param(6, Inject(QUILL_CONFIG_TOKEN)), __metadata(\"design:paramtypes\", [ElementRef, DomSanitizer, Object, Object, Renderer2, NgZone, Object])], QuillEditorComponent);\n  return QuillEditorComponent;\n}();\n\nvar QuillViewHTMLComponent = /*@__PURE__*/function () {\n  var QuillViewHTMLComponent = /*#__PURE__*/function () {\n    function QuillViewHTMLComponent(sanitizer, config) {\n      _classCallCheck(this, QuillViewHTMLComponent);\n\n      this.sanitizer = sanitizer;\n      this.config = config;\n      this.innerHTML = '';\n      this.themeClass = 'ql-snow';\n      this.content = '';\n    }\n\n    _createClass(QuillViewHTMLComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes.theme) {\n          var theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');\n          this.themeClass = \"ql-\".concat(theme, \" ngx-quill-view-html\");\n        } else if (!this.theme) {\n          var _theme = this.config.theme ? this.config.theme : 'snow';\n\n          this.themeClass = \"ql-\".concat(_theme, \" ngx-quill-view-html\");\n        }\n\n        if (changes.content) {\n          this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n        }\n      }\n    }]);\n\n    return QuillViewHTMLComponent;\n  }();\n\n  QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) {\n    return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n  };\n\n  QuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: QuillViewHTMLComponent,\n    selectors: [[\"quill-view-html\"]],\n    inputs: {\n      content: \"content\",\n      theme: \"theme\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n    template: function QuillViewHTMLComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"],\n    encapsulation: 2\n  });\n  QuillViewHTMLComponent = __decorate([__param(1, Inject(QUILL_CONFIG_TOKEN)), __metadata(\"design:paramtypes\", [DomSanitizer, Object])], QuillViewHTMLComponent);\n  return QuillViewHTMLComponent;\n}(); // tslint:disable-next-line:variable-name\n\n\nvar Quill$1 = null;\n\nvar getFormat$1 = function getFormat$1(format, configFormat) {\n  var passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar QuillViewComponent = /*@__PURE__*/function () {\n  var QuillViewComponent = /*#__PURE__*/function () {\n    function QuillViewComponent( // tslint:disable-next-line:ban-types\n    platformId, config, renderer, elementRef) {\n      var _this4 = this;\n\n      _classCallCheck(this, QuillViewComponent);\n\n      this.platformId = platformId;\n      this.config = config;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.strict = true;\n      this.customOptions = [];\n      this.preserveWhitespace = false;\n\n      this.valueSetter = function (quillEditor, value) {\n        var format = getFormat$1(_this4.format, _this4.config.format);\n        var content = value;\n\n        if (format === 'html' || format === 'text') {\n          content = quillEditor.clipboard.convert(value);\n        } else if (format === 'json') {\n          try {\n            content = JSON.parse(value);\n          } catch (e) {\n            content = [{\n              insert: value\n            }];\n          }\n        }\n\n        quillEditor.setContents(content);\n      };\n    }\n\n    _createClass(QuillViewComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this.quillEditor) {\n          return;\n        }\n\n        if (changes.content) {\n          this.valueSetter(this.quillEditor, changes.content.currentValue);\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n          return;\n        }\n\n        if (!Quill$1) {\n          Quill$1 = require('quill');\n        }\n\n        var modules = this.modules || this.config.modules || defaultModules;\n        modules.toolbar = false;\n        this.customOptions.forEach(function (customOption) {\n          var newCustomOption = Quill$1.import(customOption.import);\n          newCustomOption.whitelist = customOption.whitelist;\n          Quill$1.register(newCustomOption, true);\n        });\n        var debug = this.debug;\n\n        if (!debug && debug !== false && this.config.debug) {\n          debug = this.config.debug;\n        }\n\n        var formats = this.formats;\n\n        if (!formats && formats === undefined) {\n          formats = this.config.formats || this.config.formats === null ? this.config.formats : undefined;\n        }\n\n        var theme = this.theme || (this.config.theme ? this.config.theme : 'snow');\n        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n        this.quillEditor = new Quill$1(this.editorElem, {\n          debug: debug,\n          formats: formats,\n          modules: modules,\n          readOnly: true,\n          strict: this.strict,\n          theme: theme\n        });\n        this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n\n        if (this.content) {\n          this.valueSetter(this.quillEditor, this.content);\n        }\n      }\n    }]);\n\n    return QuillViewComponent;\n  }();\n\n  QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) {\n    return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  QuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: QuillViewComponent,\n    selectors: [[\"quill-view\"]],\n    inputs: {\n      strict: \"strict\",\n      customOptions: \"customOptions\",\n      preserveWhitespace: \"preserveWhitespace\",\n      format: \"format\",\n      theme: \"theme\",\n      modules: \"modules\",\n      debug: \"debug\",\n      formats: \"formats\",\n      content: \"content\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function QuillViewComponent_Template(rf, ctx) {},\n    styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"],\n    encapsulation: 2\n  });\n  QuillViewComponent = __decorate([__param(0, Inject(PLATFORM_ID)), __param(1, Inject(QUILL_CONFIG_TOKEN)), __metadata(\"design:paramtypes\", [Object, Object, Renderer2, ElementRef])], QuillViewComponent);\n  return QuillViewComponent;\n}();\n\nvar QuillModule_1;\n\nvar QuillModule = /*@__PURE__*/function () {\n  var QuillModule = QuillModule_1 = /*#__PURE__*/function () {\n    function QuillModule() {\n      _classCallCheck(this, QuillModule);\n    }\n\n    _createClass(QuillModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(config) {\n        return {\n          ngModule: QuillModule_1,\n          providers: [{\n            provide: QUILL_CONFIG_TOKEN,\n            // tslint:disable-next-line:only-arrow-functions\n            useValue: config || {\n              modules: defaultModules\n            }\n          }]\n        };\n      }\n    }]);\n\n    return QuillModule;\n  }();\n\n  QuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: QuillModule\n  });\n  QuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function QuillModule_Factory(t) {\n      return new (t || QuillModule)();\n    },\n    providers: [],\n    imports: [[CommonModule]]\n  });\n  return QuillModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, {\n    declarations: function declarations() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorComponent, QuillModule, defaultModules, ɵ0, QuillViewComponent as ɵa, QuillViewHTMLComponent as ɵb };","map":null,"metadata":{},"sourceType":"module"}