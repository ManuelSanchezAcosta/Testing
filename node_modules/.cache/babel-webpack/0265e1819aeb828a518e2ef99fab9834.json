{"ast":null,"code":"import _toConsumableArray from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, Input, Output, HostBinding, HostListener, ElementRef, Injectable, Component, ViewChild, Pipe, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { isNil, pull, concat, isString, isBoolean, includes } from 'lodash';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 15);\n    ɵngcc0.ɵɵelement(1, \"path\", 16);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 17);\n    ɵngcc0.ɵɵelement(1, \"path\", 18);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"i\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_i_1_Template_i_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      var onCollapseExpand_r8 = ɵngcc0.ɵɵnextContext().onCollapseExpand;\n      return onCollapseExpand_r8();\n    });\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template, 2, 0, \"svg\", 13);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template, 2, 0, \"svg\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r7 = ɵngcc0.ɵɵnextContext().item;\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", item_r7.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1_Template, 3, 3, \"i\", 8);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(3, \"input\", 10);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener($event) {\n      var item_r7 = ctx.item;\n      return item_r7.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener() {\n      var onCheckedChange_r9 = ctx.onCheckedChange;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_Template_label_click_4_listener() {\n      var item_r7 = ctx.item;\n      var onCheckedChange_r9 = ctx.onCheckedChange;\n      item_r7.checked = !item_r7.checked;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r7 = ctx.item;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r7.children);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r7.checked)(\"disabled\", item_r7.disabled)(\"indeterminate\", item_r7.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 23);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r27 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r27.filterText = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var onFilterTextChange_r24 = ɵngcc0.ɵɵnextContext().onFilterTextChange;\n      return onFilterTextChange_r24($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r25 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r25.i18n.getFilterPlaceholder())(\"ngModel\", ctx_r25.filterText);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r37 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 29);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 30);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n      return item_r21.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var onCheckedChange_r23 = ɵngcc0.ɵɵnextContext(3).onCheckedChange;\n      return onCheckedChange_r23();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_label_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var ctx_r41 = ɵngcc0.ɵɵnextContext(3);\n      var item_r21 = ctx_r41.item;\n      var onCheckedChange_r23 = ctx_r41.onCheckedChange;\n      item_r21.checked = !item_r21.checked;\n      return onCheckedChange_r23();\n    });\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n    var ctx_r33 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r21.checked)(\"indeterminate\", item_r21.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r33.i18n.getAllCheckboxText(), \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 35);\n    ɵngcc0.ɵɵelement(1, \"path\", 36);\n    ɵngcc0.ɵɵelement(2, \"path\", 37);\n    ɵngcc0.ɵɵelement(3, \"path\", 38);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 39);\n    ɵngcc0.ɵɵelement(1, \"path\", 40);\n    ɵngcc0.ɵɵelement(2, \"path\", 41);\n    ɵngcc0.ɵɵelement(3, \"path\", 42);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r47 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 31);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template_label_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      var onCollapseExpand_r22 = ɵngcc0.ɵɵnextContext(3).onCollapseExpand;\n      return onCollapseExpand_r22();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"i\", 32);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template, 4, 0, \"svg\", 33);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template, 4, 0, \"svg\", 34);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n    var ctx_r34 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r34.i18n.getTooltipCollapseExpandText(item_r21.collapsed))(\"ngSwitch\", item_r21.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 26);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template, 4, 3, \"div\", 27);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template, 4, 4, \"label\", 28);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var config_r20 = ɵngcc0.ɵɵnextContext(2).config;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasAllCheckBox);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasCollapseExpand);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 43);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_div_1_Template, 4, 2, \"div\", 24);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_2_Template, 1, 0, \"div\", 25);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var config_r20 = ɵngcc0.ɵɵnextContext().config;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasAllCheckBox || config_r20.hasCollapseExpand);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasDivider);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_2_div_0_Template, 3, 2, \"div\", 19);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_Template, 3, 2, \"div\", 20);\n  }\n\n  if (rf & 2) {\n    var config_r20 = ctx.config;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasFilter);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.hasFilterItems);\n  }\n}\n\nfunction TreeviewComponent_ng_template_5_Template(rf, ctx) {}\n\nfunction TreeviewComponent_div_7_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r54 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 46);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewComponent_div_7_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r54);\n      var item_r52 = ctx.$implicit;\n      var ctx_r53 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r53.onItemCheckedChange(item_r52, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r52 = ctx.$implicit;\n    var ctx_r51 = ɵngcc0.ɵɵnextContext(2);\n\n    var _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r51.config)(\"item\", item_r52)(\"template\", ctx_r51.itemTemplate || _r0);\n  }\n}\n\nfunction TreeviewComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 44);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_div_7_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 45);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r5.maxHeight, \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.filterItems);\n  }\n}\n\nfunction TreeviewComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 47);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r6.i18n.getFilterNoItemsFoundText(), \" \");\n  }\n}\n\nfunction TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) {}\n\nfunction TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 5);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var child_r4 = ctx.$implicit;\n      var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r5.onChildCheckedChange(child_r4, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var child_r4 = ctx.$implicit;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r3.config)(\"item\", child_r4)(\"template\", ctx_r3.template);\n  }\n}\n\nfunction TreeviewItemComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.item.children);\n  }\n}\n\nvar _c0 = function _c0(a0, a1, a2) {\n  return {\n    item: a0,\n    onCollapseExpand: a1,\n    onCheckedChange: a2\n  };\n};\n\nfunction TreeviewItemComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    ɵngcc0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, \"div\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.item.collapsed);\n  }\n}\n\nvar DropdownDirective = /*@__PURE__*/function () {\n  var DropdownDirective = /*#__PURE__*/function () {\n    function DropdownDirective() {\n      _classCallCheck(this, DropdownDirective);\n\n      this.internalOpen = false;\n      this.openChange = new EventEmitter();\n    }\n\n    _createClass(DropdownDirective, [{\n      key: \"onKeyupEsc\",\n      value: function onKeyupEsc() {\n        this.close();\n      }\n    }, {\n      key: \"onDocumentClick\",\n      value: function onDocumentClick(event) {\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\n          this.close();\n        }\n      }\n    }, {\n      key: \"open\",\n      value: function open() {\n        if (!this.internalOpen) {\n          this.internalOpen = true;\n          this.openChange.emit(true);\n        }\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this.internalOpen) {\n          this.internalOpen = false;\n          this.openChange.emit(false);\n        }\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        if (this.isOpen) {\n          this.close();\n        } else {\n          this.open();\n        }\n      }\n    }, {\n      key: \"isEventFromToggle\",\n      value: function isEventFromToggle(event) {\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n      }\n    }, {\n      key: \"isOpen\",\n      get: function get() {\n        return this.internalOpen;\n      }\n    }]);\n\n    return DropdownDirective;\n  }();\n\n  DropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n    return new (t || DropdownDirective)();\n  };\n\n  DropdownDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DropdownDirective,\n    selectors: [[\"\", \"ngxDropdown\", \"\"]],\n    hostVars: 2,\n    hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup.esc\", function DropdownDirective_keyup_esc_HostBindingHandler() {\n          return ctx.onKeyupEsc();\n        })(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event);\n        }, false, ɵngcc0.ɵɵresolveDocument);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"show\", ctx.isOpen);\n      }\n    },\n    inputs: {\n      internalOpen: [\"open\", \"internalOpen\"]\n    },\n    outputs: {\n      openChange: \"openChange\"\n    },\n    exportAs: [\"ngxDropdown\"]\n  });\n  return DropdownDirective;\n}();\n\nvar DropdownMenuDirective = /*@__PURE__*/function () {\n  var DropdownMenuDirective = function DropdownMenuDirective(dropdown) {\n    _classCallCheck(this, DropdownMenuDirective);\n\n    this.dropdown = dropdown;\n  };\n\n  DropdownMenuDirective.ɵfac = function DropdownMenuDirective_Factory(t) {\n    return new (t || DropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective));\n  };\n\n  DropdownMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DropdownMenuDirective,\n    selectors: [[\"\", \"ngxDropdownMenu\", \"\"]],\n    hostVars: 4,\n    hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropdown-menu\", true)(\"show\", ctx.dropdown.isOpen);\n      }\n    }\n  });\n  return DropdownMenuDirective;\n}();\n\nvar DropdownToggleDirective = /*@__PURE__*/function () {\n  var DropdownToggleDirective = function DropdownToggleDirective(dropdown, elementRef) {\n    _classCallCheck(this, DropdownToggleDirective);\n\n    this.dropdown = dropdown;\n    dropdown.toggleElement = elementRef.nativeElement;\n  };\n\n  DropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) {\n    return new (t || DropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  DropdownToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DropdownToggleDirective,\n    selectors: [[\"\", \"ngxDropdownToggle\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"true\", 1, \"dropdown-toggle\"],\n    hostVars: 1,\n    hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.dropdown.toggle();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.dropdown.isOpen);\n      }\n    }\n  });\n  return DropdownToggleDirective;\n}();\n\nvar TreeviewI18n = /*@__PURE__*/function () {\n  var TreeviewI18n = function TreeviewI18n() {\n    _classCallCheck(this, TreeviewI18n);\n  };\n\n  TreeviewI18n.ɵfac = function TreeviewI18n_Factory(t) {\n    return new (t || TreeviewI18n)();\n  };\n\n  TreeviewI18n.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewI18n,\n    factory: TreeviewI18n.ɵfac\n  });\n  return TreeviewI18n;\n}();\n\nvar DefaultTreeviewI18n = /*@__PURE__*/function () {\n  var DefaultTreeviewI18n = /*#__PURE__*/function (_TreeviewI18n) {\n    _inherits(DefaultTreeviewI18n, _TreeviewI18n);\n\n    var _super = _createSuper(DefaultTreeviewI18n);\n\n    function DefaultTreeviewI18n() {\n      _classCallCheck(this, DefaultTreeviewI18n);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(DefaultTreeviewI18n, [{\n      key: \"getText\",\n      value: function getText(selection) {\n        if (selection.uncheckedItems.length === 0) {\n          if (selection.checkedItems.length > 0) {\n            return this.getAllCheckboxText();\n          } else {\n            return '';\n          }\n        }\n\n        switch (selection.checkedItems.length) {\n          case 0:\n            return 'Select options';\n\n          case 1:\n            return selection.checkedItems[0].text;\n\n          default:\n            return \"\".concat(selection.checkedItems.length, \" options selected\");\n        }\n      }\n    }, {\n      key: \"getAllCheckboxText\",\n      value: function getAllCheckboxText() {\n        return 'All';\n      }\n    }, {\n      key: \"getFilterPlaceholder\",\n      value: function getFilterPlaceholder() {\n        return 'Filter';\n      }\n    }, {\n      key: \"getFilterNoItemsFoundText\",\n      value: function getFilterNoItemsFoundText() {\n        return 'No items found';\n      }\n    }, {\n      key: \"getTooltipCollapseExpandText\",\n      value: function getTooltipCollapseExpandText(isCollapse) {\n        return isCollapse ? 'Expand' : 'Collapse';\n      }\n    }]);\n\n    return DefaultTreeviewI18n;\n  }(TreeviewI18n);\n\n  DefaultTreeviewI18n.ɵfac = function DefaultTreeviewI18n_Factory(t) {\n    return ɵDefaultTreeviewI18n_BaseFactory(t || DefaultTreeviewI18n);\n  };\n\n  DefaultTreeviewI18n.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: DefaultTreeviewI18n,\n    factory: DefaultTreeviewI18n.ɵfac\n  });\n  return DefaultTreeviewI18n;\n}();\n\nvar ɵDefaultTreeviewI18n_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewI18n);\n\nvar TreeviewConfig = /*@__PURE__*/function () {\n  var TreeviewConfig = /*#__PURE__*/function () {\n    function TreeviewConfig() {\n      _classCallCheck(this, TreeviewConfig);\n\n      this.hasAllCheckBox = true;\n      this.hasFilter = false;\n      this.hasCollapseExpand = false;\n      this.decoupleChildFromParent = false;\n      this.maxHeight = 500;\n    }\n\n    _createClass(TreeviewConfig, [{\n      key: \"hasDivider\",\n      get: function get() {\n        return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n      }\n    }], [{\n      key: \"create\",\n      value: function create(fields) {\n        var config = new TreeviewConfig();\n        Object.assign(config, fields);\n        return config;\n      }\n    }]);\n\n    return TreeviewConfig;\n  }();\n\n  TreeviewConfig.ɵfac = function TreeviewConfig_Factory(t) {\n    return new (t || TreeviewConfig)();\n  };\n\n  TreeviewConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewConfig,\n    factory: TreeviewConfig.ɵfac\n  });\n  return TreeviewConfig;\n}();\n\nvar TreeviewHelper = {\n  findItem: findItem,\n  findItemInList: findItemInList,\n  findParent: findParent,\n  removeItem: removeItem,\n  concatSelection: concatSelection\n};\n\nfunction findItem(root, value) {\n  if (isNil(root)) {\n    return undefined;\n  }\n\n  if (root.value === value) {\n    return root;\n  }\n\n  if (root.children) {\n    var _iterator = _createForOfIteratorHelper(root.children),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var foundItem = findItem(child, value);\n\n        if (foundItem) {\n          return foundItem;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return undefined;\n}\n\nfunction findItemInList(list, value) {\n  if (isNil(list)) {\n    return undefined;\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(list),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      var foundItem = findItem(item, value);\n\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return undefined;\n}\n\nfunction findParent(root, item) {\n  if (isNil(root) || isNil(root.children)) {\n    return undefined;\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(root.children),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var child = _step3.value;\n\n      if (child === item) {\n        return root;\n      } else {\n        var parent = findParent(child, item);\n\n        if (parent) {\n          return parent;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return undefined;\n}\n\nfunction removeItem(root, item) {\n  var parent = findParent(root, item);\n\n  if (parent) {\n    pull(parent.children, item);\n\n    if (parent.children.length === 0) {\n      parent.children = undefined;\n    } else {\n      parent.correctChecked();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction concatSelection(items, checked, unchecked) {\n  var checkedItems = _toConsumableArray(checked);\n\n  var uncheckedItems = _toConsumableArray(unchecked);\n\n  var _iterator4 = _createForOfIteratorHelper(items),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var item = _step4.value;\n      var selection = item.getSelection();\n      checkedItems = concat(checkedItems, selection.checkedItems);\n      uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return {\n    checked: checkedItems,\n    unchecked: uncheckedItems\n  };\n}\n\nvar TreeviewItem = /*#__PURE__*/function () {\n  function TreeviewItem(item) {\n    var _this = this;\n\n    var autoCorrectChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, TreeviewItem);\n\n    this.internalDisabled = false;\n    this.internalChecked = true;\n    this.internalCollapsed = false;\n\n    if (isNil(item)) {\n      throw new Error('Item must be defined');\n    }\n\n    if (isString(item.text)) {\n      this.text = item.text;\n    } else {\n      throw new Error('A text of item must be string object');\n    }\n\n    this.value = item.value;\n\n    if (isBoolean(item.checked)) {\n      this.checked = item.checked;\n    }\n\n    if (isBoolean(item.collapsed)) {\n      this.collapsed = item.collapsed;\n    }\n\n    if (isBoolean(item.disabled)) {\n      this.disabled = item.disabled;\n    }\n\n    if (!isNil(item.children) && item.children.length > 0) {\n      this.children = item.children.map(function (child) {\n        if (_this.disabled === true) {\n          child.disabled = true;\n        }\n\n        return new TreeviewItem(child);\n      });\n    }\n\n    if (autoCorrectChecked) {\n      this.correctChecked();\n    }\n  }\n\n  _createClass(TreeviewItem, [{\n    key: \"setCheckedRecursive\",\n    value: function setCheckedRecursive(value) {\n      if (!this.internalDisabled) {\n        this.internalChecked = value;\n\n        if (!isNil(this.internalChildren)) {\n          this.internalChildren.forEach(function (child) {\n            return child.setCheckedRecursive(value);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setCollapsedRecursive\",\n    value: function setCollapsedRecursive(value) {\n      this.internalCollapsed = value;\n\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(function (child) {\n          return child.setCollapsedRecursive(value);\n        });\n      }\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      var checkedItems = [];\n      var uncheckedItems = [];\n\n      if (isNil(this.internalChildren)) {\n        if (this.internalChecked) {\n          checkedItems.push(this);\n        } else {\n          uncheckedItems.push(this);\n        }\n      } else {\n        var selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n        checkedItems = selection.checked;\n        uncheckedItems = selection.unchecked;\n      }\n\n      return {\n        checkedItems: checkedItems,\n        uncheckedItems: uncheckedItems\n      };\n    }\n  }, {\n    key: \"correctChecked\",\n    value: function correctChecked() {\n      this.internalChecked = this.getCorrectChecked();\n    }\n  }, {\n    key: \"getCorrectChecked\",\n    value: function getCorrectChecked() {\n      var checked = null;\n\n      if (!isNil(this.internalChildren)) {\n        var _iterator5 = _createForOfIteratorHelper(this.internalChildren),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var child = _step5.value;\n            child.internalChecked = child.getCorrectChecked();\n\n            if (checked === null) {\n              checked = child.internalChecked;\n            } else if (checked !== child.internalChecked) {\n              checked = undefined;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      } else {\n        checked = this.checked;\n      }\n\n      return checked;\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.internalChecked;\n    },\n    set: function set(value) {\n      if (!this.internalDisabled) {\n        if (this.internalChecked !== value) {\n          this.internalChecked = value;\n        }\n      }\n    }\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this.checked === undefined;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.internalDisabled;\n    },\n    set: function set(value) {\n      if (this.internalDisabled !== value) {\n        this.internalDisabled = value;\n\n        if (!isNil(this.internalChildren)) {\n          this.internalChildren.forEach(function (child) {\n            return child.disabled = value;\n          });\n        }\n      }\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.internalCollapsed;\n    },\n    set: function set(value) {\n      if (this.internalCollapsed !== value) {\n        this.internalCollapsed = value;\n      }\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this.internalChildren;\n    },\n    set: function set(value) {\n      if (this.internalChildren !== value) {\n        if (!isNil(value) && value.length === 0) {\n          throw new Error('Children must be not an empty array');\n        }\n\n        this.internalChildren = value;\n\n        if (!isNil(this.internalChildren)) {\n          var checked = null;\n          this.internalChildren.forEach(function (child) {\n            if (checked === null) {\n              checked = child.checked;\n            } else {\n              if (child.checked !== checked) {\n                checked = undefined;\n                return;\n              }\n            }\n          });\n          this.internalChecked = checked;\n        }\n      }\n    }\n  }]);\n\n  return TreeviewItem;\n}();\n\nvar TreeviewEventParser = /*@__PURE__*/function () {\n  var TreeviewEventParser = function TreeviewEventParser() {\n    _classCallCheck(this, TreeviewEventParser);\n  };\n\n  TreeviewEventParser.ɵfac = function TreeviewEventParser_Factory(t) {\n    return new (t || TreeviewEventParser)();\n  };\n\n  TreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: TreeviewEventParser,\n    factory: TreeviewEventParser.ɵfac\n  });\n  return TreeviewEventParser;\n}();\n\nvar DefaultTreeviewEventParser = /*@__PURE__*/function () {\n  var DefaultTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser) {\n    _inherits(DefaultTreeviewEventParser, _TreeviewEventParser);\n\n    var _super2 = _createSuper(DefaultTreeviewEventParser);\n\n    function DefaultTreeviewEventParser() {\n      _classCallCheck(this, DefaultTreeviewEventParser);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(DefaultTreeviewEventParser, [{\n      key: \"getSelectedChange\",\n      value: function getSelectedChange(component) {\n        var checkedItems = component.selection.checkedItems;\n\n        if (!isNil(checkedItems)) {\n          return checkedItems.map(function (item) {\n            return item.value;\n          });\n        }\n\n        return [];\n      }\n    }]);\n\n    return DefaultTreeviewEventParser;\n  }(TreeviewEventParser);\n\n  DefaultTreeviewEventParser.ɵfac = function DefaultTreeviewEventParser_Factory(t) {\n    return ɵDefaultTreeviewEventParser_BaseFactory(t || DefaultTreeviewEventParser);\n  };\n\n  DefaultTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: DefaultTreeviewEventParser,\n    factory: DefaultTreeviewEventParser.ɵfac\n  });\n  return DefaultTreeviewEventParser;\n}();\n\nvar ɵDefaultTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewEventParser);\n\nvar DownlineTreeviewEventParser = /*@__PURE__*/function () {\n  var DownlineTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser2) {\n    _inherits(DownlineTreeviewEventParser, _TreeviewEventParser2);\n\n    var _super3 = _createSuper(DownlineTreeviewEventParser);\n\n    function DownlineTreeviewEventParser() {\n      _classCallCheck(this, DownlineTreeviewEventParser);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(DownlineTreeviewEventParser, [{\n      key: \"getSelectedChange\",\n      value: function getSelectedChange(component) {\n        var _this2 = this;\n\n        var items = component.items;\n\n        if (!isNil(items)) {\n          var result = [];\n          items.forEach(function (item) {\n            var links = _this2.getLinks(item, null);\n\n            if (!isNil(links)) {\n              result = result.concat(links);\n            }\n          });\n          return result;\n        }\n\n        return [];\n      }\n    }, {\n      key: \"getLinks\",\n      value: function getLinks(item, parent) {\n        var _this3 = this;\n\n        if (!isNil(item.children)) {\n          var link = {\n            item: item,\n            parent: parent\n          };\n          var result = [];\n          item.children.forEach(function (child) {\n            var links = _this3.getLinks(child, link);\n\n            if (!isNil(links)) {\n              result = result.concat(links);\n            }\n          });\n          return result;\n        }\n\n        if (item.checked) {\n          return [{\n            item: item,\n            parent: parent\n          }];\n        }\n\n        return null;\n      }\n    }]);\n\n    return DownlineTreeviewEventParser;\n  }(TreeviewEventParser);\n\n  DownlineTreeviewEventParser.ɵfac = function DownlineTreeviewEventParser_Factory(t) {\n    return ɵDownlineTreeviewEventParser_BaseFactory(t || DownlineTreeviewEventParser);\n  };\n\n  DownlineTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: DownlineTreeviewEventParser,\n    factory: DownlineTreeviewEventParser.ɵfac\n  });\n  return DownlineTreeviewEventParser;\n}();\n\nvar ɵDownlineTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DownlineTreeviewEventParser);\n\nvar OrderDownlineTreeviewEventParser = /*@__PURE__*/function () {\n  var OrderDownlineTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser3) {\n    _inherits(OrderDownlineTreeviewEventParser, _TreeviewEventParser3);\n\n    var _super4 = _createSuper(OrderDownlineTreeviewEventParser);\n\n    function OrderDownlineTreeviewEventParser() {\n      var _this4;\n\n      _classCallCheck(this, OrderDownlineTreeviewEventParser);\n\n      _this4 = _super4.apply(this, arguments);\n      _this4.currentDownlines = [];\n      _this4.parser = new DownlineTreeviewEventParser();\n      return _this4;\n    }\n\n    _createClass(OrderDownlineTreeviewEventParser, [{\n      key: \"getSelectedChange\",\n      value: function getSelectedChange(component) {\n        var newDownlines = this.parser.getSelectedChange(component);\n\n        if (this.currentDownlines.length === 0) {\n          this.currentDownlines = newDownlines;\n        } else {\n          var intersectDownlines = [];\n          this.currentDownlines.forEach(function (downline) {\n            var foundIndex = -1;\n            var length = newDownlines.length;\n\n            for (var i = 0; i < length; i++) {\n              if (downline.item.value === newDownlines[i].item.value) {\n                foundIndex = i;\n                break;\n              }\n            }\n\n            if (foundIndex !== -1) {\n              intersectDownlines.push(newDownlines[foundIndex]);\n              newDownlines.splice(foundIndex, 1);\n            }\n          });\n          this.currentDownlines = intersectDownlines.concat(newDownlines);\n        }\n\n        return this.currentDownlines;\n      }\n    }]);\n\n    return OrderDownlineTreeviewEventParser;\n  }(TreeviewEventParser);\n\n  OrderDownlineTreeviewEventParser.ɵfac = function OrderDownlineTreeviewEventParser_Factory(t) {\n    return ɵOrderDownlineTreeviewEventParser_BaseFactory(t || OrderDownlineTreeviewEventParser);\n  };\n\n  OrderDownlineTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: OrderDownlineTreeviewEventParser,\n    factory: OrderDownlineTreeviewEventParser.ɵfac\n  });\n  return OrderDownlineTreeviewEventParser;\n}();\n\nvar ɵOrderDownlineTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(OrderDownlineTreeviewEventParser);\n\nvar FilterTreeviewItem = /*#__PURE__*/function (_TreeviewItem) {\n  _inherits(FilterTreeviewItem, _TreeviewItem);\n\n  var _super5 = _createSuper(FilterTreeviewItem);\n\n  function FilterTreeviewItem(item) {\n    var _this5;\n\n    _classCallCheck(this, FilterTreeviewItem);\n\n    _this5 = _super5.call(this, {\n      text: item.text,\n      value: item.value,\n      disabled: item.disabled,\n      checked: item.checked,\n      collapsed: item.collapsed,\n      children: item.children\n    });\n    _this5.refItem = item;\n    return _this5;\n  }\n\n  _createClass(FilterTreeviewItem, [{\n    key: \"updateRefChecked\",\n    value: function updateRefChecked() {\n      this.children.forEach(function (child) {\n        if (child instanceof FilterTreeviewItem) {\n          child.updateRefChecked();\n        }\n      });\n      var refChecked = this.checked;\n\n      if (refChecked) {\n        var _iterator6 = _createForOfIteratorHelper(this.refItem.children),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var refChild = _step6.value;\n\n            if (!refChild.checked) {\n              refChecked = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      this.refItem.checked = refChecked;\n    }\n  }]);\n\n  return FilterTreeviewItem;\n}(TreeviewItem);\n\nvar TreeviewComponent = /*@__PURE__*/function () {\n  var TreeviewComponent = /*#__PURE__*/function () {\n    function TreeviewComponent(i18n, defaultConfig, eventParser) {\n      _classCallCheck(this, TreeviewComponent);\n\n      this.i18n = i18n;\n      this.defaultConfig = defaultConfig;\n      this.eventParser = eventParser;\n      this.selectedChange = new EventEmitter();\n      this.filterChange = new EventEmitter();\n      this.filterText = '';\n      this.config = this.defaultConfig;\n      this.allItem = new TreeviewItem({\n        text: 'All',\n        value: undefined\n      });\n    }\n\n    _createClass(TreeviewComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.createHeaderTemplateContext();\n        this.generateSelection();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var itemsSimpleChange = changes.items;\n\n        if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n          this.updateFilterItems();\n          this.updateCollapsedOfAll();\n          this.raiseSelectedChange();\n        }\n      }\n    }, {\n      key: \"onAllCollapseExpand\",\n      value: function onAllCollapseExpand() {\n        var _this6 = this;\n\n        this.allItem.collapsed = !this.allItem.collapsed;\n        this.filterItems.forEach(function (item) {\n          return item.setCollapsedRecursive(_this6.allItem.collapsed);\n        });\n      }\n    }, {\n      key: \"onFilterTextChange\",\n      value: function onFilterTextChange(text) {\n        this.filterText = text;\n        this.filterChange.emit(text);\n        this.updateFilterItems();\n      }\n    }, {\n      key: \"onAllCheckedChange\",\n      value: function onAllCheckedChange() {\n        var checked = this.allItem.checked;\n        this.filterItems.forEach(function (item) {\n          item.setCheckedRecursive(checked);\n\n          if (item instanceof FilterTreeviewItem) {\n            item.updateRefChecked();\n          }\n        });\n        this.raiseSelectedChange();\n      }\n    }, {\n      key: \"onItemCheckedChange\",\n      value: function onItemCheckedChange(item, checked) {\n        if (item instanceof FilterTreeviewItem) {\n          item.updateRefChecked();\n        }\n\n        this.updateCheckedOfAll();\n        this.raiseSelectedChange();\n      }\n    }, {\n      key: \"raiseSelectedChange\",\n      value: function raiseSelectedChange() {\n        var _this7 = this;\n\n        this.generateSelection();\n        var values = this.eventParser.getSelectedChange(this);\n        setTimeout(function () {\n          _this7.selectedChange.emit(values);\n        });\n      }\n    }, {\n      key: \"createHeaderTemplateContext\",\n      value: function createHeaderTemplateContext() {\n        var _this8 = this;\n\n        this.headerTemplateContext = {\n          config: this.config,\n          item: this.allItem,\n          onCheckedChange: function onCheckedChange() {\n            return _this8.onAllCheckedChange();\n          },\n          onCollapseExpand: function onCollapseExpand() {\n            return _this8.onAllCollapseExpand();\n          },\n          onFilterTextChange: function onFilterTextChange(text) {\n            return _this8.onFilterTextChange(text);\n          }\n        };\n      }\n    }, {\n      key: \"generateSelection\",\n      value: function generateSelection() {\n        var checkedItems = [];\n        var uncheckedItems = [];\n\n        if (!isNil(this.items)) {\n          var selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n          checkedItems = selection.checked;\n          uncheckedItems = selection.unchecked;\n        }\n\n        this.selection = {\n          checkedItems: checkedItems,\n          uncheckedItems: uncheckedItems\n        };\n      }\n    }, {\n      key: \"updateFilterItems\",\n      value: function updateFilterItems() {\n        var _this9 = this;\n\n        if (this.filterText !== '') {\n          var filterItems = [];\n          var filterText = this.filterText.toLowerCase();\n          this.items.forEach(function (item) {\n            var newItem = _this9.filterItem(item, filterText);\n\n            if (!isNil(newItem)) {\n              filterItems.push(newItem);\n            }\n          });\n          this.filterItems = filterItems;\n        } else {\n          this.filterItems = this.items;\n        }\n\n        this.updateCheckedOfAll();\n      }\n    }, {\n      key: \"filterItem\",\n      value: function filterItem(item, filterText) {\n        var _this10 = this;\n\n        var isMatch = includes(item.text.toLowerCase(), filterText);\n\n        if (isMatch) {\n          return item;\n        } else {\n          if (!isNil(item.children)) {\n            var children = [];\n            item.children.forEach(function (child) {\n              var newChild = _this10.filterItem(child, filterText);\n\n              if (!isNil(newChild)) {\n                children.push(newChild);\n              }\n            });\n\n            if (children.length > 0) {\n              var newItem = new FilterTreeviewItem(item);\n              newItem.collapsed = false;\n              newItem.children = children;\n              return newItem;\n            }\n          }\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"updateCheckedOfAll\",\n      value: function updateCheckedOfAll() {\n        var itemChecked = null;\n\n        var _iterator7 = _createForOfIteratorHelper(this.filterItems),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var filterItem = _step7.value;\n\n            if (itemChecked === null) {\n              itemChecked = filterItem.checked;\n            } else if (itemChecked !== filterItem.checked) {\n              itemChecked = undefined;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        if (itemChecked === null) {\n          itemChecked = false;\n        }\n\n        this.allItem.checked = itemChecked;\n      }\n    }, {\n      key: \"updateCollapsedOfAll\",\n      value: function updateCollapsedOfAll() {\n        var hasItemExpanded = false;\n\n        var _iterator8 = _createForOfIteratorHelper(this.filterItems),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var filterItem = _step8.value;\n\n            if (!filterItem.collapsed) {\n              hasItemExpanded = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n\n        this.allItem.collapsed = !hasItemExpanded;\n      }\n    }, {\n      key: \"hasFilterItems\",\n      get: function get() {\n        return !isNil(this.filterItems) && this.filterItems.length > 0;\n      }\n    }, {\n      key: \"maxHeight\",\n      get: function get() {\n        return \"\".concat(this.config.maxHeight);\n      }\n    }]);\n\n    return TreeviewComponent;\n  }();\n\n  TreeviewComponent.ɵfac = function TreeviewComponent_Factory(t) {\n    return new (t || TreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig), ɵngcc0.ɵɵdirectiveInject(TreeviewEventParser));\n  };\n\n  TreeviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeviewComponent,\n    selectors: [[\"ngx-treeview\"]],\n    inputs: {\n      config: \"config\",\n      headerTemplate: \"headerTemplate\",\n      itemTemplate: \"itemTemplate\",\n      items: \"items\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      filterChange: \"filterChange\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 5,\n    consts: [[\"defaultItemTemplate\", \"\"], [\"defaultHeaderTemplate\", \"\"], [1, \"treeview-header\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"class\", \"treeview-container\", 3, \"max-height\", 4, \"ngSwitchCase\"], [\"class\", \"treeview-text\", 4, \"ngSwitchCase\"], [1, \"form-inline\", \"row-item\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\", 4, \"ngIf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"indeterminate\", \"ngModelChange\"], [1, \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-right-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-down-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-right-fill\"], [\"d\", \"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-down-fill\"], [\"d\", \"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"], [\"class\", \"row row-filter\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"row\", \"row-filter\"], [1, \"col-12\"], [\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"class\", \"row row-all\", 4, \"ngIf\"], [\"class\", \"dropdown-divider\", 4, \"ngIf\"], [1, \"row\", \"row-all\"], [\"class\", \"form-check form-check-inline\", 4, \"ngIf\"], [\"class\", \"float-right form-check-label\", 3, \"click\", 4, \"ngIf\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"indeterminate\", \"ngModelChange\"], [1, \"float-right\", \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"title\", \"ngSwitch\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-expand\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-contract\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-expand\"], [\"fill-rule\", \"evenodd\", \"d\", \"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-contract\"], [\"fill-rule\", \"evenodd\", \"d\", \"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\"], [1, \"dropdown-divider\"], [1, \"treeview-container\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"], [1, \"treeview-text\"]],\n    template: function TreeviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_0_Template, 6, 5, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(5, TreeviewComponent_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(7, TreeviewComponent_div_7_Template, 2, 3, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(8, TreeviewComponent_div_8_Template, 2, 1, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var _r2 = ɵngcc0.ɵɵreference(3);\n\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || _r2)(\"ngTemplateOutletContext\", ctx.headerTemplateContext);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.hasFilterItems);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      }\n    },\n    directives: function directives() {\n      return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgIf, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc2.DefaultValueAccessor, ɵngcc1.NgForOf, TreeviewItemComponent];\n    },\n    styles: [\"[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-filter[_ngcontent-%COMP%]{margin-bottom:.5rem}[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-all[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]{flex-wrap:nowrap;margin-bottom:.3rem}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer;margin-right:.3rem}.treeview-container[_ngcontent-%COMP%]{overflow-y:auto;padding-right:.3rem}.treeview-text[_ngcontent-%COMP%]{padding:.3rem 0;white-space:nowrap}\"]\n  });\n  return TreeviewComponent;\n}();\n\nvar DropdownTreeviewComponent = /*@__PURE__*/function () {\n  var DropdownTreeviewComponent = /*#__PURE__*/function () {\n    function DropdownTreeviewComponent(i18n, defaultConfig) {\n      _classCallCheck(this, DropdownTreeviewComponent);\n\n      this.i18n = i18n;\n      this.defaultConfig = defaultConfig;\n      this.buttonClass = 'btn-outline-secondary';\n      this.selectedChange = new EventEmitter(true);\n      this.filterChange = new EventEmitter();\n      this.config = this.defaultConfig;\n    }\n\n    _createClass(DropdownTreeviewComponent, [{\n      key: \"onSelectedChange\",\n      value: function onSelectedChange(values) {\n        this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n        this.selectedChange.emit(values);\n      }\n    }, {\n      key: \"onFilterChange\",\n      value: function onFilterChange(text) {\n        this.filterChange.emit(text);\n      }\n    }]);\n\n    return DropdownTreeviewComponent;\n  }();\n\n  DropdownTreeviewComponent.ɵfac = function DropdownTreeviewComponent_Factory(t) {\n    return new (t || DropdownTreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n  };\n\n  DropdownTreeviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: DropdownTreeviewComponent,\n    selectors: [[\"ngx-dropdown-treeview\"]],\n    viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TreeviewComponent, 1);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);\n      }\n    },\n    inputs: {\n      buttonClass: \"buttonClass\",\n      config: \"config\",\n      headerTemplate: \"headerTemplate\",\n      itemTemplate: \"itemTemplate\",\n      items: \"items\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\",\n      filterChange: \"filterChange\"\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[\"ngxDropdown\", \"\", 1, \"dropdown\"], [\"type\", \"button\", \"role\", \"button\", \"ngxDropdownToggle\", \"\", 1, \"btn\", 3, \"ngClass\"], [\"ngxDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenu\", 3, \"click\"], [1, \"dropdown-container\"], [3, \"config\", \"headerTemplate\", \"items\", \"itemTemplate\", \"selectedChange\", \"filterChange\"]],\n    template: function DropdownTreeviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function DropdownTreeviewComponent_Template_div_click_3_listener($event) {\n          return $event.stopPropagation();\n        });\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(5, \"ngx-treeview\", 4);\n        ɵngcc0.ɵɵlistener(\"selectedChange\", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) {\n          return ctx.onSelectedChange($event);\n        })(\"filterChange\", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) {\n          return ctx.onFilterChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.buttonClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.buttonLabel, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"config\", ctx.config)(\"headerTemplate\", ctx.headerTemplate)(\"items\", ctx.items)(\"itemTemplate\", ctx.itemTemplate);\n      }\n    },\n    directives: [DropdownDirective, DropdownToggleDirective, ɵngcc1.NgClass, DropdownMenuDirective, TreeviewComponent],\n    styles: [\".dropdown[_ngcontent-%COMP%]{display:inline-block;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:.9rem;overflow:hidden;padding-right:30px;text-align:left;text-overflow:ellipsis;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:after{margin-top:.6rem;position:absolute;right:.6rem}.dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]{padding:0 .6rem}\"]\n  });\n  return DropdownTreeviewComponent;\n}();\n\nvar TreeviewItemComponent = /*@__PURE__*/function () {\n  var TreeviewItemComponent = /*#__PURE__*/function () {\n    function TreeviewItemComponent(defaultConfig) {\n      var _this11 = this;\n\n      _classCallCheck(this, TreeviewItemComponent);\n\n      this.defaultConfig = defaultConfig;\n      this.checkedChange = new EventEmitter();\n\n      this.onCollapseExpand = function () {\n        _this11.item.collapsed = !_this11.item.collapsed;\n      };\n\n      this.onCheckedChange = function () {\n        var checked = _this11.item.checked;\n\n        if (!isNil(_this11.item.children) && !_this11.config.decoupleChildFromParent) {\n          _this11.item.children.forEach(function (child) {\n            return child.setCheckedRecursive(checked);\n          });\n        }\n\n        _this11.checkedChange.emit(checked);\n      };\n\n      this.config = this.defaultConfig;\n    }\n\n    _createClass(TreeviewItemComponent, [{\n      key: \"onChildCheckedChange\",\n      value: function onChildCheckedChange(child, checked) {\n        if (!this.config.decoupleChildFromParent) {\n          var itemChecked = null;\n\n          var _iterator9 = _createForOfIteratorHelper(this.item.children),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var childItem = _step9.value;\n\n              if (itemChecked === null) {\n                itemChecked = childItem.checked;\n              } else if (itemChecked !== childItem.checked) {\n                itemChecked = undefined;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n\n          if (itemChecked === null) {\n            itemChecked = false;\n          }\n\n          if (this.item.checked !== itemChecked) {\n            this.item.checked = itemChecked;\n          }\n        }\n\n        this.checkedChange.emit(checked);\n      }\n    }]);\n\n    return TreeviewItemComponent;\n  }();\n\n  TreeviewItemComponent.ɵfac = function TreeviewItemComponent_Factory(t) {\n    return new (t || TreeviewItemComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n  };\n\n  TreeviewItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeviewItemComponent,\n    selectors: [[\"ngx-treeview-item\"]],\n    inputs: {\n      config: \"config\",\n      template: \"template\",\n      item: \"item\"\n    },\n    outputs: {\n      checkedChange: \"checkedChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"treeview-item\", 4, \"ngIf\"], [1, \"treeview-item\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"]],\n    template: function TreeviewItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.item);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, TreeviewItemComponent],\n    styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]{white-space:nowrap}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%]{margin-left:2rem}\"]\n  });\n  return TreeviewItemComponent;\n}();\n\nvar TreeviewPipe = /*@__PURE__*/function () {\n  var TreeviewPipe = /*#__PURE__*/function () {\n    function TreeviewPipe() {\n      _classCallCheck(this, TreeviewPipe);\n    }\n\n    _createClass(TreeviewPipe, [{\n      key: \"transform\",\n      value: function transform(objects, textField) {\n        if (isNil(objects)) {\n          return undefined;\n        }\n\n        return objects.map(function (object) {\n          return new TreeviewItem({\n            text: object[textField],\n            value: object\n          });\n        });\n      }\n    }]);\n\n    return TreeviewPipe;\n  }();\n\n  TreeviewPipe.ɵfac = function TreeviewPipe_Factory(t) {\n    return new (t || TreeviewPipe)();\n  };\n\n  TreeviewPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"ngxTreeview\",\n    type: TreeviewPipe,\n    pure: true\n  });\n  return TreeviewPipe;\n}();\n\nvar TreeviewModule = /*@__PURE__*/function () {\n  var TreeviewModule = /*#__PURE__*/function () {\n    function TreeviewModule() {\n      _classCallCheck(this, TreeviewModule);\n    }\n\n    _createClass(TreeviewModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        return {\n          ngModule: TreeviewModule,\n          providers: [TreeviewConfig, {\n            provide: TreeviewI18n,\n            useClass: DefaultTreeviewI18n\n          }, {\n            provide: TreeviewEventParser,\n            useClass: DefaultTreeviewEventParser\n          }]\n        };\n      }\n    }]);\n\n    return TreeviewModule;\n  }();\n\n  TreeviewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: TreeviewModule\n  });\n  TreeviewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function TreeviewModule_Factory(t) {\n      return new (t || TreeviewModule)();\n    },\n    imports: [[FormsModule, CommonModule]]\n  });\n  return TreeviewModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeviewModule, {\n    declarations: function declarations() {\n      return [TreeviewComponent, TreeviewItemComponent, TreeviewPipe, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective, DropdownTreeviewComponent];\n    },\n    imports: function imports() {\n      return [FormsModule, CommonModule];\n    },\n    exports: function exports() {\n      return [TreeviewComponent, TreeviewPipe, DropdownTreeviewComponent];\n    }\n  });\n})();\n/*\n * Public API Surface of ngx-treeview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultTreeviewEventParser, DefaultTreeviewI18n, DownlineTreeviewEventParser, DropdownDirective, DropdownToggleDirective, DropdownTreeviewComponent, OrderDownlineTreeviewEventParser, TreeviewComponent, TreeviewConfig, TreeviewEventParser, TreeviewHelper, TreeviewI18n, TreeviewItem, TreeviewModule, TreeviewPipe, TreeviewItemComponent as ɵa, DropdownMenuDirective as ɵb };","map":null,"metadata":{},"sourceType":"module"}