{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport imagesLoadedMethod from 'imagesloaded';\nimport * as masonry from 'masonry-layout';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar Utilities = /*#__PURE__*/function () {\n  function Utilities() {\n    _classCallCheck(this, Utilities);\n  }\n\n  _createClass(Utilities, [{\n    key: \"newGuid\",\n\n    /**\n     * @return {?}\n     */\n    value: function newGuid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      function (c) {\n        // tslint:disable-next-line:no-bitwise triple-equals\n\n        /** @type {?} */\n        var r = Math.random() * 16 | 0;\n        /** @type {?} */\n\n        var v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n  }]);\n\n  return Utilities;\n}();\n/** @type {?} */\n\n\nvar utilities = new Utilities();\n\nvar MasonryGalleryComponent = /*@__PURE__*/function () {\n  var MasonryGalleryComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} renderer\n     */\n    function MasonryGalleryComponent(renderer) {\n      _classCallCheck(this, MasonryGalleryComponent);\n\n      this.renderer = renderer;\n      this.images = [];\n      this.width = 330;\n      this.gutter = 5;\n      this.verticalGutter = 5;\n      this.imageClasses = [];\n      this.clickImage = new EventEmitter();\n      this.removeComplete = new EventEmitter();\n      this.layoutComplete = new EventEmitter();\n      this.galleryGuid = utilities.newGuid();\n      this.mansonryItemSelectorClass = \"grid-item-\".concat(this.galleryGuid);\n      this.activeImages = [];\n      this.viewReady = false;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    _createClass(MasonryGalleryComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes.images && changes.images.currentValue) {\n          if (!this.viewReady) {\n            // process images once we can\n            this.changesToProcess = changes;\n          } else {\n            this.processImages(changes);\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.msnry) {\n          this.msnry.destroy();\n        }\n      }\n      /**\n       * @param {?} image\n       * @return {?}\n       */\n\n    }, {\n      key: \"handleClick\",\n      value: function handleClick(image) {\n        this.clickImage.next(image);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.viewReady = true;\n        this.initMasonry(); // process images now\n\n        if (this.changesToProcess) {\n          this.processImages(this.changesToProcess);\n          this.changesToProcess = undefined;\n        }\n      }\n      /**\n       * @param {?} images\n       * @return {?}\n       */\n\n    }, {\n      key: \"addImages\",\n      value: function addImages(images) {\n        if (images && images.length > 0) {\n          this.addImagesToGallery(images);\n        }\n      }\n      /**\n       * @param {?} images\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeImages\",\n      value: function removeImages(images) {\n        var _this = this;\n\n        if (images && images.length > 0) {\n          images.forEach(\n          /**\n          * @param {?} image\n          * @return {?}\n          */\n\n          /**\n          * @param {?} image\n          * @return {?}\n          */\n          function (image) {\n            _this.removeImageFromGallery(image);\n          });\n        }\n      }\n      /**\n       * @private\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"processImages\",\n      value: function processImages(changes) {\n        /** @type {?} */\n        var imagesToProcess = this.getAddedAndRemovesImages(changes); // add images to mansonry layout\n\n        this.addImages(imagesToProcess.addedImages); // removes images from layout\n\n        this.removeImages(imagesToProcess.removedImages);\n      }\n      /**\n       * @private\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"getAddedAndRemovesImages\",\n      value: function getAddedAndRemovesImages(changes) {\n        /** @type {?} */\n        var addedImages = [];\n        /** @type {?} */\n\n        var removedImages = [];\n        /** @type {?} */\n\n        var newImagesValue =\n        /** @type {?} */\n        changes.images.currentValue;\n        /** @type {?} */\n\n        var oldImagesValue =\n        /** @type {?} */\n        changes.images.previousValue;\n\n        if (!oldImagesValue) {\n          // all images are new ones\n          addedImages = changes.images.currentValue;\n        } else {\n          // process added images\n          newImagesValue.forEach(\n          /**\n          * @param {?} newImage\n          * @return {?}\n          */\n\n          /**\n          * @param {?} newImage\n          * @return {?}\n          */\n          function (newImage) {\n            /** @type {?} */\n            var existingImage = oldImagesValue.find(\n            /**\n            * @param {?} m\n            * @return {?}\n            */\n\n            /**\n            * @param {?} m\n            * @return {?}\n            */\n            function (m) {\n              return m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase();\n            });\n            if (existingImage) ;else {\n              // image is new\n              addedImages.push(newImage);\n            }\n          }); // process removed images\n\n          oldImagesValue.forEach(\n          /**\n          * @param {?} oldImage\n          * @return {?}\n          */\n\n          /**\n          * @param {?} oldImage\n          * @return {?}\n          */\n          function (oldImage) {\n            /** @type {?} */\n            var existingImage = newImagesValue.find(\n            /**\n            * @param {?} m\n            * @return {?}\n            */\n\n            /**\n            * @param {?} m\n            * @return {?}\n            */\n            function (m) {\n              return m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase();\n            });\n            if (existingImage) ;else {\n              // image is removed\n              removedImages.push(oldImage);\n            }\n          });\n        }\n\n        return {\n          addedImages: addedImages,\n          removedImages: removedImages\n        };\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"initMasonry\",\n      value: function initMasonry() {\n        this.grid = document.getElementById(this.galleryGuid); // remove all existing data from grid\n\n        this.grid.innerHTML = '';\n\n        if (!this.grid) {\n          throw Error(\"Could not init mansory due to non existing elem with id '\".concat(this.galleryGuid, \"'\"));\n        }\n\n        this.msnry = new masonry(this.grid, {\n          // options...\n          itemSelector: '.' + this.mansonryItemSelectorClass,\n          columnWidth: this.width,\n          gutter: this.gutter\n        });\n        /** @type {?} */\n\n        var that = this;\n        this.msnry.on('layoutComplete',\n        /**\n        * @param {?} items\n        * @return {?}\n        */\n        function (items) {\n          that.layoutComplete.next(items);\n        });\n        this.msnry.on('removeComplete',\n        /**\n        * @param {?} items\n        * @return {?}\n        */\n        function (items) {\n          that.removeComplete.next(items);\n        });\n      }\n      /**\n       * @private\n       * @param {?} image\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeImageFromGallery\",\n      value: function removeImageFromGallery(image) {\n        // get image guid\n\n        /** @type {?} */\n        var imageIdResult = this.activeImages.find(\n        /**\n        * @param {?} m\n        * @return {?}\n        */\n\n        /**\n        * @param {?} m\n        * @return {?}\n        */\n        function (m) {\n          return m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase();\n        });\n\n        if (!imageIdResult) {\n          // image was not found, this is probably an error\n          console.warn(\"Image with url '\".concat(image.imageUrl, \"' was not found. If you are adding images, make sure to 'replace' the images array with a new one\\n                so that detection change can be executed instead of just adding an image to array\\n                (which doesn't fire change detection on array property)\"));\n          return;\n        } // find image based on its id\n\n        /** @type {?} */\n\n\n        var imageElem = document.getElementById(imageIdResult.id);\n\n        if (!imageElem) {\n          // image was not found in DOM\n          console.warn(\"Image with id '{\".concat(imageIdResult.id, \"}' was not found in DOM. Have you manipulated the DOM in some way?\"));\n          return;\n        } // remove image from gallery\n\n\n        this.msnry.remove(imageElem); // refresh layout\n\n        this.msnry.layout(); // remove image from array\n\n        for (var i = 0; i < this.activeImages.length; i++) {\n          /** @type {?} */\n          var idWithImage = this.activeImages[i];\n\n          if (idWithImage.image.imageUrl.toLowerCase() === imageIdResult.image.imageUrl.toLowerCase()) {\n            this.activeImages.splice(i, 1);\n          }\n        }\n      }\n      /**\n       * @private\n       * @param {?} images\n       * @return {?}\n       */\n\n    }, {\n      key: \"addImagesToGallery\",\n      value: function addImagesToGallery(images) {\n        var _this2 = this;\n\n        if (!this.grid) {\n          throw Error('Grid element is not yet ready, are you trying to add image too soon?');\n        }\n        /** @type {?} */\n\n\n        var imagesWrapper = this.renderer.createElement('span');\n        images.forEach(\n        /**\n        * @param {?} image\n        * @return {?}\n        */\n\n        /**\n        * @param {?} image\n        * @return {?}\n        */\n        function (image) {\n          // generate unique image id\n\n          /** @type {?} */\n          var imageId = _this2.getImageId(); // create element\n\n          /** @type {?} */\n\n\n          var imageElem = _this2.renderer.createElement('img');\n\n          imageElem.setAttribute('id', imageId);\n          imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\n          imageElem.setAttribute('src', image.imageUrl); // note - images are hidden by default and should be shown only after they are loaded\n\n          imageElem.setAttribute('style', \"display: none; width: \".concat(_this2.width, \"px; margin-bottom: \").concat(_this2.verticalGutter, \"px\"));\n          imageElem.className = _this2.getImageClass();\n          imageElem.addEventListener('click',\n          /**\n          * @return {?}\n          */\n          function () {\n            _this2.handleClick(image);\n          }); // store guid with this image\n\n          _this2.activeImages.push({\n            id: imageId,\n            image: image\n          }); // add to dom and mansory & refresh layout\n\n\n          _this2.renderer.appendChild(imagesWrapper, imageElem);\n        }); // add html to dom\n\n        this.renderer.appendChild(this.grid, imagesWrapper); // add images once they are loaded\n\n        /** @type {?} */\n\n        var imgLoad = imagesLoadedMethod(imagesWrapper);\n        imgLoad.on('progress',\n        /**\n        * @param {?} instance\n        * @param {?} image\n        * @return {?}\n        */\n        function (instance, image) {\n          if (image.isLoaded) {\n            _this2.renderer.appendChild(_this2.grid, image.img); // unhide image\n\n\n            _this2.renderer.setStyle(image.img, 'display', 'block');\n\n            _this2.msnry.appended(image.img);\n\n            _this2.msnry.reloadItems();\n          }\n        });\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getImageClass\",\n      value: function getImageClass() {\n        /** @type {?} */\n        var className = this.mansonryItemSelectorClass;\n\n        if (this.imageClasses && this.imageClasses.length > 0) {\n          /** @type {?} */\n          var customClass = this.imageClasses.join(' ');\n          className += ' ' + customClass;\n        }\n\n        return className;\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getImageId\",\n      value: function getImageId() {\n        return this.galleryGuid + '_' + utilities.newGuid();\n      }\n    }]);\n\n    return MasonryGalleryComponent;\n  }();\n\n  MasonryGalleryComponent.Éµfac = function MasonryGalleryComponent_Factory(t) {\n    return new (t || MasonryGalleryComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2));\n  };\n\n  MasonryGalleryComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n    type: MasonryGalleryComponent,\n    selectors: [[\"ngx-masonry-gallery\"]],\n    inputs: {\n      images: \"images\",\n      width: \"width\",\n      gutter: \"gutter\",\n      verticalGutter: \"verticalGutter\",\n      imageClasses: \"imageClasses\"\n    },\n    outputs: {\n      clickImage: \"clickImage\",\n      removeComplete: \"removeComplete\",\n      layoutComplete: \"layoutComplete\"\n    },\n    features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function MasonryGalleryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        Éµngcc0.ÉµÉµproperty(\"id\", ctx.galleryGuid);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MasonryGalleryComponent;\n}();\n\nvar MasonryGalleryModule = /*@__PURE__*/function () {\n  var MasonryGalleryModule = function MasonryGalleryModule() {\n    _classCallCheck(this, MasonryGalleryModule);\n  };\n\n  MasonryGalleryModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n    type: MasonryGalleryModule\n  });\n  MasonryGalleryModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n    factory: function MasonryGalleryModule_Factory(t) {\n      return new (t || MasonryGalleryModule)();\n    },\n    imports: [[CommonModule]]\n  });\n  return MasonryGalleryModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(MasonryGalleryModule, {\n    declarations: function declarations() {\n      return [MasonryGalleryComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [MasonryGalleryComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IMasonryGalleryImage = function IMasonryGalleryImage() {\n  _classCallCheck(this, IMasonryGalleryImage);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { IMasonryGalleryImage, MasonryGalleryComponent, MasonryGalleryModule };","map":null,"metadata":{},"sourceType":"module"}