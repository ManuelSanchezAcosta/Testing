{"ast":null,"code":"import _toConsumableArray from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, Input, Output, HostBinding, HostListener, ElementRef, Injectable, Component, ViewChild, Pipe, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { isNil, pull, concat, isString, isBoolean, includes } from 'lodash';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 15);\n    ɵngcc0.ɵɵelement(1, \"path\", 16);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 17);\n    ɵngcc0.ɵɵelement(1, \"path\", 18);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"i\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_i_1_Template_i_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      var onCollapseExpand_r8 = ɵngcc0.ɵɵnextContext().onCollapseExpand;\n      return onCollapseExpand_r8();\n    });\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1__svg_svg_1_Template, 2, 0, \"svg\", 13);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_0_i_1__svg_svg_2_Template, 2, 0, \"svg\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r7 = ɵngcc0.ɵɵnextContext().item;\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", item_r7.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_0_i_1_Template, 3, 3, \"i\", 8);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(3, \"input\", 10);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener($event) {\n      var item_r7 = ctx.item;\n      return item_r7.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_0_Template_input_ngModelChange_3_listener() {\n      var onCheckedChange_r9 = ctx.onCheckedChange;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_0_Template_label_click_4_listener() {\n      var item_r7 = ctx.item;\n      var onCheckedChange_r9 = ctx.onCheckedChange;\n      item_r7.checked = !item_r7.checked;\n      return onCheckedChange_r9();\n    });\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r7 = ctx.item;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r7.children);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r7.checked)(\"disabled\", item_r7.disabled)(\"indeterminate\", item_r7.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r7.text, \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 23);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var ctx_r27 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r27.filterText = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_0_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      var onFilterTextChange_r24 = ɵngcc0.ɵɵnextContext().onFilterTextChange;\n      return onFilterTextChange_r24($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r25 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r25.i18n.getFilterPlaceholder())(\"ngModel\", ctx_r25.filterText);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r37 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 29);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 30);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n      return item_r21.checked = $event;\n    })(\"ngModelChange\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_input_ngModelChange_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var onCheckedChange_r23 = ɵngcc0.ɵɵnextContext(3).onCheckedChange;\n      return onCheckedChange_r23();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"label\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template_label_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      var ctx_r41 = ɵngcc0.ɵɵnextContext(3);\n      var item_r21 = ctx_r41.item;\n      var onCheckedChange_r23 = ctx_r41.onCheckedChange;\n      item_r21.checked = !item_r21.checked;\n      return onCheckedChange_r23();\n    });\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n    var ctx_r33 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", item_r21.checked)(\"indeterminate\", item_r21.indeterminate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r33.i18n.getAllCheckboxText(), \" \");\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 35);\n    ɵngcc0.ɵɵelement(1, \"path\", 36);\n    ɵngcc0.ɵɵelement(2, \"path\", 37);\n    ɵngcc0.ɵɵelement(3, \"path\", 38);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 39);\n    ɵngcc0.ɵɵelement(1, \"path\", 40);\n    ɵngcc0.ɵɵelement(2, \"path\", 41);\n    ɵngcc0.ɵɵelement(3, \"path\", 42);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r47 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 31);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template_label_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      var onCollapseExpand_r22 = ɵngcc0.ɵɵnextContext(3).onCollapseExpand;\n      return onCollapseExpand_r22();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"i\", 32);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_2_Template, 4, 0, \"svg\", 33);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3__svg_svg_3_Template, 4, 0, \"svg\", 34);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r21 = ɵngcc0.ɵɵnextContext(3).item;\n    var ctx_r34 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r34.i18n.getTooltipCollapseExpandText(item_r21.collapsed))(\"ngSwitch\", item_r21.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 26);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 22);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_1_div_2_Template, 4, 3, \"div\", 27);\n    ɵngcc0.ɵɵtemplate(3, TreeviewComponent_ng_template_2_div_1_div_1_label_3_Template, 4, 4, \"label\", 28);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var config_r20 = ɵngcc0.ɵɵnextContext(2).config;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasAllCheckBox);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasCollapseExpand);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 43);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_div_1_Template, 4, 2, \"div\", 24);\n    ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_div_1_div_2_Template, 1, 0, \"div\", 25);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var config_r20 = ɵngcc0.ɵɵnextContext().config;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasAllCheckBox || config_r20.hasCollapseExpand);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasDivider);\n  }\n}\n\nfunction TreeviewComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_2_div_0_Template, 3, 2, \"div\", 19);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_ng_template_2_div_1_Template, 3, 2, \"div\", 20);\n  }\n\n  if (rf & 2) {\n    var config_r20 = ctx.config;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", config_r20.hasFilter);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.hasFilterItems);\n  }\n}\n\nfunction TreeviewComponent_ng_template_5_Template(rf, ctx) {}\n\nfunction TreeviewComponent_div_7_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r54 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 46);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewComponent_div_7_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r54);\n      var item_r52 = ctx.$implicit;\n      var ctx_r53 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r53.onItemCheckedChange(item_r52, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r52 = ctx.$implicit;\n    var ctx_r51 = ɵngcc0.ɵɵnextContext(2);\n\n    var _r0 = ɵngcc0.ɵɵreference(1);\n\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r51.config)(\"item\", item_r52)(\"template\", ctx_r51.itemTemplate || _r0);\n  }\n}\n\nfunction TreeviewComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 44);\n    ɵngcc0.ɵɵtemplate(1, TreeviewComponent_div_7_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 45);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"max-height\", ctx_r5.maxHeight, \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.filterItems);\n  }\n}\n\nfunction TreeviewComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 47);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r6.i18n.getFilterNoItemsFoundText(), \" \");\n  }\n}\n\nfunction TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) {}\n\nfunction TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-treeview-item\", 5);\n    ɵngcc0.ɵɵlistener(\"checkedChange\", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var child_r4 = ctx.$implicit;\n      var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r5.onChildCheckedChange(child_r4, $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var child_r4 = ctx.$implicit;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r3.config)(\"item\", child_r4)(\"template\", ctx_r3.template);\n  }\n}\n\nfunction TreeviewItemComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, \"ngx-treeview-item\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.item.children);\n  }\n}\n\nvar _c0 = function _c0(a0, a1, a2) {\n  return {\n    item: a0,\n    onCollapseExpand: a1,\n    onCheckedChange: a2\n  };\n};\n\nfunction TreeviewItemComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    ɵngcc0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, \"div\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.item.collapsed);\n  }\n}\n\nvar DropdownDirective = /*#__PURE__*/function () {\n  function DropdownDirective() {\n    _classCallCheck(this, DropdownDirective);\n\n    this.internalOpen = false;\n    this.openChange = new EventEmitter();\n  }\n\n  _createClass(DropdownDirective, [{\n    key: \"onKeyupEsc\",\n    value: function onKeyupEsc() {\n      this.close();\n    }\n  }, {\n    key: \"onDocumentClick\",\n    value: function onDocumentClick(event) {\n      if (event.button !== 2 && !this.isEventFromToggle(event)) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (!this.internalOpen) {\n        this.internalOpen = true;\n        this.openChange.emit(true);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.internalOpen) {\n        this.internalOpen = false;\n        this.openChange.emit(false);\n      }\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n  }, {\n    key: \"isEventFromToggle\",\n    value: function isEventFromToggle(event) {\n      return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.internalOpen;\n    }\n  }]);\n\n  return DropdownDirective;\n}();\n\nDropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n  return new (t || DropdownDirective)();\n};\n\nDropdownDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DropdownDirective,\n  selectors: [[\"\", \"ngxDropdown\", \"\"]],\n  hostVars: 2,\n  hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keyup.esc\", function DropdownDirective_keyup_esc_HostBindingHandler() {\n        return ctx.onKeyupEsc();\n      })(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n        return ctx.onDocumentClick($event);\n      }, false, ɵngcc0.ɵɵresolveDocument);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"show\", ctx.isOpen);\n    }\n  },\n  inputs: {\n    internalOpen: [\"open\", \"internalOpen\"]\n  },\n  outputs: {\n    openChange: \"openChange\"\n  },\n  exportAs: [\"ngxDropdown\"]\n});\nDropdownDirective.propDecorators = {\n  internalOpen: [{\n    type: Input,\n    args: ['open']\n  }],\n  openChange: [{\n    type: Output\n  }],\n  isOpen: [{\n    type: HostBinding,\n    args: ['class.show']\n  }],\n  onKeyupEsc: [{\n    type: HostListener,\n    args: ['keyup.esc']\n  }],\n  onDocumentClick: [{\n    type: HostListener,\n    args: ['document:click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxDropdown]',\n      exportAs: 'ngxDropdown'\n    }]\n  }], function () {\n    return [];\n  }, {\n    internalOpen: [{\n      type: Input,\n      args: ['open']\n    }],\n    openChange: [{\n      type: Output\n    }],\n    isOpen: [{\n      type: HostBinding,\n      args: ['class.show']\n    }],\n    onKeyupEsc: [{\n      type: HostListener,\n      args: ['keyup.esc']\n    }],\n    onDocumentClick: [{\n      type: HostListener,\n      args: ['document:click', ['$event']]\n    }]\n  });\n})();\n\nvar DropdownMenuDirective = function DropdownMenuDirective(dropdown) {\n  _classCallCheck(this, DropdownMenuDirective);\n\n  this.dropdown = dropdown;\n};\n\nDropdownMenuDirective.ɵfac = function DropdownMenuDirective_Factory(t) {\n  return new (t || DropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective));\n};\n\nDropdownMenuDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DropdownMenuDirective,\n  selectors: [[\"\", \"ngxDropdownMenu\", \"\"]],\n  hostVars: 4,\n  hostBindings: function DropdownMenuDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"dropdown-menu\", true)(\"show\", ctx.dropdown.isOpen);\n    }\n  }\n});\n\nDropdownMenuDirective.ctorParameters = function () {\n  return [{\n    type: DropdownDirective\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownMenuDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxDropdownMenu]',\n      host: {\n        '[class.dropdown-menu]': 'true',\n        '[class.show]': 'dropdown.isOpen'\n      }\n    }]\n  }], function () {\n    return [{\n      type: DropdownDirective\n    }];\n  }, null);\n})();\n\nvar DropdownToggleDirective = function DropdownToggleDirective(dropdown, elementRef) {\n  _classCallCheck(this, DropdownToggleDirective);\n\n  this.dropdown = dropdown;\n  dropdown.toggleElement = elementRef.nativeElement;\n};\n\nDropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) {\n  return new (t || DropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(DropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nDropdownToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DropdownToggleDirective,\n  selectors: [[\"\", \"ngxDropdownToggle\", \"\"]],\n  hostAttrs: [\"aria-haspopup\", \"true\", 1, \"dropdown-toggle\"],\n  hostVars: 1,\n  hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() {\n        return ctx.dropdown.toggle();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.dropdown.isOpen);\n    }\n  }\n});\n\nDropdownToggleDirective.ctorParameters = function () {\n  return [{\n    type: DropdownDirective\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxDropdownToggle]',\n      host: {\n        class: 'dropdown-toggle',\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'dropdown.isOpen',\n        '(click)': 'dropdown.toggle()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: DropdownDirective\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\nvar TreeviewI18n = function TreeviewI18n() {\n  _classCallCheck(this, TreeviewI18n);\n};\n\nTreeviewI18n.ɵfac = function TreeviewI18n_Factory(t) {\n  return new (t || TreeviewI18n)();\n};\n\nTreeviewI18n.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeviewI18n,\n  factory: TreeviewI18n.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewI18n, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar DefaultTreeviewI18n = /*#__PURE__*/function (_TreeviewI18n) {\n  _inherits(DefaultTreeviewI18n, _TreeviewI18n);\n\n  var _super = _createSuper(DefaultTreeviewI18n);\n\n  function DefaultTreeviewI18n() {\n    _classCallCheck(this, DefaultTreeviewI18n);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DefaultTreeviewI18n, [{\n    key: \"getText\",\n    value: function getText(selection) {\n      if (selection.uncheckedItems.length === 0) {\n        if (selection.checkedItems.length > 0) {\n          return this.getAllCheckboxText();\n        } else {\n          return '';\n        }\n      }\n\n      switch (selection.checkedItems.length) {\n        case 0:\n          return 'Select options';\n\n        case 1:\n          return selection.checkedItems[0].text;\n\n        default:\n          return \"\".concat(selection.checkedItems.length, \" options selected\");\n      }\n    }\n  }, {\n    key: \"getAllCheckboxText\",\n    value: function getAllCheckboxText() {\n      return 'All';\n    }\n  }, {\n    key: \"getFilterPlaceholder\",\n    value: function getFilterPlaceholder() {\n      return 'Filter';\n    }\n  }, {\n    key: \"getFilterNoItemsFoundText\",\n    value: function getFilterNoItemsFoundText() {\n      return 'No items found';\n    }\n  }, {\n    key: \"getTooltipCollapseExpandText\",\n    value: function getTooltipCollapseExpandText(isCollapse) {\n      return isCollapse ? 'Expand' : 'Collapse';\n    }\n  }]);\n\n  return DefaultTreeviewI18n;\n}(TreeviewI18n);\n\nDefaultTreeviewI18n.ɵfac = function DefaultTreeviewI18n_Factory(t) {\n  return ɵDefaultTreeviewI18n_BaseFactory(t || DefaultTreeviewI18n);\n};\n\nDefaultTreeviewI18n.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DefaultTreeviewI18n,\n  factory: DefaultTreeviewI18n.ɵfac\n});\nvar ɵDefaultTreeviewI18n_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewI18n);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultTreeviewI18n, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar TreeviewConfig = /*#__PURE__*/function () {\n  function TreeviewConfig() {\n    _classCallCheck(this, TreeviewConfig);\n\n    this.hasAllCheckBox = true;\n    this.hasFilter = false;\n    this.hasCollapseExpand = false;\n    this.decoupleChildFromParent = false;\n    this.maxHeight = 500;\n  }\n\n  _createClass(TreeviewConfig, [{\n    key: \"hasDivider\",\n    get: function get() {\n      return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(fields) {\n      var config = new TreeviewConfig();\n      Object.assign(config, fields);\n      return config;\n    }\n  }]);\n\n  return TreeviewConfig;\n}();\n\nTreeviewConfig.ɵfac = function TreeviewConfig_Factory(t) {\n  return new (t || TreeviewConfig)();\n};\n\nTreeviewConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeviewConfig,\n  factory: TreeviewConfig.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewConfig, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar TreeviewHelper = {\n  findItem: findItem,\n  findItemInList: findItemInList,\n  findParent: findParent,\n  removeItem: removeItem,\n  concatSelection: concatSelection\n};\n\nfunction findItem(root, value) {\n  if (isNil(root)) {\n    return undefined;\n  }\n\n  if (root.value === value) {\n    return root;\n  }\n\n  if (root.children) {\n    var _iterator = _createForOfIteratorHelper(root.children),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var foundItem = findItem(child, value);\n\n        if (foundItem) {\n          return foundItem;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return undefined;\n}\n\nfunction findItemInList(list, value) {\n  if (isNil(list)) {\n    return undefined;\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(list),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      var foundItem = findItem(item, value);\n\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return undefined;\n}\n\nfunction findParent(root, item) {\n  if (isNil(root) || isNil(root.children)) {\n    return undefined;\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(root.children),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var child = _step3.value;\n\n      if (child === item) {\n        return root;\n      } else {\n        var parent = findParent(child, item);\n\n        if (parent) {\n          return parent;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return undefined;\n}\n\nfunction removeItem(root, item) {\n  var parent = findParent(root, item);\n\n  if (parent) {\n    pull(parent.children, item);\n\n    if (parent.children.length === 0) {\n      parent.children = undefined;\n    } else {\n      parent.correctChecked();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction concatSelection(items, checked, unchecked) {\n  var checkedItems = _toConsumableArray(checked);\n\n  var uncheckedItems = _toConsumableArray(unchecked);\n\n  var _iterator4 = _createForOfIteratorHelper(items),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var item = _step4.value;\n      var selection = item.getSelection();\n      checkedItems = concat(checkedItems, selection.checkedItems);\n      uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return {\n    checked: checkedItems,\n    unchecked: uncheckedItems\n  };\n}\n\nvar TreeviewItem = /*#__PURE__*/function () {\n  function TreeviewItem(item) {\n    var _this = this;\n\n    var autoCorrectChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, TreeviewItem);\n\n    this.internalDisabled = false;\n    this.internalChecked = true;\n    this.internalCollapsed = false;\n\n    if (isNil(item)) {\n      throw new Error('Item must be defined');\n    }\n\n    if (isString(item.text)) {\n      this.text = item.text;\n    } else {\n      throw new Error('A text of item must be string object');\n    }\n\n    this.value = item.value;\n\n    if (isBoolean(item.checked)) {\n      this.checked = item.checked;\n    }\n\n    if (isBoolean(item.collapsed)) {\n      this.collapsed = item.collapsed;\n    }\n\n    if (isBoolean(item.disabled)) {\n      this.disabled = item.disabled;\n    }\n\n    if (!isNil(item.children) && item.children.length > 0) {\n      this.children = item.children.map(function (child) {\n        if (_this.disabled === true) {\n          child.disabled = true;\n        }\n\n        return new TreeviewItem(child);\n      });\n    }\n\n    if (autoCorrectChecked) {\n      this.correctChecked();\n    }\n  }\n\n  _createClass(TreeviewItem, [{\n    key: \"setCheckedRecursive\",\n    value: function setCheckedRecursive(value) {\n      if (!this.internalDisabled) {\n        this.internalChecked = value;\n\n        if (!isNil(this.internalChildren)) {\n          this.internalChildren.forEach(function (child) {\n            return child.setCheckedRecursive(value);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setCollapsedRecursive\",\n    value: function setCollapsedRecursive(value) {\n      this.internalCollapsed = value;\n\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(function (child) {\n          return child.setCollapsedRecursive(value);\n        });\n      }\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      var checkedItems = [];\n      var uncheckedItems = [];\n\n      if (isNil(this.internalChildren)) {\n        if (this.internalChecked) {\n          checkedItems.push(this);\n        } else {\n          uncheckedItems.push(this);\n        }\n      } else {\n        var selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n        checkedItems = selection.checked;\n        uncheckedItems = selection.unchecked;\n      }\n\n      return {\n        checkedItems: checkedItems,\n        uncheckedItems: uncheckedItems\n      };\n    }\n  }, {\n    key: \"correctChecked\",\n    value: function correctChecked() {\n      this.internalChecked = this.getCorrectChecked();\n    }\n  }, {\n    key: \"getCorrectChecked\",\n    value: function getCorrectChecked() {\n      var checked = null;\n\n      if (!isNil(this.internalChildren)) {\n        var _iterator5 = _createForOfIteratorHelper(this.internalChildren),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var child = _step5.value;\n            child.internalChecked = child.getCorrectChecked();\n\n            if (checked === null) {\n              checked = child.internalChecked;\n            } else if (checked !== child.internalChecked) {\n              checked = undefined;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      } else {\n        checked = this.checked;\n      }\n\n      return checked;\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.internalChecked;\n    },\n    set: function set(value) {\n      if (!this.internalDisabled) {\n        if (this.internalChecked !== value) {\n          this.internalChecked = value;\n        }\n      }\n    }\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this.checked === undefined;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.internalDisabled;\n    },\n    set: function set(value) {\n      if (this.internalDisabled !== value) {\n        this.internalDisabled = value;\n\n        if (!isNil(this.internalChildren)) {\n          this.internalChildren.forEach(function (child) {\n            return child.disabled = value;\n          });\n        }\n      }\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.internalCollapsed;\n    },\n    set: function set(value) {\n      if (this.internalCollapsed !== value) {\n        this.internalCollapsed = value;\n      }\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this.internalChildren;\n    },\n    set: function set(value) {\n      if (this.internalChildren !== value) {\n        if (!isNil(value) && value.length === 0) {\n          throw new Error('Children must be not an empty array');\n        }\n\n        this.internalChildren = value;\n\n        if (!isNil(this.internalChildren)) {\n          var checked = null;\n          this.internalChildren.forEach(function (child) {\n            if (checked === null) {\n              checked = child.checked;\n            } else {\n              if (child.checked !== checked) {\n                checked = undefined;\n                return;\n              }\n            }\n          });\n          this.internalChecked = checked;\n        }\n      }\n    }\n  }]);\n\n  return TreeviewItem;\n}();\n\nvar TreeviewEventParser = function TreeviewEventParser() {\n  _classCallCheck(this, TreeviewEventParser);\n};\n\nTreeviewEventParser.ɵfac = function TreeviewEventParser_Factory(t) {\n  return new (t || TreeviewEventParser)();\n};\n\nTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeviewEventParser,\n  factory: TreeviewEventParser.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewEventParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar DefaultTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser) {\n  _inherits(DefaultTreeviewEventParser, _TreeviewEventParser);\n\n  var _super2 = _createSuper(DefaultTreeviewEventParser);\n\n  function DefaultTreeviewEventParser() {\n    _classCallCheck(this, DefaultTreeviewEventParser);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(DefaultTreeviewEventParser, [{\n    key: \"getSelectedChange\",\n    value: function getSelectedChange(component) {\n      var checkedItems = component.selection.checkedItems;\n\n      if (!isNil(checkedItems)) {\n        return checkedItems.map(function (item) {\n          return item.value;\n        });\n      }\n\n      return [];\n    }\n  }]);\n\n  return DefaultTreeviewEventParser;\n}(TreeviewEventParser);\n\nDefaultTreeviewEventParser.ɵfac = function DefaultTreeviewEventParser_Factory(t) {\n  return ɵDefaultTreeviewEventParser_BaseFactory(t || DefaultTreeviewEventParser);\n};\n\nDefaultTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DefaultTreeviewEventParser,\n  factory: DefaultTreeviewEventParser.ɵfac\n});\nvar ɵDefaultTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultTreeviewEventParser);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DefaultTreeviewEventParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar DownlineTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser2) {\n  _inherits(DownlineTreeviewEventParser, _TreeviewEventParser2);\n\n  var _super3 = _createSuper(DownlineTreeviewEventParser);\n\n  function DownlineTreeviewEventParser() {\n    _classCallCheck(this, DownlineTreeviewEventParser);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(DownlineTreeviewEventParser, [{\n    key: \"getSelectedChange\",\n    value: function getSelectedChange(component) {\n      var _this2 = this;\n\n      var items = component.items;\n\n      if (!isNil(items)) {\n        var result = [];\n        items.forEach(function (item) {\n          var links = _this2.getLinks(item, null);\n\n          if (!isNil(links)) {\n            result = result.concat(links);\n          }\n        });\n        return result;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getLinks\",\n    value: function getLinks(item, parent) {\n      var _this3 = this;\n\n      if (!isNil(item.children)) {\n        var link = {\n          item: item,\n          parent: parent\n        };\n        var result = [];\n        item.children.forEach(function (child) {\n          var links = _this3.getLinks(child, link);\n\n          if (!isNil(links)) {\n            result = result.concat(links);\n          }\n        });\n        return result;\n      }\n\n      if (item.checked) {\n        return [{\n          item: item,\n          parent: parent\n        }];\n      }\n\n      return null;\n    }\n  }]);\n\n  return DownlineTreeviewEventParser;\n}(TreeviewEventParser);\n\nDownlineTreeviewEventParser.ɵfac = function DownlineTreeviewEventParser_Factory(t) {\n  return ɵDownlineTreeviewEventParser_BaseFactory(t || DownlineTreeviewEventParser);\n};\n\nDownlineTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DownlineTreeviewEventParser,\n  factory: DownlineTreeviewEventParser.ɵfac\n});\nvar ɵDownlineTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DownlineTreeviewEventParser);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DownlineTreeviewEventParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar OrderDownlineTreeviewEventParser = /*#__PURE__*/function (_TreeviewEventParser3) {\n  _inherits(OrderDownlineTreeviewEventParser, _TreeviewEventParser3);\n\n  var _super4 = _createSuper(OrderDownlineTreeviewEventParser);\n\n  function OrderDownlineTreeviewEventParser() {\n    var _this4;\n\n    _classCallCheck(this, OrderDownlineTreeviewEventParser);\n\n    _this4 = _super4.apply(this, arguments);\n    _this4.currentDownlines = [];\n    _this4.parser = new DownlineTreeviewEventParser();\n    return _this4;\n  }\n\n  _createClass(OrderDownlineTreeviewEventParser, [{\n    key: \"getSelectedChange\",\n    value: function getSelectedChange(component) {\n      var newDownlines = this.parser.getSelectedChange(component);\n\n      if (this.currentDownlines.length === 0) {\n        this.currentDownlines = newDownlines;\n      } else {\n        var intersectDownlines = [];\n        this.currentDownlines.forEach(function (downline) {\n          var foundIndex = -1;\n          var length = newDownlines.length;\n\n          for (var i = 0; i < length; i++) {\n            if (downline.item.value === newDownlines[i].item.value) {\n              foundIndex = i;\n              break;\n            }\n          }\n\n          if (foundIndex !== -1) {\n            intersectDownlines.push(newDownlines[foundIndex]);\n            newDownlines.splice(foundIndex, 1);\n          }\n        });\n        this.currentDownlines = intersectDownlines.concat(newDownlines);\n      }\n\n      return this.currentDownlines;\n    }\n  }]);\n\n  return OrderDownlineTreeviewEventParser;\n}(TreeviewEventParser);\n\nOrderDownlineTreeviewEventParser.ɵfac = function OrderDownlineTreeviewEventParser_Factory(t) {\n  return ɵOrderDownlineTreeviewEventParser_BaseFactory(t || OrderDownlineTreeviewEventParser);\n};\n\nOrderDownlineTreeviewEventParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OrderDownlineTreeviewEventParser,\n  factory: OrderDownlineTreeviewEventParser.ɵfac\n});\nvar ɵOrderDownlineTreeviewEventParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(OrderDownlineTreeviewEventParser);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrderDownlineTreeviewEventParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar FilterTreeviewItem = /*#__PURE__*/function (_TreeviewItem) {\n  _inherits(FilterTreeviewItem, _TreeviewItem);\n\n  var _super5 = _createSuper(FilterTreeviewItem);\n\n  function FilterTreeviewItem(item) {\n    var _this5;\n\n    _classCallCheck(this, FilterTreeviewItem);\n\n    _this5 = _super5.call(this, {\n      text: item.text,\n      value: item.value,\n      disabled: item.disabled,\n      checked: item.checked,\n      collapsed: item.collapsed,\n      children: item.children\n    });\n    _this5.refItem = item;\n    return _this5;\n  }\n\n  _createClass(FilterTreeviewItem, [{\n    key: \"updateRefChecked\",\n    value: function updateRefChecked() {\n      this.children.forEach(function (child) {\n        if (child instanceof FilterTreeviewItem) {\n          child.updateRefChecked();\n        }\n      });\n      var refChecked = this.checked;\n\n      if (refChecked) {\n        var _iterator6 = _createForOfIteratorHelper(this.refItem.children),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var refChild = _step6.value;\n\n            if (!refChild.checked) {\n              refChecked = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      this.refItem.checked = refChecked;\n    }\n  }]);\n\n  return FilterTreeviewItem;\n}(TreeviewItem);\n\nvar TreeviewComponent = /*#__PURE__*/function () {\n  function TreeviewComponent(i18n, defaultConfig, eventParser) {\n    _classCallCheck(this, TreeviewComponent);\n\n    this.i18n = i18n;\n    this.defaultConfig = defaultConfig;\n    this.eventParser = eventParser;\n    this.selectedChange = new EventEmitter();\n    this.filterChange = new EventEmitter();\n    this.filterText = '';\n    this.config = this.defaultConfig;\n    this.allItem = new TreeviewItem({\n      text: 'All',\n      value: undefined\n    });\n  }\n\n  _createClass(TreeviewComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.createHeaderTemplateContext();\n      this.generateSelection();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var itemsSimpleChange = changes.items;\n\n      if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\n        this.updateFilterItems();\n        this.updateCollapsedOfAll();\n        this.raiseSelectedChange();\n      }\n    }\n  }, {\n    key: \"onAllCollapseExpand\",\n    value: function onAllCollapseExpand() {\n      var _this6 = this;\n\n      this.allItem.collapsed = !this.allItem.collapsed;\n      this.filterItems.forEach(function (item) {\n        return item.setCollapsedRecursive(_this6.allItem.collapsed);\n      });\n    }\n  }, {\n    key: \"onFilterTextChange\",\n    value: function onFilterTextChange(text) {\n      this.filterText = text;\n      this.filterChange.emit(text);\n      this.updateFilterItems();\n    }\n  }, {\n    key: \"onAllCheckedChange\",\n    value: function onAllCheckedChange() {\n      var checked = this.allItem.checked;\n      this.filterItems.forEach(function (item) {\n        item.setCheckedRecursive(checked);\n\n        if (item instanceof FilterTreeviewItem) {\n          item.updateRefChecked();\n        }\n      });\n      this.raiseSelectedChange();\n    }\n  }, {\n    key: \"onItemCheckedChange\",\n    value: function onItemCheckedChange(item, checked) {\n      if (item instanceof FilterTreeviewItem) {\n        item.updateRefChecked();\n      }\n\n      this.updateCheckedOfAll();\n      this.raiseSelectedChange();\n    }\n  }, {\n    key: \"raiseSelectedChange\",\n    value: function raiseSelectedChange() {\n      var _this7 = this;\n\n      this.generateSelection();\n      var values = this.eventParser.getSelectedChange(this);\n      setTimeout(function () {\n        _this7.selectedChange.emit(values);\n      });\n    }\n  }, {\n    key: \"createHeaderTemplateContext\",\n    value: function createHeaderTemplateContext() {\n      var _this8 = this;\n\n      this.headerTemplateContext = {\n        config: this.config,\n        item: this.allItem,\n        onCheckedChange: function onCheckedChange() {\n          return _this8.onAllCheckedChange();\n        },\n        onCollapseExpand: function onCollapseExpand() {\n          return _this8.onAllCollapseExpand();\n        },\n        onFilterTextChange: function onFilterTextChange(text) {\n          return _this8.onFilterTextChange(text);\n        }\n      };\n    }\n  }, {\n    key: \"generateSelection\",\n    value: function generateSelection() {\n      var checkedItems = [];\n      var uncheckedItems = [];\n\n      if (!isNil(this.items)) {\n        var selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n        checkedItems = selection.checked;\n        uncheckedItems = selection.unchecked;\n      }\n\n      this.selection = {\n        checkedItems: checkedItems,\n        uncheckedItems: uncheckedItems\n      };\n    }\n  }, {\n    key: \"updateFilterItems\",\n    value: function updateFilterItems() {\n      var _this9 = this;\n\n      if (this.filterText !== '') {\n        var filterItems = [];\n        var filterText = this.filterText.toLowerCase();\n        this.items.forEach(function (item) {\n          var newItem = _this9.filterItem(item, filterText);\n\n          if (!isNil(newItem)) {\n            filterItems.push(newItem);\n          }\n        });\n        this.filterItems = filterItems;\n      } else {\n        this.filterItems = this.items;\n      }\n\n      this.updateCheckedOfAll();\n    }\n  }, {\n    key: \"filterItem\",\n    value: function filterItem(item, filterText) {\n      var _this10 = this;\n\n      var isMatch = includes(item.text.toLowerCase(), filterText);\n\n      if (isMatch) {\n        return item;\n      } else {\n        if (!isNil(item.children)) {\n          var children = [];\n          item.children.forEach(function (child) {\n            var newChild = _this10.filterItem(child, filterText);\n\n            if (!isNil(newChild)) {\n              children.push(newChild);\n            }\n          });\n\n          if (children.length > 0) {\n            var newItem = new FilterTreeviewItem(item);\n            newItem.collapsed = false;\n            newItem.children = children;\n            return newItem;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"updateCheckedOfAll\",\n    value: function updateCheckedOfAll() {\n      var itemChecked = null;\n\n      var _iterator7 = _createForOfIteratorHelper(this.filterItems),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var filterItem = _step7.value;\n\n          if (itemChecked === null) {\n            itemChecked = filterItem.checked;\n          } else if (itemChecked !== filterItem.checked) {\n            itemChecked = undefined;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      if (itemChecked === null) {\n        itemChecked = false;\n      }\n\n      this.allItem.checked = itemChecked;\n    }\n  }, {\n    key: \"updateCollapsedOfAll\",\n    value: function updateCollapsedOfAll() {\n      var hasItemExpanded = false;\n\n      var _iterator8 = _createForOfIteratorHelper(this.filterItems),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var filterItem = _step8.value;\n\n          if (!filterItem.collapsed) {\n            hasItemExpanded = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      this.allItem.collapsed = !hasItemExpanded;\n    }\n  }, {\n    key: \"hasFilterItems\",\n    get: function get() {\n      return !isNil(this.filterItems) && this.filterItems.length > 0;\n    }\n  }, {\n    key: \"maxHeight\",\n    get: function get() {\n      return \"\".concat(this.config.maxHeight);\n    }\n  }]);\n\n  return TreeviewComponent;\n}();\n\nTreeviewComponent.ɵfac = function TreeviewComponent_Factory(t) {\n  return new (t || TreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig), ɵngcc0.ɵɵdirectiveInject(TreeviewEventParser));\n};\n\nTreeviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeviewComponent,\n  selectors: [[\"ngx-treeview\"]],\n  inputs: {\n    config: \"config\",\n    headerTemplate: \"headerTemplate\",\n    itemTemplate: \"itemTemplate\",\n    items: \"items\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    filterChange: \"filterChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 9,\n  vars: 5,\n  consts: [[\"defaultItemTemplate\", \"\"], [\"defaultHeaderTemplate\", \"\"], [1, \"treeview-header\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"class\", \"treeview-container\", 3, \"max-height\", 4, \"ngSwitchCase\"], [\"class\", \"treeview-text\", 4, \"ngSwitchCase\"], [1, \"form-inline\", \"row-item\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\", 4, \"ngIf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"disabled\", \"indeterminate\", \"ngModelChange\"], [1, \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"ngSwitch\", \"click\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-right-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-caret-down-fill\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-right-fill\"], [\"d\", \"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"], [\"width\", \"0.8rem\", \"height\", \"0.8rem\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-caret-down-fill\"], [\"d\", \"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"], [\"class\", \"row row-filter\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"row\", \"row-filter\"], [1, \"col-12\"], [\"type\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"class\", \"row row-all\", 4, \"ngIf\"], [\"class\", \"dropdown-divider\", 4, \"ngIf\"], [1, \"row\", \"row-all\"], [\"class\", \"form-check form-check-inline\", 4, \"ngIf\"], [\"class\", \"float-right form-check-label\", 3, \"click\", 4, \"ngIf\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngModel\", \"indeterminate\", \"ngModelChange\"], [1, \"float-right\", \"form-check-label\", 3, \"click\"], [\"aria-hidden\", \"true\", 3, \"title\", \"ngSwitch\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-expand\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"class\", \"bi bi-arrows-angle-contract\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 4, \"ngSwitchCase\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-expand\"], [\"fill-rule\", \"evenodd\", \"d\", \"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\"], [\"width\", \"1em\", \"height\", \"1em\", \"viewBox\", \"0 0 16 16\", \"fill\", \"currentColor\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"bi\", \"bi-arrows-angle-contract\"], [\"fill-rule\", \"evenodd\", \"d\", \"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\"], [\"fill-rule\", \"evenodd\", \"d\", \"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\"], [1, \"dropdown-divider\"], [1, \"treeview-container\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"], [1, \"treeview-text\"]],\n  template: function TreeviewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeviewComponent_ng_template_0_Template, 6, 5, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(2, TreeviewComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(5, TreeviewComponent_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 4);\n      ɵngcc0.ɵɵtemplate(7, TreeviewComponent_div_7_Template, 2, 3, \"div\", 5);\n      ɵngcc0.ɵɵtemplate(8, TreeviewComponent_div_8_Template, 2, 1, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r2 = ɵngcc0.ɵɵreference(3);\n\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate || _r2)(\"ngTemplateOutletContext\", ctx.headerTemplateContext);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.hasFilterItems);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgIf, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc2.DefaultValueAccessor, ɵngcc1.NgForOf, TreeviewItemComponent];\n  },\n  styles: [\"[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-filter[_ngcontent-%COMP%]{margin-bottom:.5rem}[_nghost-%COMP%]   .treeview-header[_ngcontent-%COMP%]   .row-all[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]{flex-wrap:nowrap;margin-bottom:.3rem}[_nghost-%COMP%]   .treeview-container[_ngcontent-%COMP%]   .row-item[_ngcontent-%COMP%]   .bi[_ngcontent-%COMP%]{cursor:pointer;margin-right:.3rem}.treeview-container[_ngcontent-%COMP%]{overflow-y:auto;padding-right:.3rem}.treeview-text[_ngcontent-%COMP%]{padding:.3rem 0;white-space:nowrap}\"]\n});\n\nTreeviewComponent.ctorParameters = function () {\n  return [{\n    type: TreeviewI18n\n  }, {\n    type: TreeviewConfig\n  }, {\n    type: TreeviewEventParser\n  }];\n};\n\nTreeviewComponent.propDecorators = {\n  headerTemplate: [{\n    type: Input\n  }],\n  itemTemplate: [{\n    type: Input\n  }],\n  items: [{\n    type: Input\n  }],\n  config: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  filterChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-treeview',\n      template: \"<ng-template #defaultItemTemplate let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\r\\n  let-onCheckedChange=\\\"onCheckedChange\\\">\\r\\n  <div class=\\\"form-inline row-item\\\">\\r\\n    <i *ngIf=\\\"item.children\\\" (click)=\\\"onCollapseExpand()\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\r\\n      <svg *ngSwitchCase=\\\"true\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-right-fill\\\"\\r\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n        <path\\r\\n          d=\\\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\\\" />\\r\\n      </svg>\\r\\n      <svg *ngSwitchCase=\\\"false\\\" width=\\\"0.8rem\\\" height=\\\"0.8rem\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-caret-down-fill\\\"\\r\\n        fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n        <path\\r\\n          d=\\\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\\\" />\\r\\n      </svg>\\r\\n    </i>\\r\\n    <div class=\\\"form-check\\\">\\r\\n      <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\r\\n        [disabled]=\\\"item.disabled\\\" [indeterminate]=\\\"item.indeterminate\\\" />\\r\\n      <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\r\\n        {{item.text}}\\r\\n      </label>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n<ng-template #defaultHeaderTemplate let-config=\\\"config\\\" let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\r\\n  let-onCheckedChange=\\\"onCheckedChange\\\" let-onFilterTextChange=\\\"onFilterTextChange\\\">\\r\\n  <div *ngIf=\\\"config.hasFilter\\\" class=\\\"row row-filter\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n      <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"i18n.getFilterPlaceholder()\\\" [(ngModel)]=\\\"filterText\\\"\\r\\n        (ngModelChange)=\\\"onFilterTextChange($event)\\\" />\\r\\n    </div>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"hasFilterItems\\\">\\r\\n    <div *ngIf=\\\"config.hasAllCheckBox || config.hasCollapseExpand\\\" class=\\\"row row-all\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"form-check form-check-inline\\\" *ngIf=\\\"config.hasAllCheckBox\\\">\\r\\n          <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\r\\n            [indeterminate]=\\\"item.indeterminate\\\" />\\r\\n          <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\r\\n            {{i18n.getAllCheckboxText()}}\\r\\n          </label>\\r\\n        </div>\\r\\n        <label *ngIf=\\\"config.hasCollapseExpand\\\" class=\\\"float-right form-check-label\\\" (click)=\\\"onCollapseExpand()\\\">\\r\\n          <i [title]=\\\"i18n.getTooltipCollapseExpandText(item.collapsed)\\\" aria-hidden=\\\"true\\\" [ngSwitch]=\\\"item.collapsed\\\">\\r\\n            <svg *ngSwitchCase=\\\"true\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-expand\\\"\\r\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\r\\n            </svg>\\r\\n            <svg *ngSwitchCase=\\\"false\\\" width=\\\"1em\\\" height=\\\"1em\\\" viewBox=\\\"0 0 16 16\\\" class=\\\"bi bi-arrows-angle-contract\\\"\\r\\n              fill=\\\"currentColor\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\\\" />\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\\\" />\\r\\n              <path fill-rule=\\\"evenodd\\\"\\r\\n                d=\\\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\\\" />\\r\\n            </svg>\\r\\n          </i>\\r\\n        </label>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"config.hasDivider\\\" class=\\\"dropdown-divider\\\"></div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n<div class=\\\"treeview-header\\\">\\r\\n  <ng-template [ngTemplateOutlet]=\\\"headerTemplate || defaultHeaderTemplate\\\"\\r\\n    [ngTemplateOutletContext]=\\\"headerTemplateContext\\\">\\r\\n  </ng-template>\\r\\n</div>\\r\\n<div [ngSwitch]=\\\"hasFilterItems\\\">\\r\\n  <div *ngSwitchCase=\\\"true\\\" class=\\\"treeview-container\\\" [style.max-height.px]=\\\"maxHeight\\\">\\r\\n    <ngx-treeview-item *ngFor=\\\"let item of filterItems\\\" [config]=\\\"config\\\" [item]=\\\"item\\\"\\r\\n      [template]=\\\"itemTemplate || defaultItemTemplate\\\" (checkedChange)=\\\"onItemCheckedChange(item, $event)\\\">\\r\\n    </ngx-treeview-item>\\r\\n  </div>\\r\\n  <div *ngSwitchCase=\\\"false\\\" class=\\\"treeview-text\\\">\\r\\n    {{i18n.getFilterNoItemsFoundText()}}\\r\\n  </div>\\r\\n</div>\\r\\n\",\n      styles: [\":host .treeview-header .row-filter{margin-bottom:.5rem}:host .treeview-header .row-all .bi{cursor:pointer}:host .treeview-container .row-item{flex-wrap:nowrap;margin-bottom:.3rem}:host .treeview-container .row-item .bi{cursor:pointer;margin-right:.3rem}.treeview-container{overflow-y:auto;padding-right:.3rem}.treeview-text{padding:.3rem 0;white-space:nowrap}\"]\n    }]\n  }], function () {\n    return [{\n      type: TreeviewI18n\n    }, {\n      type: TreeviewConfig\n    }, {\n      type: TreeviewEventParser\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    filterChange: [{\n      type: Output\n    }],\n    config: [{\n      type: Input\n    }],\n    headerTemplate: [{\n      type: Input\n    }],\n    itemTemplate: [{\n      type: Input\n    }],\n    items: [{\n      type: Input\n    }]\n  });\n})();\n\nvar DropdownTreeviewComponent = /*#__PURE__*/function () {\n  function DropdownTreeviewComponent(i18n, defaultConfig) {\n    _classCallCheck(this, DropdownTreeviewComponent);\n\n    this.i18n = i18n;\n    this.defaultConfig = defaultConfig;\n    this.buttonClass = 'btn-outline-secondary';\n    this.selectedChange = new EventEmitter(true);\n    this.filterChange = new EventEmitter();\n    this.config = this.defaultConfig;\n  }\n\n  _createClass(DropdownTreeviewComponent, [{\n    key: \"onSelectedChange\",\n    value: function onSelectedChange(values) {\n      this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\n      this.selectedChange.emit(values);\n    }\n  }, {\n    key: \"onFilterChange\",\n    value: function onFilterChange(text) {\n      this.filterChange.emit(text);\n    }\n  }]);\n\n  return DropdownTreeviewComponent;\n}();\n\nDropdownTreeviewComponent.ɵfac = function DropdownTreeviewComponent_Factory(t) {\n  return new (t || DropdownTreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n};\n\nDropdownTreeviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: DropdownTreeviewComponent,\n  selectors: [[\"ngx-dropdown-treeview\"]],\n  viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TreeviewComponent, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);\n    }\n  },\n  inputs: {\n    buttonClass: \"buttonClass\",\n    config: \"config\",\n    headerTemplate: \"headerTemplate\",\n    itemTemplate: \"itemTemplate\",\n    items: \"items\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    filterChange: \"filterChange\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[\"ngxDropdown\", \"\", 1, \"dropdown\"], [\"type\", \"button\", \"role\", \"button\", \"ngxDropdownToggle\", \"\", 1, \"btn\", 3, \"ngClass\"], [\"ngxDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenu\", 3, \"click\"], [1, \"dropdown-container\"], [3, \"config\", \"headerTemplate\", \"items\", \"itemTemplate\", \"selectedChange\", \"filterChange\"]],\n  template: function DropdownTreeviewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function DropdownTreeviewComponent_Template_div_click_3_listener($event) {\n        return $event.stopPropagation();\n      });\n      ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n      ɵngcc0.ɵɵelementStart(5, \"ngx-treeview\", 4);\n      ɵngcc0.ɵɵlistener(\"selectedChange\", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) {\n        return ctx.onSelectedChange($event);\n      })(\"filterChange\", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) {\n        return ctx.onFilterChange($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.buttonClass);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.buttonLabel, \" \");\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"config\", ctx.config)(\"headerTemplate\", ctx.headerTemplate)(\"items\", ctx.items)(\"itemTemplate\", ctx.itemTemplate);\n    }\n  },\n  directives: [DropdownDirective, DropdownToggleDirective, ɵngcc1.NgClass, DropdownMenuDirective, TreeviewComponent],\n  styles: [\".dropdown[_ngcontent-%COMP%]{display:inline-block;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:.9rem;overflow:hidden;padding-right:30px;text-align:left;text-overflow:ellipsis;width:100%}.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:after{margin-top:.6rem;position:absolute;right:.6rem}.dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]{padding:0 .6rem}\"]\n});\n\nDropdownTreeviewComponent.ctorParameters = function () {\n  return [{\n    type: TreeviewI18n\n  }, {\n    type: TreeviewConfig\n  }];\n};\n\nDropdownTreeviewComponent.propDecorators = {\n  buttonClass: [{\n    type: Input\n  }],\n  headerTemplate: [{\n    type: Input\n  }],\n  itemTemplate: [{\n    type: Input\n  }],\n  items: [{\n    type: Input\n  }],\n  config: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  filterChange: [{\n    type: Output\n  }],\n  treeviewComponent: [{\n    type: ViewChild,\n    args: [TreeviewComponent, {\n      static: false\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DropdownTreeviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-dropdown-treeview',\n      template: \"<div class=\\\"dropdown\\\" ngxDropdown>\\r\\n  <button class=\\\"btn\\\" [ngClass]=\\\"buttonClass\\\" type=\\\"button\\\" role=\\\"button\\\" ngxDropdownToggle>\\r\\n    {{buttonLabel}}\\r\\n  </button>\\r\\n  <div ngxDropdownMenu aria-labelledby=\\\"dropdownMenu\\\" (click)=\\\"$event.stopPropagation()\\\">\\r\\n    <div class=\\\"dropdown-container\\\">\\r\\n      <ngx-treeview [config]=\\\"config\\\" [headerTemplate]=\\\"headerTemplate\\\" [items]=\\\"items\\\" [itemTemplate]=\\\"itemTemplate\\\"\\r\\n        (selectedChange)=\\\"onSelectedChange($event)\\\" (filterChange)=\\\"onFilterChange($event)\\\">\\r\\n      </ngx-treeview>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n      styles: [\".dropdown{display:inline-block;width:100%}.dropdown button{margin-right:.9rem;overflow:hidden;padding-right:30px;text-align:left;text-overflow:ellipsis;width:100%}.dropdown button:after{margin-top:.6rem;position:absolute;right:.6rem}.dropdown .dropdown-menu .dropdown-container{padding:0 .6rem}\"]\n    }]\n  }], function () {\n    return [{\n      type: TreeviewI18n\n    }, {\n      type: TreeviewConfig\n    }];\n  }, {\n    buttonClass: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    filterChange: [{\n      type: Output\n    }],\n    config: [{\n      type: Input\n    }],\n    headerTemplate: [{\n      type: Input\n    }],\n    itemTemplate: [{\n      type: Input\n    }],\n    items: [{\n      type: Input\n    }],\n    treeviewComponent: [{\n      type: ViewChild,\n      args: [TreeviewComponent, {\n        static: false\n      }]\n    }]\n  });\n})();\n\nvar TreeviewItemComponent = /*#__PURE__*/function () {\n  function TreeviewItemComponent(defaultConfig) {\n    var _this11 = this;\n\n    _classCallCheck(this, TreeviewItemComponent);\n\n    this.defaultConfig = defaultConfig;\n    this.checkedChange = new EventEmitter();\n\n    this.onCollapseExpand = function () {\n      _this11.item.collapsed = !_this11.item.collapsed;\n    };\n\n    this.onCheckedChange = function () {\n      var checked = _this11.item.checked;\n\n      if (!isNil(_this11.item.children) && !_this11.config.decoupleChildFromParent) {\n        _this11.item.children.forEach(function (child) {\n          return child.setCheckedRecursive(checked);\n        });\n      }\n\n      _this11.checkedChange.emit(checked);\n    };\n\n    this.config = this.defaultConfig;\n  }\n\n  _createClass(TreeviewItemComponent, [{\n    key: \"onChildCheckedChange\",\n    value: function onChildCheckedChange(child, checked) {\n      if (!this.config.decoupleChildFromParent) {\n        var itemChecked = null;\n\n        var _iterator9 = _createForOfIteratorHelper(this.item.children),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var childItem = _step9.value;\n\n            if (itemChecked === null) {\n              itemChecked = childItem.checked;\n            } else if (itemChecked !== childItem.checked) {\n              itemChecked = undefined;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        if (itemChecked === null) {\n          itemChecked = false;\n        }\n\n        if (this.item.checked !== itemChecked) {\n          this.item.checked = itemChecked;\n        }\n      }\n\n      this.checkedChange.emit(checked);\n    }\n  }]);\n\n  return TreeviewItemComponent;\n}();\n\nTreeviewItemComponent.ɵfac = function TreeviewItemComponent_Factory(t) {\n  return new (t || TreeviewItemComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewConfig));\n};\n\nTreeviewItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeviewItemComponent,\n  selectors: [[\"ngx-treeview-item\"]],\n  inputs: {\n    config: \"config\",\n    template: \"template\",\n    item: \"item\"\n  },\n  outputs: {\n    checkedChange: \"checkedChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"treeview-item\", 4, \"ngIf\"], [1, \"treeview-item\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"config\", \"item\", \"template\", \"checkedChange\"]],\n  template: function TreeviewItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.item);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, TreeviewItemComponent],\n  styles: [\"[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]{white-space:nowrap}[_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%]{margin-left:2rem}\"]\n});\n\nTreeviewItemComponent.ctorParameters = function () {\n  return [{\n    type: TreeviewConfig\n  }];\n};\n\nTreeviewItemComponent.propDecorators = {\n  config: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }],\n  item: [{\n    type: Input\n  }],\n  checkedChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-treeview-item',\n      template: \"<div *ngIf=\\\"item\\\" class=\\\"treeview-item\\\">\\r\\n  <ng-template [ngTemplateOutlet]=\\\"template\\\"\\r\\n    [ngTemplateOutletContext]=\\\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\\\">\\r\\n  </ng-template>\\r\\n  <div *ngIf=\\\"!item.collapsed\\\">\\r\\n    <ngx-treeview-item [config]=\\\"config\\\" *ngFor=\\\"let child of item.children\\\" [item]=\\\"child\\\" [template]=\\\"template\\\"\\r\\n      (checkedChange)=\\\"onChildCheckedChange(child, $event)\\\">\\r\\n    </ngx-treeview-item>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n      styles: [\":host{display:block}:host .treeview-item{white-space:nowrap}:host .treeview-item .treeview-item{margin-left:2rem}\"]\n    }]\n  }], function () {\n    return [{\n      type: TreeviewConfig\n    }];\n  }, {\n    checkedChange: [{\n      type: Output\n    }],\n    config: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    item: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeviewPipe = /*#__PURE__*/function () {\n  function TreeviewPipe() {\n    _classCallCheck(this, TreeviewPipe);\n  }\n\n  _createClass(TreeviewPipe, [{\n    key: \"transform\",\n    value: function transform(objects, textField) {\n      if (isNil(objects)) {\n        return undefined;\n      }\n\n      return objects.map(function (object) {\n        return new TreeviewItem({\n          text: object[textField],\n          value: object\n        });\n      });\n    }\n  }]);\n\n  return TreeviewPipe;\n}();\n\nTreeviewPipe.ɵfac = function TreeviewPipe_Factory(t) {\n  return new (t || TreeviewPipe)();\n};\n\nTreeviewPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"ngxTreeview\",\n  type: TreeviewPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'ngxTreeview'\n    }]\n  }], null, null);\n})();\n\nvar TreeviewModule = /*#__PURE__*/function () {\n  function TreeviewModule() {\n    _classCallCheck(this, TreeviewModule);\n  }\n\n  _createClass(TreeviewModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      return {\n        ngModule: TreeviewModule,\n        providers: [TreeviewConfig, {\n          provide: TreeviewI18n,\n          useClass: DefaultTreeviewI18n\n        }, {\n          provide: TreeviewEventParser,\n          useClass: DefaultTreeviewEventParser\n        }]\n      };\n    }\n  }]);\n\n  return TreeviewModule;\n}();\n\nTreeviewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TreeviewModule\n});\nTreeviewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TreeviewModule_Factory(t) {\n    return new (t || TreeviewModule)();\n  },\n  imports: [[FormsModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeviewModule, {\n    declarations: function declarations() {\n      return [TreeviewComponent, TreeviewItemComponent, TreeviewPipe, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective, DropdownTreeviewComponent];\n    },\n    imports: function imports() {\n      return [FormsModule, CommonModule];\n    },\n    exports: function exports() {\n      return [TreeviewComponent, TreeviewPipe, DropdownTreeviewComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeviewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FormsModule, CommonModule],\n      declarations: [TreeviewComponent, TreeviewItemComponent, TreeviewPipe, DropdownDirective, DropdownMenuDirective, DropdownToggleDirective, DropdownTreeviewComponent],\n      exports: [TreeviewComponent, TreeviewPipe, DropdownTreeviewComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-treeview\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DefaultTreeviewEventParser, DefaultTreeviewI18n, DownlineTreeviewEventParser, DropdownDirective, DropdownToggleDirective, DropdownTreeviewComponent, OrderDownlineTreeviewEventParser, TreeviewComponent, TreeviewConfig, TreeviewEventParser, TreeviewHelper, TreeviewI18n, TreeviewItem, TreeviewModule, TreeviewPipe, TreeviewItemComponent as ɵa, DropdownMenuDirective as ɵb };","map":{"version":3,"sources":["../../../projects/ngx-treeview/src/lib/directives/dropdown.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-menu.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-toggle.directive.ts","../../../projects/ngx-treeview/src/lib/models/treeview-i18n.ts","../../../projects/ngx-treeview/src/lib/models/treeview-config.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-helper.ts","../../../projects/ngx-treeview/src/lib/models/treeview-item.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-event-parser.ts","../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.ts","../../../projects/ngx-treeview/src/lib/pipes/treeview.pipe.ts","../../../projects/ngx-treeview/src/lib/treeview.module.ts","../../../projects/ngx-treeview/src/public-api.ts","../../../projects/ngx-treeview/src/ngx-treeview.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdown]',\r\n  exportAs: 'ngxDropdown'\r\n})\r\nexport class DropdownDirective {\r\n  toggleElement: any;\r\n  @Input('open') internalOpen = false;\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.show') get isOpen(): boolean {\r\n    return this.internalOpen;\r\n  }\r\n\r\n  @HostListener('keyup.esc')\r\n  onKeyupEsc(): void {\r\n    this.close();\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: MouseEvent): void {\r\n    if (event.button !== 2 && !this.isEventFromToggle(event)) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  open(): void {\r\n    if (!this.internalOpen) {\r\n      this.internalOpen = true;\r\n      this.openChange.emit(true);\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    if (this.internalOpen) {\r\n      this.internalOpen = false;\r\n      this.openChange.emit(false);\r\n    }\r\n  }\r\n\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  private isEventFromToggle(event: MouseEvent): boolean {\r\n    return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\r\n  }\r\n}\r\n","import { Directive, HostBinding } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownMenu]',\r\n  host: {\r\n    '[class.dropdown-menu]': 'true',\r\n    '[class.show]': 'dropdown.isOpen'\r\n  }\r\n})\r\nexport class DropdownMenuDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective\r\n  ) { }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownToggle]',\r\n  host: {\r\n    class: 'dropdown-toggle',\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'dropdown.isOpen',\r\n    '(click)': 'dropdown.toggle()'\r\n  }\r\n})\r\nexport class DropdownToggleDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective,\r\n    elementRef: ElementRef\r\n  ) {\r\n    dropdown.toggleElement = elementRef.nativeElement;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TreeviewSelection } from './treeview-item';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewI18n {\r\n  abstract getText(selection: TreeviewSelection): string;\r\n  abstract getAllCheckboxText(): string;\r\n  abstract getFilterPlaceholder(): string;\r\n  abstract getFilterNoItemsFoundText(): string;\r\n  abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewI18n extends TreeviewI18n {\r\n  getText(selection: TreeviewSelection): string {\r\n    if (selection.uncheckedItems.length === 0) {\r\n      if (selection.checkedItems.length > 0) {\r\n        return this.getAllCheckboxText();\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    switch (selection.checkedItems.length) {\r\n      case 0:\r\n        return 'Select options';\r\n      case 1:\r\n        return selection.checkedItems[0].text;\r\n      default:\r\n        return `${selection.checkedItems.length} options selected`;\r\n    }\r\n  }\r\n\r\n  getAllCheckboxText(): string {\r\n    return 'All';\r\n  }\r\n\r\n  getFilterPlaceholder(): string {\r\n    return 'Filter';\r\n  }\r\n\r\n  getFilterNoItemsFoundText(): string {\r\n    return 'No items found';\r\n  }\r\n\r\n  getTooltipCollapseExpandText(isCollapse: boolean): string {\r\n    return isCollapse ? 'Expand' : 'Collapse';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TreeviewConfig {\r\n  hasAllCheckBox = true;\r\n  hasFilter = false;\r\n  hasCollapseExpand = false;\r\n  decoupleChildFromParent = false;\r\n  maxHeight = 500;\r\n\r\n  get hasDivider(): boolean {\r\n    return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\r\n  }\r\n\r\n  public static create(fields?: {\r\n    hasAllCheckBox?: boolean,\r\n    hasFilter?: boolean,\r\n    hasCollapseExpand?: boolean,\r\n    decoupleChildFromParent?: boolean\r\n    maxHeight?: number,\r\n  }): TreeviewConfig {\r\n    const config = new TreeviewConfig();\r\n    Object.assign(config, fields);\r\n    return config;\r\n  }\r\n}\r\n","import { concat, isNil, pull } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\nexport const TreeviewHelper = {\r\n  findItem,\r\n  findItemInList,\r\n  findParent,\r\n  removeItem,\r\n  concatSelection\r\n};\r\n\r\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\r\n  if (isNil(root)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (root.value === value) {\r\n    return root;\r\n  }\r\n\r\n  if (root.children) {\r\n    for (const child of root.children) {\r\n      const foundItem = findItem(child, value);\r\n      if (foundItem) {\r\n        return foundItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\r\n  if (isNil(list)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const item of list) {\r\n    const foundItem = findItem(item, value);\r\n    if (foundItem) {\r\n      return foundItem;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\r\n  if (isNil(root) || isNil(root.children)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const child of root.children) {\r\n    if (child === item) {\r\n      return root;\r\n    } else {\r\n      const parent = findParent(child, item);\r\n      if (parent) {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\r\n  const parent = findParent(root, item);\r\n  if (parent) {\r\n    pull(parent.children, item);\r\n    if (parent.children.length === 0) {\r\n      parent.children = undefined;\r\n    } else {\r\n      parent.correctChecked();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\r\n  let checkedItems = [...checked];\r\n  let uncheckedItems = [...unchecked];\r\n  for (const item of items) {\r\n    const selection = item.getSelection();\r\n    checkedItems = concat(checkedItems, selection.checkedItems);\r\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\r\n  }\r\n  return {\r\n    checked: checkedItems,\r\n    unchecked: uncheckedItems\r\n  };\r\n}\r\n","import { isBoolean, isNil, isString } from 'lodash';\r\nimport { TreeviewHelper } from '../helpers/treeview-helper';\r\n\r\nexport interface TreeviewSelection {\r\n  checkedItems: TreeviewItem[];\r\n  uncheckedItems: TreeviewItem[];\r\n}\r\n\r\nexport interface TreeItem {\r\n  text: string;\r\n  value: any;\r\n  disabled?: boolean;\r\n  checked?: boolean;\r\n  collapsed?: boolean;\r\n  children?: TreeItem[];\r\n}\r\n\r\nexport class TreeviewItem {\r\n  private internalDisabled = false;\r\n  private internalChecked = true;\r\n  private internalCollapsed = false;\r\n  private internalChildren: TreeviewItem[];\r\n  text: string;\r\n  value: any;\r\n\r\n  constructor(item: TreeItem, autoCorrectChecked = false) {\r\n    if (isNil(item)) {\r\n      throw new Error('Item must be defined');\r\n    }\r\n    if (isString(item.text)) {\r\n      this.text = item.text;\r\n    } else {\r\n      throw new Error('A text of item must be string object');\r\n    }\r\n    this.value = item.value;\r\n    if (isBoolean(item.checked)) {\r\n      this.checked = item.checked;\r\n    }\r\n    if (isBoolean(item.collapsed)) {\r\n      this.collapsed = item.collapsed;\r\n    }\r\n    if (isBoolean(item.disabled)) {\r\n      this.disabled = item.disabled;\r\n    }\r\n    if (!isNil(item.children) && item.children.length > 0) {\r\n      this.children = item.children.map(child => {\r\n        if (this.disabled === true) {\r\n          child.disabled = true;\r\n        }\r\n\r\n        return new TreeviewItem(child);\r\n      });\r\n    }\r\n\r\n    if (autoCorrectChecked) {\r\n      this.correctChecked();\r\n    }\r\n  }\r\n\r\n  get checked(): boolean {\r\n    return this.internalChecked;\r\n  }\r\n\r\n  set checked(value: boolean) {\r\n    if (!this.internalDisabled) {\r\n      if (this.internalChecked !== value) {\r\n        this.internalChecked = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  get indeterminate(): boolean {\r\n    return this.checked === undefined;\r\n  }\r\n\r\n  setCheckedRecursive(value: boolean): void {\r\n    if (!this.internalDisabled) {\r\n      this.internalChecked = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\r\n      }\r\n    }\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this.internalDisabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    if (this.internalDisabled !== value) {\r\n      this.internalDisabled = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.disabled = value);\r\n      }\r\n    }\r\n  }\r\n\r\n  get collapsed(): boolean {\r\n    return this.internalCollapsed;\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (this.internalCollapsed !== value) {\r\n      this.internalCollapsed = value;\r\n    }\r\n  }\r\n\r\n  setCollapsedRecursive(value: boolean): void {\r\n    this.internalCollapsed = value;\r\n    if (!isNil(this.internalChildren)) {\r\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\r\n    }\r\n  }\r\n\r\n  get children(): TreeviewItem[] {\r\n    return this.internalChildren;\r\n  }\r\n\r\n  set children(value: TreeviewItem[]) {\r\n    if (this.internalChildren !== value) {\r\n      if (!isNil(value) && value.length === 0) {\r\n        throw new Error('Children must be not an empty array');\r\n      }\r\n      this.internalChildren = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        let checked = null;\r\n        this.internalChildren.forEach(child => {\r\n          if (checked === null) {\r\n            checked = child.checked;\r\n          } else {\r\n            if (child.checked !== checked) {\r\n              checked = undefined;\r\n              return;\r\n            }\r\n          }\r\n        });\r\n        this.internalChecked = checked;\r\n      }\r\n    }\r\n  }\r\n\r\n  getSelection(): TreeviewSelection {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (isNil(this.internalChildren)) {\r\n      if (this.internalChecked) {\r\n        checkedItems.push(this);\r\n      } else {\r\n        uncheckedItems.push(this);\r\n      }\r\n    } else {\r\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    return {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  correctChecked(): void {\r\n    this.internalChecked = this.getCorrectChecked();\r\n  }\r\n\r\n  private getCorrectChecked(): boolean {\r\n    let checked: boolean = null;\r\n    if (!isNil(this.internalChildren)) {\r\n      for (const child of this.internalChildren) {\r\n        child.internalChecked = child.getCorrectChecked();\r\n        if (checked === null) {\r\n          checked = child.internalChecked;\r\n        } else if (checked !== child.internalChecked) {\r\n          checked = undefined;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      checked = this.checked;\r\n    }\r\n\r\n    return checked;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\nimport { TreeviewComponent } from '../components/treeview/treeview.component';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewEventParser {\r\n  abstract getSelectedChange(component: TreeviewComponent): any[];\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const checkedItems = component.selection.checkedItems;\r\n    if (!isNil(checkedItems)) {\r\n      return checkedItems.map(item => item.value);\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n\r\nexport interface DownlineTreeviewItem {\r\n  item: TreeviewItem;\r\n  parent: DownlineTreeviewItem;\r\n}\r\n\r\n@Injectable()\r\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const items = component.items;\r\n    if (!isNil(items)) {\r\n      let result: DownlineTreeviewItem[] = [];\r\n      items.forEach(item => {\r\n        const links = this.getLinks(item, null);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\r\n    if (!isNil(item.children)) {\r\n      const link = {\r\n        item,\r\n        parent\r\n      };\r\n      let result: DownlineTreeviewItem[] = [];\r\n      item.children.forEach(child => {\r\n        const links = this.getLinks(child, link);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    if (item.checked) {\r\n      return [{\r\n        item,\r\n        parent\r\n      }];\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\r\n  private currentDownlines: DownlineTreeviewItem[] = [];\r\n  private parser = new DownlineTreeviewEventParser();\r\n\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\r\n    if (this.currentDownlines.length === 0) {\r\n      this.currentDownlines = newDownlines;\r\n    } else {\r\n      const intersectDownlines: DownlineTreeviewItem[] = [];\r\n      this.currentDownlines.forEach(downline => {\r\n        let foundIndex = -1;\r\n        const length = newDownlines.length;\r\n        for (let i = 0; i < length; i++) {\r\n          if (downline.item.value === newDownlines[i].item.value) {\r\n            foundIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (foundIndex !== -1) {\r\n          intersectDownlines.push(newDownlines[foundIndex]);\r\n          newDownlines.splice(foundIndex, 1);\r\n        }\r\n      });\r\n\r\n      this.currentDownlines = intersectDownlines.concat(newDownlines);\r\n    }\r\n\r\n    return this.currentDownlines;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef, OnInit } from '@angular/core';\r\nimport { isNil, includes } from 'lodash';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem, TreeviewSelection } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\nimport { TreeviewHelper } from '../../helpers/treeview-helper';\r\nimport { TreeviewEventParser } from '../../helpers/treeview-event-parser';\r\n\r\nclass FilterTreeviewItem extends TreeviewItem {\r\n  private readonly refItem: TreeviewItem;\r\n  constructor(item: TreeviewItem) {\r\n    super({\r\n      text: item.text,\r\n      value: item.value,\r\n      disabled: item.disabled,\r\n      checked: item.checked,\r\n      collapsed: item.collapsed,\r\n      children: item.children\r\n    });\r\n    this.refItem = item;\r\n  }\r\n\r\n  updateRefChecked(): void {\r\n    this.children.forEach(child => {\r\n      if (child instanceof FilterTreeviewItem) {\r\n        child.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    let refChecked = this.checked;\r\n    if (refChecked) {\r\n      for (const refChild of this.refItem.children) {\r\n        if (!refChild.checked) {\r\n          refChecked = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.refItem.checked = refChecked;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-treeview',\r\n  templateUrl: './treeview.component.html',\r\n  styleUrls: ['./treeview.component.scss']\r\n})\r\nexport class TreeviewComponent implements OnChanges, OnInit {\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>();\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  headerTemplateContext: TreeviewHeaderTemplateContext;\r\n  allItem: TreeviewItem;\r\n  filterText = '';\r\n  filterItems: TreeviewItem[];\r\n  selection: TreeviewSelection;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig,\r\n    private eventParser: TreeviewEventParser\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n    this.allItem = new TreeviewItem({ text: 'All', value: undefined });\r\n  }\r\n\r\n  get hasFilterItems(): boolean {\r\n    return !isNil(this.filterItems) && this.filterItems.length > 0;\r\n  }\r\n\r\n  get maxHeight(): string {\r\n    return `${this.config.maxHeight}`;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createHeaderTemplateContext();\r\n    this.generateSelection();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const itemsSimpleChange = changes.items;\r\n    if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\r\n      this.updateFilterItems();\r\n      this.updateCollapsedOfAll();\r\n      this.raiseSelectedChange();\r\n    }\r\n  }\r\n\r\n  onAllCollapseExpand(): void {\r\n    this.allItem.collapsed = !this.allItem.collapsed;\r\n    this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\r\n  }\r\n\r\n  onFilterTextChange(text: string): void {\r\n    this.filterText = text;\r\n    this.filterChange.emit(text);\r\n    this.updateFilterItems();\r\n  }\r\n\r\n  onAllCheckedChange(): void {\r\n    const checked = this.allItem.checked;\r\n    this.filterItems.forEach(item => {\r\n      item.setCheckedRecursive(checked);\r\n      if (item instanceof FilterTreeviewItem) {\r\n        item.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  onItemCheckedChange(item: TreeviewItem, checked: boolean): void {\r\n    if (item instanceof FilterTreeviewItem) {\r\n      item.updateRefChecked();\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  raiseSelectedChange(): void {\r\n    this.generateSelection();\r\n    const values = this.eventParser.getSelectedChange(this);\r\n    setTimeout(() => {\r\n      this.selectedChange.emit(values);\r\n    });\r\n  }\r\n\r\n  private createHeaderTemplateContext(): void {\r\n    this.headerTemplateContext = {\r\n      config: this.config,\r\n      item: this.allItem,\r\n      onCheckedChange: () => this.onAllCheckedChange(),\r\n      onCollapseExpand: () => this.onAllCollapseExpand(),\r\n      onFilterTextChange: (text) => this.onFilterTextChange(text)\r\n    };\r\n  }\r\n\r\n  private generateSelection(): void {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (!isNil(this.items)) {\r\n      const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    this.selection = {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  private updateFilterItems(): void {\r\n    if (this.filterText !== '') {\r\n      const filterItems: TreeviewItem[] = [];\r\n      const filterText = this.filterText.toLowerCase();\r\n      this.items.forEach(item => {\r\n        const newItem = this.filterItem(item, filterText);\r\n        if (!isNil(newItem)) {\r\n          filterItems.push(newItem);\r\n        }\r\n      });\r\n      this.filterItems = filterItems;\r\n    } else {\r\n      this.filterItems = this.items;\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n  }\r\n\r\n  private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\r\n    const isMatch = includes(item.text.toLowerCase(), filterText);\r\n    if (isMatch) {\r\n      return item;\r\n    } else {\r\n      if (!isNil(item.children)) {\r\n        const children: TreeviewItem[] = [];\r\n        item.children.forEach(child => {\r\n          const newChild = this.filterItem(child, filterText);\r\n          if (!isNil(newChild)) {\r\n            children.push(newChild);\r\n          }\r\n        });\r\n        if (children.length > 0) {\r\n          const newItem = new FilterTreeviewItem(item);\r\n          newItem.collapsed = false;\r\n          newItem.children = children;\r\n          return newItem;\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private updateCheckedOfAll(): void {\r\n    let itemChecked: boolean = null;\r\n    for (const filterItem of this.filterItems) {\r\n      if (itemChecked === null) {\r\n        itemChecked = filterItem.checked;\r\n      } else if (itemChecked !== filterItem.checked) {\r\n        itemChecked = undefined;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (itemChecked === null) {\r\n      itemChecked = false;\r\n    }\r\n\r\n    this.allItem.checked = itemChecked;\r\n  }\r\n\r\n  private updateCollapsedOfAll(): void {\r\n    let hasItemExpanded = false;\r\n    for (const filterItem of this.filterItems) {\r\n      if (!filterItem.collapsed) {\r\n        hasItemExpanded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.allItem.collapsed = !hasItemExpanded;\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewComponent } from '../treeview/treeview.component';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-dropdown-treeview',\r\n  templateUrl: './dropdown-treeview.component.html',\r\n  styleUrls: ['./dropdown-treeview.component.scss']\r\n})\r\nexport class DropdownTreeviewComponent {\r\n  @Input() buttonClass = 'btn-outline-secondary';\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>(true);\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  @ViewChild(TreeviewComponent, { static: false }) treeviewComponent: TreeviewComponent;\r\n  buttonLabel: string;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onSelectedChange(values: any[]): void {\r\n    this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\r\n    this.selectedChange.emit(values);\r\n  }\r\n\r\n  onFilterChange(text: string): void {\r\n    this.filterChange.emit(text);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-treeview-item',\r\n  templateUrl: './treeview-item.component.html',\r\n  styleUrls: ['./treeview-item.component.scss']\r\n})\r\nexport class TreeviewItemComponent {\r\n  @Input() config: TreeviewConfig;\r\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() item: TreeviewItem;\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onCollapseExpand = () => {\r\n    this.item.collapsed = !this.item.collapsed;\r\n  }\r\n\r\n  onCheckedChange = () => {\r\n    const checked = this.item.checked;\r\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\r\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\r\n    }\r\n    this.checkedChange.emit(checked);\r\n  }\r\n\r\n  onChildCheckedChange(child: TreeviewItem, checked: boolean): void {\r\n    if (!this.config.decoupleChildFromParent) {\r\n      let itemChecked: boolean = null;\r\n      for (const childItem of this.item.children) {\r\n        if (itemChecked === null) {\r\n          itemChecked = childItem.checked;\r\n        } else if (itemChecked !== childItem.checked) {\r\n          itemChecked = undefined;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (itemChecked === null) {\r\n        itemChecked = false;\r\n      }\r\n\r\n      if (this.item.checked !== itemChecked) {\r\n        this.item.checked = itemChecked;\r\n      }\r\n\r\n    }\r\n\r\n    this.checkedChange.emit(checked);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\n@Pipe({\r\n  name: 'ngxTreeview'\r\n})\r\nexport class TreeviewPipe implements PipeTransform {\r\n  transform(objects: any[], textField: string): TreeviewItem[] {\r\n    if (isNil(objects)) {\r\n      return undefined;\r\n    }\r\n\r\n    return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DropdownDirective } from './directives/dropdown.directive';\r\nimport { DropdownMenuDirective } from './directives/dropdown-menu.directive';\r\nimport { DropdownToggleDirective } from './directives/dropdown-toggle.directive';\r\nimport { DropdownTreeviewComponent } from './components/dropdown-treeview/dropdown-treeview.component';\r\nimport { TreeviewComponent } from './components/treeview/treeview.component';\r\nimport { TreeviewItemComponent } from './components/treeview-item/treeview-item.component';\r\nimport { TreeviewPipe } from './pipes/treeview.pipe';\r\nimport { TreeviewI18n, DefaultTreeviewI18n } from './models/treeview-i18n';\r\nimport { TreeviewConfig } from './models/treeview-config';\r\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './helpers/treeview-event-parser';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    TreeviewComponent,\r\n    TreeviewItemComponent,\r\n    TreeviewPipe,\r\n    DropdownDirective,\r\n    DropdownMenuDirective,\r\n    DropdownToggleDirective,\r\n    DropdownTreeviewComponent\r\n  ], exports: [\r\n    TreeviewComponent,\r\n    TreeviewPipe,\r\n    DropdownTreeviewComponent\r\n  ]\r\n})\r\nexport class TreeviewModule {\r\n  static forRoot(): ModuleWithProviders<TreeviewModule> {\r\n    return {\r\n      ngModule: TreeviewModule,\r\n      providers: [\r\n        TreeviewConfig,\r\n        { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\r\n        { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/*\n * Public API Surface of ngx-treeview\n */\n\nexport * from './lib/treeview.module';\nexport * from './lib/components/treeview/treeview.component';\nexport * from './lib/components/dropdown-treeview/dropdown-treeview.component';\nexport * from './lib/pipes/treeview.pipe';\nexport * from './lib/directives/dropdown-toggle.directive';\nexport * from './lib/directives/dropdown.directive';\nexport * from './lib/models/treeview-item';\nexport * from './lib/models/treeview-config';\nexport * from './lib/models/treeview-i18n';\nexport * from './lib/models/treeview-item-template-context';\nexport * from './lib/helpers/treeview-event-parser';\nexport * from './lib/helpers/treeview-helper';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {TreeviewItemComponent as ɵa} from './lib/components/treeview-item/treeview-item.component';\nexport {DropdownMenuDirective as ɵb} from './lib/directives/dropdown-menu.directive';"]},"metadata":{},"sourceType":"module"}