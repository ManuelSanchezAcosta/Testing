{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as Chartist from 'chartist';\nimport { Component, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {\\@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {\\@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n * ```html\n * <x-chartist\n * [type]=\"type\"\n * [data]=\"data\"\n * [options]=\"options\"\n * [responsiveOptions]=\"responsiveOptions\"\n * [events]=\"events\"\n * ></x-chartist>\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ChartistComponent = /*@__PURE__*/function () {\n  var ChartistComponent = /*#__PURE__*/function () {\n    /**\n     * @ignore\n     * @param {?} elementRef\n     */\n    function ChartistComponent(elementRef) {\n      _classCallCheck(this, ChartistComponent);\n\n      this.elementRef = elementRef;\n      /**\n       * Event emitted after Chartist chart has been initialized.\n       *\n       * Event handler function will receive chart instance argument.\n       */\n\n      this.initialized = new EventEmitter();\n    }\n    /**\n     * @ignore\n     * @return {?}\n     */\n\n\n    _createClass(ChartistComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.type && this.data) {\n          this.renderChart();\n        }\n      }\n      /**\n       * @ignore\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this.update(changes);\n      }\n      /**\n       * @ignore\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.chart) {\n          this.chart.detach();\n          this.chart = null;\n        }\n      }\n      /**\n       * @ignore\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"renderChart\",\n      value: function renderChart() {\n        /** @type {?} */\n        var nativeElement = this.elementRef.nativeElement;\n\n        if (!(this.type in Chartist)) {\n          throw new Error(\"\".concat(this.type, \" is not a valid chart type\"));\n        }\n\n        this.chart =\n        /** @type {?} */\n        Chartist[this.type](nativeElement, this.data, this.options, this.responsiveOptions);\n\n        if (this.events) {\n          this.bindEvents();\n        }\n\n        this.initialized.emit(this.chart);\n      }\n      /**\n       * @ignore\n       * @private\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"update\",\n      value: function update(changes) {\n        if (!this.type || !this.data) {\n          return;\n        }\n\n        if (!this.chart || 'type' in changes) {\n          this.renderChart();\n        } else if (changes.data || changes.options) {\n          /** @type {?} */\n          this.chart.update(this.data, this.options);\n        }\n      }\n      /**\n       * @ignore\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"bindEvents\",\n      value: function bindEvents() {\n        for (var _i = 0, _Object$keys = Object.keys(this.events); _i < _Object$keys.length; _i++) {\n          var event = _Object$keys[_i];\n          this.chart.on(event, this.events[event]);\n        }\n      }\n    }]);\n\n    return ChartistComponent;\n  }();\n\n  ChartistComponent.ɵfac = function ChartistComponent_Factory(t) {\n    return new (t || ChartistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ChartistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: ChartistComponent,\n    selectors: [[\"x-chartist\"]],\n    inputs: {\n      data: \"data\",\n      type: \"type\",\n      options: \"options\",\n      responsiveOptions: \"responsiveOptions\",\n      events: \"events\"\n    },\n    outputs: {\n      initialized: \"initialized\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function ChartistComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {\\n        display: block;\\n      }\"]\n  });\n  return ChartistComponent;\n}();\n\nvar ChartistModule = /*@__PURE__*/function () {\n  var ChartistModule = function ChartistModule() {\n    _classCallCheck(this, ChartistModule);\n  };\n\n  ChartistModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: ChartistModule\n  });\n  ChartistModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function ChartistModule_Factory(t) {\n      return new (t || ChartistModule)();\n    },\n    imports: [[]]\n  });\n  return ChartistModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartistModule, {\n    declarations: [ChartistComponent],\n    exports: [ChartistComponent]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ChartistComponent, ChartistModule };","map":null,"metadata":{},"sourceType":"module"}