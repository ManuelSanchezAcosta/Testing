{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { PhoneMatch } from \"../match/phone-match\";\nimport { nonDigitRe } from '../regex-lib'; // RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar phoneMatcherRegex = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/g;\n/**\r\n * @class Autolinker.matcher.Phone\r\n * @extends Autolinker.matcher.Matcher\r\n *\r\n * Matcher to find Phone number matches in an input string.\r\n *\r\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\r\n * details.\r\n */\n\nvar PhoneMatcher =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(PhoneMatcher, _super);\n\n  function PhoneMatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * The regular expression to match Phone numbers. Example matches:\r\n     *\r\n     *     (123) 456-7890\r\n     *     123 456 7890\r\n     *     123-456-7890\r\n     *     +18004441234,,;,10226420346#\r\n     *     +1 (800) 444 1234\r\n     *     10226420346#\r\n     *     1-800-444-1234,1022,64,20346#\r\n     *\r\n     * This regular expression has the following capturing groups:\r\n     *\r\n     * 1 or 2. The prefixed '+' sign, if there is one.\r\n     *\r\n     * @protected\r\n     * @property {RegExp} matcherRegex\r\n     */\n\n\n    _this.matcherRegex = phoneMatcherRegex;\n    return _this;\n  }\n  /**\r\n   * @inheritdoc\r\n   */\n\n\n  PhoneMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      // Remove non-numeric values from phone number string\n      var matchedText = match[0],\n          cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n          // strip out non-digit characters exclude comma semicolon and #\n      plusSign = !!(match[1] || match[2]),\n          // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n      before = match.index == 0 ? '' : text.substr(match.index - 1, 1),\n          after = text.substr(match.index + matchedText.length, 1),\n          contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n\n      if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n        matches.push(new PhoneMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: match.index,\n          number: cleanNumber,\n          plusSign: plusSign\n        }));\n      }\n    }\n\n    return matches;\n  };\n\n  PhoneMatcher.prototype.testMatch = function (text) {\n    return nonDigitRe.test(text);\n  };\n\n  return PhoneMatcher;\n}(Matcher);\n\nexport { PhoneMatcher };","map":null,"metadata":{},"sourceType":"module"}