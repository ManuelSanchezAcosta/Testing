{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CountdownComponent_div_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.divider, \" \");\n  }\n}\n\nfunction CountdownComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"p\", 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, CountdownComponent_div_1_span_3_Template, 2, 1, \"span\", 3);\n    ɵngcc0.ɵɵelementStart(4, \"p\", 4);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var time_r1 = ctx.$implicit;\n    var i_r2 = ctx.index;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"measurements \", time_r1, \"\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.showZero && ctx_r0.displayNumbers[i_r2] < 10 ? \"0\" + ctx_r0.displayNumbers[i_r2].trim() : ctx_r0.displayNumbers[i_r2], \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.display[i_r2 + 1]);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", time_r1, \" \");\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar CountdownComponent = /*@__PURE__*/function () {\n  var CountdownComponent = /*#__PURE__*/function () {\n    function CountdownComponent() {\n      var _this = this;\n\n      _classCallCheck(this, CountdownComponent);\n\n      this.displayString = '';\n      this.showZero = false;\n      this.reached = new EventEmitter();\n      this.display = [];\n      this.displayNumbers = [];\n      this.wasReached = false;\n      setInterval(function () {\n        return _this._displayString();\n      }, 100);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CountdownComponent, [{\n      key: \"_displayString\",\n      value: function _displayString() {\n        if (this.wasReached) return;\n\n        if (typeof this.units === 'string') {\n          this.units = this.units.split('|');\n        }\n        /** @type {?} */\n\n\n        var givenDate = new Date(this.end);\n        /** @type {?} */\n\n        var now = new Date();\n        /** @type {?} */\n\n        var dateDifference = givenDate - now;\n\n        if (dateDifference < 100 && dateDifference > 0 || dateDifference < 0 && !this.wasReached) {\n          this.wasReached = true;\n          this.reached.next(now);\n        }\n        /** @type {?} */\n\n\n        var lastUnit = this.units[this.units.length - 1];\n        /** @type {?} */\n\n        var unitConstantForMillisecs = {\n          year: 1000 * 60 * 60 * 24 * 7 * 4 * 12,\n          month: 1000 * 60 * 60 * 24 * 7 * 4,\n          weeks: 1000 * 60 * 60 * 24 * 7,\n          days: 1000 * 60 * 60 * 24,\n          hours: 1000 * 60 * 60,\n          minutes: 1000 * 60,\n          seconds: 1000\n        };\n        /** @type {?} */\n\n        var unitsLeft = {};\n        /** @type {?} */\n\n        var returnText = '';\n        /** @type {?} */\n\n        var returnNumbers = '';\n        /** @type {?} */\n\n        var totalMillisecsLeft = dateDifference;\n        /** @type {?} */\n\n        var i;\n        /** @type {?} */\n\n        var unit;\n\n        for (i in this.units) {\n          if (this.units.hasOwnProperty(i)) {\n            unit = this.units[i].trim();\n\n            if (unitConstantForMillisecs[unit.toLowerCase()] === false) {\n              //$interval.cancel(countDownInterval);\n              throw new Error('Cannot repeat unit: ' + unit);\n            }\n\n            if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {\n              throw new Error('Unit: ' + unit + ' is not supported. Please use following units: year, month, weeks, days, hours, minutes, seconds, milliseconds');\n            } // If it was reached, everything is zero\n\n\n            unitsLeft[unit] = this.wasReached ? 0 : totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];\n\n            if (lastUnit === unit) {\n              unitsLeft[unit] = Math.ceil(unitsLeft[unit]);\n            } else {\n              unitsLeft[unit] = Math.floor(unitsLeft[unit]);\n            }\n\n            totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];\n            unitConstantForMillisecs[unit.toLowerCase()] = false; // If it's less than 0, round to 0\n\n            unitsLeft[unit] = unitsLeft[unit] > 0 ? unitsLeft[unit] : 0;\n            returnNumbers += ' ' + unitsLeft[unit] + ' | ';\n            returnText += ' ' + unit;\n          }\n        }\n\n        if (this.text === null || !this.text) {\n          this.text = {\n            Year: 'Year',\n            Month: 'Month',\n            Weeks: 'Weeks',\n            Days: 'Days',\n            Hours: 'Hours',\n            Minutes: 'Minutes',\n            Seconds: 'Seconds',\n            MilliSeconds: 'Milliseconds'\n          };\n        }\n\n        this.displayString = returnText.replace('Year', this.text.Year + ' | ').replace('Month', this.text.Month + ' | ').replace('Weeks', this.text.Weeks + ' | ').replace('Days', this.text.Days + ' | ').replace('Hours', this.text.Hours + ' | ').replace('Minutes', this.text.Minutes + ' | ').replace('Seconds', this.text.Seconds);\n        this.displayNumbers = returnNumbers.split('|');\n        this.display = this.displayString.split('|');\n      }\n    }]);\n\n    return CountdownComponent;\n  }();\n\n  CountdownComponent.ɵfac = function CountdownComponent_Factory(t) {\n    return new (t || CountdownComponent)();\n  };\n\n  CountdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: CountdownComponent,\n    selectors: [[\"countdown\"]],\n    inputs: {\n      displayString: \"displayString\",\n      showZero: \"showZero\",\n      units: \"units\",\n      text: \"text\",\n      end: \"end\",\n      divider: \"divider\"\n    },\n    outputs: {\n      reached: \"reached\"\n    },\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"countdown\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"measurements-number\"], [\"class\", \"divider\", 4, \"ngIf\"], [1, \"measurements-text\"], [1, \"divider\"]],\n    template: function CountdownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, CountdownComponent_div_1_Template, 6, 6, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.display);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n    styles: [\".countdown[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]{flex:.1}.countdown[_ngcontent-%COMP%]   .measurements[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{float:right}\"]\n  });\n  return CountdownComponent;\n}();\n\nvar CountdownModule = /*@__PURE__*/function () {\n  var CountdownModule = function CountdownModule() {\n    _classCallCheck(this, CountdownModule);\n  };\n\n  CountdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: CountdownModule\n  });\n  CountdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function CountdownModule_Factory(t) {\n      return new (t || CountdownModule)();\n    },\n    imports: [[CommonModule]]\n  });\n  return CountdownModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountdownModule, {\n    declarations: function declarations() {\n      return [CountdownComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CountdownComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { CountdownComponent, CountdownModule };","map":null,"metadata":{},"sourceType":"module"}