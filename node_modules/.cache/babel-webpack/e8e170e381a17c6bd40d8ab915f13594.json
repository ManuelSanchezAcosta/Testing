{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { HashtagMatch } from \"../match/hashtag-match\"; // RegExp objects which are shared by all instances of HashtagMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating HashtagMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar matcherRegex = new RegExp(\"#[_\" + alphaNumericAndMarksCharsStr + \"]{1,139}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 139 characters\n\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\r\n * @class Autolinker.matcher.Hashtag\r\n * @extends Autolinker.matcher.Matcher\r\n *\r\n * Matcher to find HashtagMatch matches in an input string.\r\n */\n\nvar HashtagMatcher =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(HashtagMatcher, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match instance,\r\n   *   specified in an Object (map).\r\n   */\n\n\n  function HashtagMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {String} serviceName\r\n     *\r\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\r\n     * for available values.\r\n     */\n\n\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * The regular expression to match Hashtags. Example match:\r\n     *\r\n     *     #asdf\r\n     *\r\n     * @protected\r\n     * @property {RegExp} matcherRegex\r\n     */\n\n    _this.matcherRegex = matcherRegex;\n    /**\r\n     * The regular expression to use to check the character before a username match to\r\n     * make sure we didn't accidentally match an email address.\r\n     *\r\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\r\n     *\r\n     * @protected\r\n     * @property {RegExp} nonWordCharRegex\r\n     */\n\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\r\n   * @inheritdoc\r\n   */\n\n\n  HashtagMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        nonWordCharRegex = this.nonWordCharRegex,\n        serviceName = this.serviceName,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n          prevChar = text.charAt(offset - 1); // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not a '#' char\n      // in the middle of a word), then it is a hashtag match.\n\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0],\n            hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n\n        matches.push(new HashtagMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          hashtag: hashtag\n        }));\n      }\n    }\n\n    return matches;\n  };\n\n  return HashtagMatcher;\n}(Matcher);\n\nexport { HashtagMatcher };","map":null,"metadata":{},"sourceType":"module"}