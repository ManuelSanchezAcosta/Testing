{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Match } from \"./match\";\n/**\r\n * @class Autolinker.match.Hashtag\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Hashtag match found in an input string which should be\r\n * Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more\r\n * details.\r\n */\n\nvar HashtagMatch =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(HashtagMatch, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n\n\n  function HashtagMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {String} serviceName\r\n     *\r\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\r\n     * for available values.\r\n     */\n\n\n    _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {String} hashtag (required)\r\n     *\r\n     * The HashtagMatch that was matched, without the '#'.\r\n     */\n\n    _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.serviceName = cfg.serviceName;\n    _this.hashtag = cfg.hashtag;\n    return _this;\n  }\n  /**\r\n   * Returns a string name for the type of match that this class represents.\r\n   * For the case of HashtagMatch, returns 'hashtag'.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HashtagMatch.prototype.getType = function () {\n    return 'hashtag';\n  };\n  /**\r\n   * Returns the configured {@link #serviceName} to point the HashtagMatch to.\r\n   * Ex: 'facebook', 'twitter'.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HashtagMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\r\n   * Returns the matched hashtag, without the '#' character.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HashtagMatch.prototype.getHashtag = function () {\n    return this.hashtag;\n  };\n  /**\r\n   * Returns the anchor href that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HashtagMatch.prototype.getAnchorHref = function () {\n    var serviceName = this.serviceName,\n        hashtag = this.hashtag;\n\n    switch (serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/hashtag/' + hashtag;\n\n      case 'facebook':\n        return 'https://www.facebook.com/hashtag/' + hashtag;\n\n      case 'instagram':\n        return 'https://instagram.com/explore/tags/' + hashtag;\n\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n    }\n  };\n  /**\r\n   * Returns the anchor text that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  HashtagMatch.prototype.getAnchorText = function () {\n    return '#' + this.hashtag;\n  };\n\n  return HashtagMatch;\n}(Match);\n\nexport { HashtagMatch };","map":null,"metadata":{},"sourceType":"module"}