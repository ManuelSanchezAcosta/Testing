{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar arrayFrom = _interopDefault(require('array-from'));\n\nvar isArray = _interopDefault(require('is-array'));\n\nvar isElement = _interopDefault(require('iselement'));\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n/**\n * Returns `true` if provided input is Element.\n * @name isElement\n * @param {*} [input]\n * @returns {boolean}\n */\n\n\nvar isElement$1 = function isElement$1(input) {\n  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.nodeType === 1 && _typeof(input.style) === 'object' && _typeof(input.ownerDocument) === 'object';\n};\n\nfunction select(selector) {\n  if (typeof selector === 'string') {\n    try {\n      return document.querySelector(selector);\n    } catch (e) {\n      throw e;\n    }\n  } else if (isElement(selector)) {\n    return selector;\n  }\n}\n\nfunction selectAll(selector) {\n  if (typeof selector === 'string') {\n    return Array.prototype.slice.apply(document.querySelectorAll(selector));\n  } else if (isArray(selector)) {\n    return selector.map(select);\n  } else if ('length' in selector) {\n    return arrayFrom(selector).map(select);\n  }\n}\n\nfunction indexOfElement(elements, element) {\n  element = resolveElement(element, true);\n\n  if (!isElement$1(element)) {\n    return -1;\n  }\n\n  for (var i = 0; i < elements.length; i++) {\n    if (elements[i] === element) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction hasElement(elements, element) {\n  return -1 !== indexOfElement(elements, element);\n}\n\nfunction domListOf(arr) {\n  if (!arr) {\n    return [];\n  }\n\n  try {\n    if (typeof arr === 'string') {\n      return arrayFrom(document.querySelectorAll(arr));\n    } else if (isArray(arr)) {\n      return arr.map(resolveElement);\n    } else {\n      if (typeof arr.length === 'undefined') {\n        return [resolveElement(arr)];\n      }\n\n      return arrayFrom(arr, resolveElement);\n    }\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction concatElementLists() {\n  var lists = [],\n      len = arguments.length;\n\n  while (len--) {\n    lists[len] = arguments[len];\n  }\n\n  return lists.reduce(function (last, list) {\n    return list.length ? last : last.concat(domListOf(list));\n  }, []);\n}\n\nfunction pushElements(elements, toAdd) {\n  for (var i = 0; i < toAdd.length; i++) {\n    if (!hasElement(elements, toAdd[i])) {\n      elements.push(toAdd[i]);\n    }\n  }\n\n  return toAdd;\n}\n\nfunction addElements(elements) {\n  var toAdd = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) {\n    toAdd[len] = arguments[len + 1];\n  }\n\n  toAdd = toAdd.map(resolveElement);\n  return pushElements(elements, toAdd);\n}\n\nfunction removeElements(elements) {\n  var toRemove = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) {\n    toRemove[len] = arguments[len + 1];\n  }\n\n  return toRemove.map(resolveElement).reduce(function (last, e) {\n    var index = indexOfElement(elements, e);\n\n    if (index !== -1) {\n      return last.concat(elements.splice(index, 1));\n    }\n\n    return last;\n  }, []);\n}\n\nfunction resolveElement(element, noThrow) {\n  if (typeof element === 'string') {\n    try {\n      return document.querySelector(element);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  if (!isElement$1(element) && !noThrow) {\n    throw new TypeError(element + \" is not a DOM element.\");\n  }\n\n  return element;\n}\n\nexports.indexOfElement = indexOfElement;\nexports.hasElement = hasElement;\nexports.domListOf = domListOf;\nexports.concatElementLists = concatElementLists;\nexports.addElements = addElements;\nexports.removeElements = removeElements;\nexports.resolveElement = resolveElement;\nexports.select = select;\nexports.selectAll = selectAll;","map":null,"metadata":{},"sourceType":"script"}