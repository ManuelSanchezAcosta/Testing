{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Match } from \"./match\";\n/**\r\n * @class Autolinker.match.Mention\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Mention match found in an input string which should be Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\r\n */\n\nvar MentionMatch =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(MentionMatch, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n\n\n  function MentionMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {String} serviceName\r\n     *\r\n     * The service to point mention matches to. See {@link Autolinker#mention}\r\n     * for available values.\r\n     */\n\n\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {String} mention (required)\r\n     *\r\n     * The Mention that was matched, without the '@' character.\r\n     */\n\n    _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.mention = cfg.mention;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\r\n   * Returns a string name for the type of match that this class represents.\r\n   * For the case of MentionMatch, returns 'mention'.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  MentionMatch.prototype.getType = function () {\n    return 'mention';\n  };\n  /**\r\n   * Returns the mention, without the '@' character.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  MentionMatch.prototype.getMention = function () {\n    return this.mention;\n  };\n  /**\r\n   * Returns the configured {@link #serviceName} to point the mention to.\r\n   * Ex: 'instagram', 'twitter', 'soundcloud'.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  MentionMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\r\n   * Returns the anchor href that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  MentionMatch.prototype.getAnchorHref = function () {\n    switch (this.serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/' + this.mention;\n\n      case 'instagram':\n        return 'https://instagram.com/' + this.mention;\n\n      case 'soundcloud':\n        return 'https://soundcloud.com/' + this.mention;\n\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n    }\n  };\n  /**\r\n   * Returns the anchor text that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n\n\n  MentionMatch.prototype.getAnchorText = function () {\n    return '@' + this.mention;\n  };\n  /**\r\n   * Returns the CSS class suffixes that should be used on a tag built with\r\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\r\n   * details.\r\n   *\r\n   * @return {String[]}\r\n   */\n\n\n  MentionMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n        serviceName = this.getServiceName();\n\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n\n    return cssClassSuffixes;\n  };\n\n  return MentionMatch;\n}(Match);\n\nexport { MentionMatch };","map":null,"metadata":{},"sourceType":"module"}