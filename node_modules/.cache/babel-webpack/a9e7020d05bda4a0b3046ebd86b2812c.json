{"ast":null,"code":"import { HtmlTag } from \"./html-tag\";\nimport { truncateSmart } from \"./truncate/truncate-smart\";\nimport { truncateMiddle } from \"./truncate/truncate-middle\";\nimport { truncateEnd } from \"./truncate/truncate-end\";\n/**\r\n * @protected\r\n * @class Autolinker.AnchorTagBuilder\r\n * @extends Object\r\n *\r\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\r\n * found.\r\n *\r\n * Normally this class is instantiated, configured, and used internally by an\r\n * {@link Autolinker} instance, but may actually be used indirectly in a\r\n * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\r\n * instances which may be modified before returning from the\r\n * {@link Autolinker#replaceFn replaceFn}. For example:\r\n *\r\n *     var html = Autolinker.link( \"Test google.com\", {\r\n *         replaceFn : function( match ) {\r\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\r\n *             tag.setAttr( 'rel', 'nofollow' );\r\n *\r\n *             return tag;\r\n *         }\r\n *     } );\r\n *\r\n *     // generated html:\r\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n */\n\nvar AnchorTagBuilder =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  /**\r\n   * @method constructor\r\n   * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\r\n   */\n  function AnchorTagBuilder(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\r\n     * @cfg {Boolean} newWindow\r\n     * @inheritdoc Autolinker#newWindow\r\n     */\n\n\n    this.newWindow = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {Object} truncate\r\n     * @inheritdoc Autolinker#truncate\r\n     */\n\n    this.truncate = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\r\n     * @cfg {String} className\r\n     * @inheritdoc Autolinker#className\r\n     */\n\n    this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    this.newWindow = cfg.newWindow || false;\n    this.truncate = cfg.truncate || {};\n    this.className = cfg.className || '';\n  }\n  /**\r\n   * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\r\n   * matched text, via its `match` object.\r\n   *\r\n   * @param {Autolinker.match.Match} match The Match instance to generate an\r\n   *   anchor tag from.\r\n   * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\r\n   */\n\n\n  AnchorTagBuilder.prototype.build = function (match) {\n    return new HtmlTag({\n      tagName: 'a',\n      attrs: this.createAttrs(match),\n      innerHtml: this.processAnchorText(match.getAnchorText())\n    });\n  };\n  /**\r\n   * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\r\n   *   tag being generated.\r\n   *\r\n   * @protected\r\n   * @param {Autolinker.match.Match} match The Match instance to generate an\r\n   *   anchor tag from.\r\n   * @return {Object} A key/value Object (map) of the anchor tag's attributes.\r\n   */\n\n\n  AnchorTagBuilder.prototype.createAttrs = function (match) {\n    var attrs = {\n      'href': match.getAnchorHref() // we'll always have the `href` attribute\n\n    };\n    var cssClass = this.createCssClass(match);\n\n    if (cssClass) {\n      attrs['class'] = cssClass;\n    }\n\n    if (this.newWindow) {\n      attrs['target'] = \"_blank\";\n      attrs['rel'] = \"noopener noreferrer\"; // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n    }\n\n    if (this.truncate) {\n      if (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n        attrs['title'] = match.getAnchorHref();\n      }\n    }\n\n    return attrs;\n  };\n  /**\r\n   * Creates the CSS class that will be used for a given anchor tag, based on\r\n   * the `matchType` and the {@link #className} config.\r\n   *\r\n   * Example returns:\r\n   *\r\n   * - \"\"                                      // no {@link #className}\r\n   * - \"myLink myLink-url\"                     // url match\r\n   * - \"myLink myLink-email\"                   // email match\r\n   * - \"myLink myLink-phone\"                   // phone match\r\n   * - \"myLink myLink-hashtag\"                 // hashtag match\r\n   * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\r\n   *\r\n   * @protected\r\n   * @param {Autolinker.match.Match} match The Match instance to generate an\r\n   *   anchor tag from.\r\n   * @return {String} The CSS class string for the link. Example return:\r\n   *   \"myLink myLink-url\". If no {@link #className} was configured, returns\r\n   *   an empty string.\r\n   */\n\n\n  AnchorTagBuilder.prototype.createCssClass = function (match) {\n    var className = this.className;\n\n    if (!className) {\n      return \"\";\n    } else {\n      var returnClasses = [className],\n          cssClassSuffixes = match.getCssClassSuffixes();\n\n      for (var i = 0, len = cssClassSuffixes.length; i < len; i++) {\n        returnClasses.push(className + '-' + cssClassSuffixes[i]);\n      }\n\n      return returnClasses.join(' ');\n    }\n  };\n  /**\r\n   * Processes the `anchorText` by truncating the text according to the\r\n   * {@link #truncate} config.\r\n   *\r\n   * @private\r\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\r\n   *   displayed).\r\n   * @return {String} The processed `anchorText`.\r\n   */\n\n\n  AnchorTagBuilder.prototype.processAnchorText = function (anchorText) {\n    anchorText = this.doTruncate(anchorText);\n    return anchorText;\n  };\n  /**\r\n   * Performs the truncation of the `anchorText` based on the {@link #truncate}\r\n   * option. If the `anchorText` is longer than the length specified by the\r\n   * {@link #truncate} option, the truncation is performed based on the\r\n   * `location` property. See {@link #truncate} for details.\r\n   *\r\n   * @private\r\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\r\n   *   displayed).\r\n   * @return {String} The truncated anchor text.\r\n   */\n\n\n  AnchorTagBuilder.prototype.doTruncate = function (anchorText) {\n    var truncate = this.truncate;\n    if (!truncate || !truncate.length) return anchorText;\n    var truncateLength = truncate.length,\n        truncateLocation = truncate.location;\n\n    if (truncateLocation === 'smart') {\n      return truncateSmart(anchorText, truncateLength);\n    } else if (truncateLocation === 'middle') {\n      return truncateMiddle(anchorText, truncateLength);\n    } else {\n      return truncateEnd(anchorText, truncateLength);\n    }\n  };\n\n  return AnchorTagBuilder;\n}();\n\nexport { AnchorTagBuilder };","map":null,"metadata":{},"sourceType":"module"}