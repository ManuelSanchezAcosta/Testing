{"ast":null,"code":"import Quill from 'quill';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nvar Keys = {\n  TAB: 9,\n  ENTER: 13,\n  ESCAPE: 27,\n  UP: 38,\n  DOWN: 40\n};\n\nfunction attachDataValues(element, data, dataAttributes) {\n  var mention = element;\n  Object.keys(data).forEach(function (key) {\n    if (dataAttributes.indexOf(key) > -1) {\n      mention.dataset[key] = data[key];\n    } else {\n      delete mention.dataset[key];\n    }\n  });\n  return mention;\n}\n\nfunction getMentionCharIndex(text, mentionDenotationChars) {\n  return mentionDenotationChars.reduce(function (prev, mentionChar) {\n    var mentionCharIndex = text.lastIndexOf(mentionChar);\n\n    if (mentionCharIndex > prev.mentionCharIndex) {\n      return {\n        mentionChar: mentionChar,\n        mentionCharIndex: mentionCharIndex\n      };\n    }\n\n    return {\n      mentionChar: prev.mentionChar,\n      mentionCharIndex: prev.mentionCharIndex\n    };\n  }, {\n    mentionChar: null,\n    mentionCharIndex: -1\n  });\n}\n\nfunction hasValidChars(text, allowedChars) {\n  return allowedChars.test(text);\n}\n\nfunction hasValidMentionCharIndex(mentionCharIndex, text, isolateChar) {\n  if (mentionCharIndex > -1) {\n    if (isolateChar && !(mentionCharIndex === 0 || !!text[mentionCharIndex - 1].match(/\\s/g))) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar Embed = Quill[\"import\"](\"blots/embed\");\n\nvar MentionBlot = /*#__PURE__*/function (_Embed) {\n  _inherits(MentionBlot, _Embed);\n\n  function MentionBlot() {\n    _classCallCheck(this, MentionBlot);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MentionBlot).apply(this, arguments));\n  }\n\n  _createClass(MentionBlot, null, [{\n    key: \"create\",\n    value: function create(data) {\n      var node = _get(_getPrototypeOf(MentionBlot), \"create\", this).call(this);\n\n      var denotationChar = document.createElement(\"span\");\n      denotationChar.className = \"ql-mention-denotation-char\";\n      denotationChar.innerHTML = data.denotationChar;\n      node.appendChild(denotationChar);\n      node.innerHTML += data.value;\n      return MentionBlot.setDataValues(node, data);\n    }\n  }, {\n    key: \"setDataValues\",\n    value: function setDataValues(element, data) {\n      var domNode = element;\n      Object.keys(data).forEach(function (key) {\n        domNode.dataset[key] = data[key];\n      });\n      return domNode;\n    }\n  }, {\n    key: \"value\",\n    value: function value(domNode) {\n      return domNode.dataset;\n    }\n  }]);\n\n  return MentionBlot;\n}(Embed);\n\nMentionBlot.blotName = \"mention\";\nMentionBlot.tagName = \"span\";\nMentionBlot.className = \"mention\";\nQuill.register(MentionBlot);\n\nvar Mention = /*#__PURE__*/function () {\n  function Mention(quill, options) {\n    _classCallCheck(this, Mention);\n\n    this.isOpen = false;\n    this.itemIndex = 0;\n    this.mentionCharPos = null;\n    this.cursorPos = null;\n    this.values = [];\n    this.suspendMouseEnter = false;\n    this.quill = quill;\n    this.options = {\n      source: null,\n      renderItem: function renderItem(item) {\n        return \"\".concat(item.value);\n      },\n      onSelect: function onSelect(item, insertItem) {\n        insertItem(item);\n      },\n      mentionDenotationChars: [\"@\"],\n      showDenotationChar: true,\n      allowedChars: /^[a-zA-Z0-9_]*$/,\n      minChars: 0,\n      maxChars: 31,\n      offsetTop: 2,\n      offsetLeft: 0,\n      isolateCharacter: false,\n      fixMentionsToQuill: false,\n      defaultMenuOrientation: \"bottom\",\n      dataAttributes: [\"id\", \"value\", \"denotationChar\", \"link\", \"target\"],\n      linkTarget: \"_blank\",\n      onOpen: function onOpen() {\n        return true;\n      },\n      onClose: function onClose() {\n        return true;\n      },\n      // Style options\n      listItemClass: \"ql-mention-list-item\",\n      mentionContainerClass: \"ql-mention-list-container\",\n      mentionListClass: \"ql-mention-list\",\n      spaceAfterInsert: true\n    };\n\n    _extends(this.options, options, {\n      dataAttributes: Array.isArray(options.dataAttributes) ? this.options.dataAttributes.concat(options.dataAttributes) : this.options.dataAttributes\n    });\n\n    this.mentionContainer = document.createElement(\"div\");\n    this.mentionContainer.className = this.options.mentionContainerClass ? this.options.mentionContainerClass : \"\";\n    this.mentionContainer.style.cssText = \"display: none; position: absolute;\";\n    this.mentionContainer.onmousemove = this.onContainerMouseMove.bind(this);\n\n    if (this.options.fixMentionsToQuill) {\n      this.mentionContainer.style.width = \"auto\";\n    }\n\n    this.mentionList = document.createElement(\"ul\");\n    this.mentionList.className = this.options.mentionListClass ? this.options.mentionListClass : \"\";\n    this.mentionContainer.appendChild(this.mentionList);\n    this.quill.container.appendChild(this.mentionContainer);\n    quill.on(\"text-change\", this.onTextChange.bind(this));\n    quill.on(\"selection-change\", this.onSelectionChange.bind(this));\n    quill.keyboard.addBinding({\n      key: Keys.TAB\n    }, this.selectHandler.bind(this));\n    quill.keyboard.bindings[Keys.TAB].unshift(quill.keyboard.bindings[Keys.TAB].pop());\n    quill.keyboard.addBinding({\n      key: Keys.ENTER\n    }, this.selectHandler.bind(this));\n    quill.keyboard.bindings[Keys.ENTER].unshift(quill.keyboard.bindings[Keys.ENTER].pop());\n    quill.keyboard.addBinding({\n      key: Keys.ESCAPE\n    }, this.escapeHandler.bind(this));\n    quill.keyboard.addBinding({\n      key: Keys.UP\n    }, this.upHandler.bind(this));\n    quill.keyboard.addBinding({\n      key: Keys.DOWN\n    }, this.downHandler.bind(this));\n  }\n\n  _createClass(Mention, [{\n    key: \"selectHandler\",\n    value: function selectHandler() {\n      if (this.isOpen) {\n        this.selectItem();\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"escapeHandler\",\n    value: function escapeHandler() {\n      if (this.isOpen) {\n        this.hideMentionList();\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"upHandler\",\n    value: function upHandler() {\n      if (this.isOpen) {\n        this.prevItem();\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"downHandler\",\n    value: function downHandler() {\n      if (this.isOpen) {\n        this.nextItem();\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"showMentionList\",\n    value: function showMentionList() {\n      this.mentionContainer.style.visibility = \"hidden\";\n      this.mentionContainer.style.display = \"\";\n      this.setMentionContainerPosition();\n      this.setIsOpen(true);\n    }\n  }, {\n    key: \"hideMentionList\",\n    value: function hideMentionList() {\n      this.mentionContainer.style.display = \"none\";\n      this.setIsOpen(false);\n    }\n  }, {\n    key: \"highlightItem\",\n    value: function highlightItem() {\n      var scrollItemInView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      for (var i = 0; i < this.mentionList.childNodes.length; i += 1) {\n        this.mentionList.childNodes[i].classList.remove(\"selected\");\n      }\n\n      this.mentionList.childNodes[this.itemIndex].classList.add(\"selected\");\n\n      if (scrollItemInView) {\n        var itemHeight = this.mentionList.childNodes[this.itemIndex].offsetHeight;\n        var itemPos = this.itemIndex * itemHeight;\n        var containerTop = this.mentionContainer.scrollTop;\n        var containerBottom = containerTop + this.mentionContainer.offsetHeight;\n\n        if (itemPos < containerTop) {\n          // Scroll up if the item is above the top of the container\n          this.mentionContainer.scrollTop = itemPos;\n        } else if (itemPos > containerBottom - itemHeight) {\n          // scroll down if any part of the element is below the bottom of the container\n          this.mentionContainer.scrollTop += itemPos - containerBottom + itemHeight;\n        }\n      }\n    }\n  }, {\n    key: \"getItemData\",\n    value: function getItemData() {\n      var link = this.mentionList.childNodes[this.itemIndex].dataset.link;\n      var hasLinkValue = typeof link !== \"undefined\";\n      var itemTarget = this.mentionList.childNodes[this.itemIndex].dataset.target;\n\n      if (hasLinkValue) {\n        this.mentionList.childNodes[this.itemIndex].dataset.value = \"<a href=\\\"\".concat(link, \"\\\" target=\").concat(itemTarget || this.options.linkTarget, \">\").concat(this.mentionList.childNodes[this.itemIndex].dataset.value);\n      }\n\n      return this.mentionList.childNodes[this.itemIndex].dataset;\n    }\n  }, {\n    key: \"onContainerMouseMove\",\n    value: function onContainerMouseMove() {\n      this.suspendMouseEnter = false;\n    }\n  }, {\n    key: \"selectItem\",\n    value: function selectItem() {\n      var _this = this;\n\n      var data = this.getItemData();\n      this.options.onSelect(data, function (asyncData) {\n        _this.insertItem(asyncData);\n      });\n      this.hideMentionList();\n    }\n  }, {\n    key: \"insertItem\",\n    value: function insertItem(data) {\n      var render = data;\n\n      if (render === null) {\n        return;\n      }\n\n      if (!this.options.showDenotationChar) {\n        render.denotationChar = \"\";\n      }\n\n      var prevMentionCharPos = this.mentionCharPos;\n      this.quill.deleteText(this.mentionCharPos, this.cursorPos - this.mentionCharPos, Quill.sources.USER);\n      this.quill.insertEmbed(prevMentionCharPos, \"mention\", render, Quill.sources.USER);\n\n      if (this.options.spaceAfterInsert) {\n        this.quill.insertText(prevMentionCharPos + 1, \" \", Quill.sources.USER); // setSelection here sets cursor position\n\n        this.quill.setSelection(prevMentionCharPos + 2, Quill.sources.USER);\n      } else {\n        this.quill.setSelection(prevMentionCharPos + 1, Quill.sources.USER);\n      }\n\n      this.hideMentionList();\n    }\n  }, {\n    key: \"onItemMouseEnter\",\n    value: function onItemMouseEnter(e) {\n      if (this.suspendMouseEnter) {\n        return;\n      }\n\n      var index = Number(e.target.dataset.index);\n\n      if (!Number.isNaN(index) && index !== this.itemIndex) {\n        this.itemIndex = index;\n        this.highlightItem(false);\n      }\n    }\n  }, {\n    key: \"onItemClick\",\n    value: function onItemClick(e) {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      this.itemIndex = e.currentTarget.dataset.index;\n      this.highlightItem();\n      this.selectItem();\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList(mentionChar, data, searchTerm) {\n      if (data && data.length > 0) {\n        this.values = data;\n        this.mentionList.innerHTML = \"\";\n\n        for (var i = 0; i < data.length; i += 1) {\n          var li = document.createElement(\"li\");\n          li.className = this.options.listItemClass ? this.options.listItemClass : \"\";\n          li.dataset.index = i;\n          li.innerHTML = this.options.renderItem(data[i], searchTerm);\n          li.onmouseenter = this.onItemMouseEnter.bind(this);\n          li.dataset.denotationChar = mentionChar;\n          li.onclick = this.onItemClick.bind(this);\n          this.mentionList.appendChild(attachDataValues(li, data[i], this.options.dataAttributes));\n        }\n\n        this.itemIndex = 0;\n        this.highlightItem();\n        this.showMentionList();\n      } else {\n        this.hideMentionList();\n      }\n    }\n  }, {\n    key: \"nextItem\",\n    value: function nextItem() {\n      this.itemIndex = (this.itemIndex + 1) % this.values.length;\n      this.suspendMouseEnter = true;\n      this.highlightItem();\n    }\n  }, {\n    key: \"prevItem\",\n    value: function prevItem() {\n      this.itemIndex = (this.itemIndex + this.values.length - 1) % this.values.length;\n      this.suspendMouseEnter = true;\n      this.highlightItem();\n    }\n  }, {\n    key: \"containerBottomIsNotVisible\",\n    value: function containerBottomIsNotVisible(topPos, containerPos) {\n      var mentionContainerBottom = topPos + this.mentionContainer.offsetHeight + containerPos.top;\n      return mentionContainerBottom > window.pageYOffset + window.innerHeight;\n    }\n  }, {\n    key: \"containerRightIsNotVisible\",\n    value: function containerRightIsNotVisible(leftPos, containerPos) {\n      if (this.options.fixMentionsToQuill) {\n        return false;\n      }\n\n      var rightPos = leftPos + this.mentionContainer.offsetWidth + containerPos.left;\n      var browserWidth = window.pageXOffset + document.documentElement.clientWidth;\n      return rightPos > browserWidth;\n    }\n  }, {\n    key: \"setIsOpen\",\n    value: function setIsOpen(isOpen) {\n      if (this.isOpen !== isOpen) {\n        if (isOpen) {\n          this.options.onOpen();\n        } else {\n          this.options.onClose();\n        }\n\n        this.isOpen = isOpen;\n      }\n    }\n  }, {\n    key: \"setMentionContainerPosition\",\n    value: function setMentionContainerPosition() {\n      var _this2 = this;\n\n      var containerPos = this.quill.container.getBoundingClientRect();\n      var mentionCharPos = this.quill.getBounds(this.mentionCharPos);\n      var containerHeight = this.mentionContainer.offsetHeight;\n      var topPos = this.options.offsetTop;\n      var leftPos = this.options.offsetLeft; // handle horizontal positioning\n\n      if (this.options.fixMentionsToQuill) {\n        var rightPos = 0;\n        this.mentionContainer.style.right = \"\".concat(rightPos, \"px\");\n      } else {\n        leftPos += mentionCharPos.left;\n      }\n\n      if (this.containerRightIsNotVisible(leftPos, containerPos)) {\n        var containerWidth = this.mentionContainer.offsetWidth + this.options.offsetLeft;\n        var quillWidth = containerPos.width;\n        leftPos = quillWidth - containerWidth;\n      } // handle vertical positioning\n\n\n      if (this.options.defaultMenuOrientation === \"top\") {\n        // Attempt to align the mention container with the top of the quill editor\n        if (this.options.fixMentionsToQuill) {\n          topPos = -1 * (containerHeight + this.options.offsetTop);\n        } else {\n          topPos = mentionCharPos.top - (containerHeight + this.options.offsetTop);\n        } // default to bottom if the top is not visible\n\n\n        if (topPos + containerPos.top <= 0) {\n          var overMentionCharPos = this.options.offsetTop;\n\n          if (this.options.fixMentionsToQuill) {\n            overMentionCharPos += containerPos.height;\n          } else {\n            overMentionCharPos += mentionCharPos.bottom;\n          }\n\n          topPos = overMentionCharPos;\n        }\n      } else {\n        // Attempt to align the mention container with the bottom of the quill editor\n        if (this.options.fixMentionsToQuill) {\n          topPos += containerPos.height;\n        } else {\n          topPos += mentionCharPos.bottom;\n        } // default to the top if the bottom is not visible\n\n\n        if (this.containerBottomIsNotVisible(topPos, containerPos)) {\n          var _overMentionCharPos = this.options.offsetTop * -1;\n\n          if (!this.options.fixMentionsToQuill) {\n            _overMentionCharPos += mentionCharPos.top;\n          }\n\n          topPos = _overMentionCharPos - containerHeight;\n        }\n      }\n\n      if (topPos >= 0) {\n        this.options.mentionContainerClass.split(' ').forEach(function (className) {\n          _this2.mentionContainer.classList.add(\"\".concat(className, \"-bottom\"));\n\n          _this2.mentionContainer.classList.remove(\"\".concat(className, \"-top\"));\n        });\n      } else {\n        this.options.mentionContainerClass.split(' ').forEach(function (className) {\n          _this2.mentionContainer.classList.add(\"\".concat(className, \"-top\"));\n\n          _this2.mentionContainer.classList.remove(\"\".concat(className, \"-bottom\"));\n        });\n      }\n\n      this.mentionContainer.style.top = \"\".concat(topPos, \"px\");\n      this.mentionContainer.style.left = \"\".concat(leftPos, \"px\");\n      this.mentionContainer.style.visibility = \"visible\";\n    }\n  }, {\n    key: \"getTextBeforeCursor\",\n    value: function getTextBeforeCursor() {\n      var startPos = Math.max(0, this.cursorPos - this.options.maxChars);\n      var textBeforeCursorPos = this.quill.getText(startPos, this.cursorPos - startPos);\n      return textBeforeCursorPos;\n    }\n  }, {\n    key: \"onSomethingChange\",\n    value: function onSomethingChange() {\n      var range = this.quill.getSelection();\n      if (range == null) return;\n      this.cursorPos = range.index;\n      var textBeforeCursor = this.getTextBeforeCursor();\n\n      var _getMentionCharIndex = getMentionCharIndex(textBeforeCursor, this.options.mentionDenotationChars),\n          mentionChar = _getMentionCharIndex.mentionChar,\n          mentionCharIndex = _getMentionCharIndex.mentionCharIndex;\n\n      if (hasValidMentionCharIndex(mentionCharIndex, textBeforeCursor, this.options.isolateCharacter)) {\n        var mentionCharPos = this.cursorPos - (textBeforeCursor.length - mentionCharIndex);\n        this.mentionCharPos = mentionCharPos;\n        var textAfter = textBeforeCursor.substring(mentionCharIndex + mentionChar.length);\n\n        if (textAfter.length >= this.options.minChars && hasValidChars(textAfter, this.options.allowedChars)) {\n          this.options.source(textAfter, this.renderList.bind(this, mentionChar), mentionChar);\n        } else {\n          this.hideMentionList();\n        }\n      } else {\n        this.hideMentionList();\n      }\n    }\n  }, {\n    key: \"onTextChange\",\n    value: function onTextChange(delta, oldDelta, source) {\n      if (source === \"user\") {\n        this.onSomethingChange();\n      }\n    }\n  }, {\n    key: \"onSelectionChange\",\n    value: function onSelectionChange(range) {\n      if (range && range.length === 0) {\n        this.onSomethingChange();\n      } else {\n        this.hideMentionList();\n      }\n    }\n  }]);\n\n  return Mention;\n}();\n\nQuill.register(\"modules/mention\", Mention);\nexport default Mention;","map":null,"metadata":{},"sourceType":"module"}