{"ast":null,"code":"import _classCallCheck from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { __decorate, __metadata } from 'tslib';\nimport { forwardRef, Input, Directive, NgModule } from '@angular/core';\nimport { Validators, FormControl, NgModel, NG_VALIDATORS } from '@angular/forms';\nimport * as Éµngcc0 from '@angular/core';\n\nfunction isPresent(obj) {\n  return obj !== undefined && obj !== null;\n}\n\nfunction isDate(obj) {\n  try {\n    var _date = new Date(obj);\n\n    return !isNaN(_date.getTime());\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction parseDate(obj) {\n  try {\n    // Moment.js\n    if (obj._d instanceof Date) {\n      var d = obj._d;\n      var month = +d.getMonth() + 1;\n      var day = +d.getDate();\n      return \"\".concat(d.getFullYear(), \"-\").concat(formatDayOrMonth(month), \"-\").concat(formatDayOrMonth(day));\n    } // NgbDateStruct\n\n\n    if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {\n      var _month = +obj.month;\n\n      var _day = +obj.day;\n\n      return \"\".concat(obj.year, \"-\").concat(formatDayOrMonth(_month), \"-\").concat(formatDayOrMonth(_day));\n    }\n  } catch (e) {}\n\n  return obj;\n}\n\nfunction formatDayOrMonth(month) {\n  return month < 10 ? \"0\".concat(month) : month;\n}\n\nvar arrayLength = function arrayLength(value) {\n  return function (control) {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var obj = control.value;\n    return Array.isArray(obj) && obj.length >= +value ? null : {\n      arrayLength: {\n        minLength: value\n      }\n    };\n  };\n};\n\nvar base64 = function base64(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : {\n    base64: true\n  };\n};\n\nvar creditCard = function creditCard(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  var sanitized = v.replace(/[^0-9]+/g, ''); // problem with chrome\n\n  /* tslint:disable */\n\n  if (!/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|(?:9792)\\d{12})$/.test(sanitized)) {\n    return {\n      creditCard: true\n    };\n  }\n  /* tslint:enable */\n\n\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble;\n\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  if (Boolean(sum % 10 === 0 ? sanitized : false)) {\n    return null;\n  }\n\n  return {\n    creditCard: true\n  };\n};\n\nvar date = function date(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  v = parseDate(v);\n  return isDate(v) ? null : {\n    date: true\n  };\n};\n\nvar dateISO = function dateISO(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : {\n    dateISO: true\n  };\n};\n\nvar digits = function digits(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  return /^\\d+$/.test(v) ? null : {\n    digits: true\n  };\n};\n\nvar email = function email(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  /* tslint:disable */\n\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : {\n    'email': true\n  };\n  /* tslint:enable */\n};\n\nvar equal = function equal(val) {\n  return function (control) {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = control.value;\n    return val === v ? null : {\n      equal: {\n        value: val\n      }\n    };\n  };\n};\n\nvar equalTo = function equalTo(equalControl) {\n  var subscribe = false;\n  return function (control) {\n    if (!subscribe) {\n      subscribe = true;\n      equalControl.valueChanges.subscribe(function () {\n        control.updateValueAndValidity();\n      });\n    }\n\n    var v = control.value;\n    return equalControl.value === v ? null : {\n      equalTo: {\n        control: equalControl,\n        value: equalControl.value\n      }\n    };\n  };\n};\n\nvar gt = function gt(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v > +value ? null : {\n      gt: {\n        value: value\n      }\n    };\n  };\n};\n\nvar gte = function gte(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v >= +value ? null : {\n      gte: {\n        value: value\n      }\n    };\n  };\n};\n\nvar json = function json(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n\n  try {\n    var obj = JSON.parse(v);\n\n    if (Boolean(obj) && typeof obj === 'object') {\n      return null;\n    }\n  } catch (e) {}\n\n  return {\n    json: true\n  };\n};\n\nvar lt = function lt(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v < +value ? null : {\n      lt: {\n        value: value\n      }\n    };\n  };\n};\n\nvar lte = function lte(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v <= +value ? null : {\n      lte: {\n        value: value\n      }\n    };\n  };\n};\n\nvar max = function max(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v <= +value ? null : {\n      max: {\n        value: value\n      }\n    };\n  };\n};\n\nvar maxDate = function maxDate(maxInput) {\n  var value;\n  var subscribe = false;\n  var maxValue = maxInput;\n  var isForm = maxInput instanceof FormControl || maxInput instanceof NgModel;\n  return function (control) {\n    if (!subscribe && isForm) {\n      subscribe = true;\n      maxInput.valueChanges.subscribe(function () {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      maxValue = maxInput.value;\n    }\n\n    value = parseDate(maxValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return {\n          maxDate: {\n            error: 'maxDate is invalid'\n          }\n        };\n      } else {\n        throw Error('maxDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return {\n        value: true\n      };\n    }\n\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d <= new Date(value).getTime() ? null : isForm ? {\n      maxDate: {\n        control: maxInput,\n        value: maxInput.value\n      }\n    } : {\n      maxDate: {\n        value: maxValue,\n        control: undefined\n      }\n    };\n  };\n};\n\nvar min = function min(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v >= +value ? null : {\n      min: {\n        value: value\n      }\n    };\n  };\n};\n\nvar minDate = function minDate(minInput) {\n  var value;\n  var subscribe = false;\n  var minValue = minInput;\n  var isForm = minInput instanceof FormControl || minInput instanceof NgModel;\n  return function (control) {\n    if (!subscribe && isForm) {\n      subscribe = true;\n      minInput.valueChanges.subscribe(function () {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      minValue = minInput.value;\n    }\n\n    value = parseDate(minValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return {\n          minDate: {\n            error: 'minDate is invalid'\n          }\n        };\n      } else {\n        throw Error('minDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return {\n        value: true\n      };\n    }\n\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d >= new Date(value).getTime() ? null : isForm ? {\n      minDate: {\n        control: minInput,\n        value: minInput.value\n      }\n    } : {\n      minDate: {\n        value: minValue,\n        control: undefined\n      }\n    };\n  };\n};\n\nvar notEqual = function notEqual(val) {\n  return function (control) {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = control.value;\n    return val !== v ? null : {\n      notEqual: {\n        value: val\n      }\n    };\n  };\n};\n\nvar notEqualTo = function notEqualTo(notEqualControl) {\n  var subscribe = false;\n  return function (control) {\n    if (!subscribe) {\n      subscribe = true;\n      notEqualControl.valueChanges.subscribe(function () {\n        control.updateValueAndValidity();\n      });\n    }\n\n    var v = control.value;\n\n    if (notEqualControl.value == null && v == null) {\n      return null;\n    }\n\n    return notEqualControl.value !== v ? null : {\n      notEqualTo: {\n        control: notEqualControl,\n        value: notEqualControl.value\n      }\n    };\n  };\n};\n\nvar number = function number(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : {\n    'number': true\n  };\n};\n\nvar property = function property(value) {\n  return function (control) {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var properties = value.split(',');\n    var obj = control.value;\n    var isValid = true;\n\n    var _iterator = _createForOfIteratorHelper(properties),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n\n        if (obj[prop] == null) {\n          isValid = false;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return isValid ? null : {\n      hasProperty: {\n        value: value\n      }\n    };\n  };\n};\n\nvar range = function range(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = +control.value;\n    return v >= value[0] && v <= value[1] ? null : {\n      range: {\n        value: value\n      }\n    };\n  };\n};\n\nvar rangeLength = function rangeLength(value) {\n  return function (control) {\n    if (!isPresent(value)) {\n      return null;\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = control.value;\n    return v.length >= value[0] && v.length <= value[1] ? null : {\n      rangeLength: {\n        value: value\n      }\n    };\n  };\n};\n\nvar uuids = {\n  '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\n\nvar uuid = function uuid(version) {\n  return function (control) {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    var v = control.value;\n    var pattern = uuids[version] || uuids.all;\n    return new RegExp(pattern).test(v) ? null : {\n      uuid: true\n    };\n  };\n};\n\nvar url = function url(control) {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  var v = control.value;\n  /* tslint:disable */\n\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : {\n    'url': true\n  };\n  /* tslint:enable */\n};\n\nvar ARRAY_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return ArrayLengthValidator;\n  }),\n  multi: true\n};\n\nvar ArrayLengthValidator = /*@__PURE__*/function () {\n  var ArrayLengthValidator = /*#__PURE__*/function () {\n    function ArrayLengthValidator() {\n      _classCallCheck(this, ArrayLengthValidator);\n    }\n\n    _createClass(ArrayLengthValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = arrayLength(this.arrayLength);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'arrayLength') {\n            this.validator = arrayLength(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return ArrayLengthValidator;\n  }();\n\n  ArrayLengthValidator.Éµfac = function ArrayLengthValidator_Factory(t) {\n    return new (t || ArrayLengthValidator)();\n  };\n\n  ArrayLengthValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: ArrayLengthValidator,\n    selectors: [[\"\", \"arrayLength\", \"\", \"formControlName\", \"\"], [\"\", \"arrayLength\", \"\", \"formControl\", \"\"], [\"\", \"arrayLength\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      arrayLength: \"arrayLength\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([ARRAY_LENGTH_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return ArrayLengthValidator;\n}();\n\nvar BASE64_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return Base64Validator;\n  }),\n  multi: true\n};\n\nvar Base64Validator = /*@__PURE__*/function () {\n  var Base64Validator = /*#__PURE__*/function () {\n    function Base64Validator() {\n      _classCallCheck(this, Base64Validator);\n    }\n\n    _createClass(Base64Validator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return base64(c);\n      }\n    }]);\n\n    return Base64Validator;\n  }();\n\n  Base64Validator.Éµfac = function Base64Validator_Factory(t) {\n    return new (t || Base64Validator)();\n  };\n\n  Base64Validator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: Base64Validator,\n    selectors: [[\"\", \"base64\", \"\", \"formControlName\", \"\"], [\"\", \"base64\", \"\", \"formControl\", \"\"], [\"\", \"base64\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([BASE64_VALIDATOR])]\n  });\n  return Base64Validator;\n}();\n\nvar CREDIT_CARD_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return CreditCardValidator;\n  }),\n  multi: true\n};\n\nvar CreditCardValidator = /*@__PURE__*/function () {\n  var CreditCardValidator = /*#__PURE__*/function () {\n    function CreditCardValidator() {\n      _classCallCheck(this, CreditCardValidator);\n    }\n\n    _createClass(CreditCardValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return creditCard(c);\n      }\n    }]);\n\n    return CreditCardValidator;\n  }();\n\n  CreditCardValidator.Éµfac = function CreditCardValidator_Factory(t) {\n    return new (t || CreditCardValidator)();\n  };\n\n  CreditCardValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: CreditCardValidator,\n    selectors: [[\"\", \"creditCard\", \"\", \"formControlName\", \"\"], [\"\", \"creditCard\", \"\", \"formControl\", \"\"], [\"\", \"creditCard\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([CREDIT_CARD_VALIDATOR])]\n  });\n  return CreditCardValidator;\n}();\n\nvar DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return DateValidator;\n  }),\n  multi: true\n};\n\nvar DateValidator = /*@__PURE__*/function () {\n  var DateValidator = /*#__PURE__*/function () {\n    function DateValidator() {\n      _classCallCheck(this, DateValidator);\n    }\n\n    _createClass(DateValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return date(c);\n      }\n    }]);\n\n    return DateValidator;\n  }();\n\n  DateValidator.Éµfac = function DateValidator_Factory(t) {\n    return new (t || DateValidator)();\n  };\n\n  DateValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: DateValidator,\n    selectors: [[\"\", \"date\", \"\", \"formControlName\", \"\"], [\"\", \"date\", \"\", \"formControl\", \"\"], [\"\", \"date\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DATE_VALIDATOR])]\n  });\n  return DateValidator;\n}();\n\nvar DATE_ISO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return DateISOValidator;\n  }),\n  multi: true\n};\n\nvar DateISOValidator = /*@__PURE__*/function () {\n  var DateISOValidator = /*#__PURE__*/function () {\n    function DateISOValidator() {\n      _classCallCheck(this, DateISOValidator);\n    }\n\n    _createClass(DateISOValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return dateISO(c);\n      }\n    }]);\n\n    return DateISOValidator;\n  }();\n\n  DateISOValidator.Éµfac = function DateISOValidator_Factory(t) {\n    return new (t || DateISOValidator)();\n  };\n\n  DateISOValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: DateISOValidator,\n    selectors: [[\"\", \"dateISO\", \"\", \"formControlName\", \"\"], [\"\", \"dateISO\", \"\", \"formControl\", \"\"], [\"\", \"dateISO\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DATE_ISO_VALIDATOR])]\n  });\n  return DateISOValidator;\n}();\n\nvar DIGITS_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return DigitsValidator;\n  }),\n  multi: true\n};\n\nvar DigitsValidator = /*@__PURE__*/function () {\n  var DigitsValidator = /*#__PURE__*/function () {\n    function DigitsValidator() {\n      _classCallCheck(this, DigitsValidator);\n    }\n\n    _createClass(DigitsValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return digits(c);\n      }\n    }]);\n\n    return DigitsValidator;\n  }();\n\n  DigitsValidator.Éµfac = function DigitsValidator_Factory(t) {\n    return new (t || DigitsValidator)();\n  };\n\n  DigitsValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: DigitsValidator,\n    selectors: [[\"\", \"digits\", \"\", \"formControlName\", \"\"], [\"\", \"digits\", \"\", \"formControl\", \"\"], [\"\", \"digits\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([DIGITS_VALIDATOR])]\n  });\n  return DigitsValidator;\n}();\n\nvar EMAIL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return EmailValidator;\n  }),\n  multi: true\n};\n\nvar EmailValidator = /*@__PURE__*/function () {\n  var EmailValidator = /*#__PURE__*/function () {\n    function EmailValidator() {\n      _classCallCheck(this, EmailValidator);\n    }\n\n    _createClass(EmailValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return email(c);\n      }\n    }]);\n\n    return EmailValidator;\n  }();\n\n  EmailValidator.Éµfac = function EmailValidator_Factory(t) {\n    return new (t || EmailValidator)();\n  };\n\n  EmailValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: EmailValidator,\n    selectors: [[\"\", \"ngvemail\", \"\", \"formControlName\", \"\"], [\"\", \"ngvemail\", \"\", \"formControl\", \"\"], [\"\", \"ngvemail\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EMAIL_VALIDATOR])]\n  });\n  return EmailValidator;\n}();\n\nvar EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return EqualValidator;\n  }),\n  multi: true\n};\n\nvar EqualValidator = /*@__PURE__*/function () {\n  var EqualValidator = /*#__PURE__*/function () {\n    function EqualValidator() {\n      _classCallCheck(this, EqualValidator);\n    }\n\n    _createClass(EqualValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = equal(this.equal);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'equal') {\n            this.validator = equal(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return EqualValidator;\n  }();\n\n  EqualValidator.Éµfac = function EqualValidator_Factory(t) {\n    return new (t || EqualValidator)();\n  };\n\n  EqualValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: EqualValidator,\n    selectors: [[\"\", \"equal\", \"\", \"formControlName\", \"\"], [\"\", \"equal\", \"\", \"formControl\", \"\"], [\"\", \"equal\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      equal: \"equal\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return EqualValidator;\n}();\n\nvar EQUAL_TO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return EqualToValidator;\n  }),\n  multi: true\n};\n\nvar EqualToValidator = /*@__PURE__*/function () {\n  var EqualToValidator = /*#__PURE__*/function () {\n    function EqualToValidator() {\n      _classCallCheck(this, EqualToValidator);\n    }\n\n    _createClass(EqualToValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = equalTo(this.equalTo);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }]);\n\n    return EqualToValidator;\n  }();\n\n  EqualToValidator.Éµfac = function EqualToValidator_Factory(t) {\n    return new (t || EqualToValidator)();\n  };\n\n  EqualToValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: EqualToValidator,\n    selectors: [[\"\", \"equalTo\", \"\", \"formControlName\", \"\"], [\"\", \"equalTo\", \"\", \"formControl\", \"\"], [\"\", \"equalTo\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      equalTo: \"equalTo\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([EQUAL_TO_VALIDATOR])]\n  });\n  return EqualToValidator;\n}();\n\nvar GREATER_THAN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return GreaterThanValidator;\n  }),\n  multi: true\n};\n\nvar GreaterThanValidator = /*@__PURE__*/function () {\n  var GreaterThanValidator = /*#__PURE__*/function () {\n    function GreaterThanValidator() {\n      _classCallCheck(this, GreaterThanValidator);\n    }\n\n    _createClass(GreaterThanValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = gt(this.gt);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'gt') {\n            this.validator = gt(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return GreaterThanValidator;\n  }();\n\n  GreaterThanValidator.Éµfac = function GreaterThanValidator_Factory(t) {\n    return new (t || GreaterThanValidator)();\n  };\n\n  GreaterThanValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: GreaterThanValidator,\n    selectors: [[\"\", \"gt\", \"\", \"formControlName\", \"\"], [\"\", \"gt\", \"\", \"formControl\", \"\"], [\"\", \"gt\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      gt: \"gt\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([GREATER_THAN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return GreaterThanValidator;\n}();\n\nvar GREATER_THAN_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return GreaterThanEqualValidator;\n  }),\n  multi: true\n};\n\nvar GreaterThanEqualValidator = /*@__PURE__*/function () {\n  var GreaterThanEqualValidator = /*#__PURE__*/function () {\n    function GreaterThanEqualValidator() {\n      _classCallCheck(this, GreaterThanEqualValidator);\n    }\n\n    _createClass(GreaterThanEqualValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = gte(this.gte);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'gte') {\n            this.validator = gte(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return GreaterThanEqualValidator;\n  }();\n\n  GreaterThanEqualValidator.Éµfac = function GreaterThanEqualValidator_Factory(t) {\n    return new (t || GreaterThanEqualValidator)();\n  };\n\n  GreaterThanEqualValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: GreaterThanEqualValidator,\n    selectors: [[\"\", \"gte\", \"\", \"formControlName\", \"\"], [\"\", \"gte\", \"\", \"formControl\", \"\"], [\"\", \"gte\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      gte: \"gte\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([GREATER_THAN_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return GreaterThanEqualValidator;\n}();\n\nvar JSON_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return JSONValidator;\n  }),\n  multi: true\n};\n\nvar JSONValidator = /*@__PURE__*/function () {\n  var JSONValidator = /*#__PURE__*/function () {\n    function JSONValidator() {\n      _classCallCheck(this, JSONValidator);\n    }\n\n    _createClass(JSONValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return json(c);\n      }\n    }]);\n\n    return JSONValidator;\n  }();\n\n  JSONValidator.Éµfac = function JSONValidator_Factory(t) {\n    return new (t || JSONValidator)();\n  };\n\n  JSONValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: JSONValidator,\n    selectors: [[\"\", \"json\", \"\", \"formControlName\", \"\"], [\"\", \"json\", \"\", \"formControl\", \"\"], [\"\", \"json\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([JSON_VALIDATOR])]\n  });\n  return JSONValidator;\n}();\n\nvar LESS_THAN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return LessThanValidator;\n  }),\n  multi: true\n};\n\nvar LessThanValidator = /*@__PURE__*/function () {\n  var LessThanValidator = /*#__PURE__*/function () {\n    function LessThanValidator() {\n      _classCallCheck(this, LessThanValidator);\n    }\n\n    _createClass(LessThanValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = lt(this.lt);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'lt') {\n            this.validator = lt(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return LessThanValidator;\n  }();\n\n  LessThanValidator.Éµfac = function LessThanValidator_Factory(t) {\n    return new (t || LessThanValidator)();\n  };\n\n  LessThanValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: LessThanValidator,\n    selectors: [[\"\", \"lt\", \"\", \"formControlName\", \"\"], [\"\", \"lt\", \"\", \"formControl\", \"\"], [\"\", \"lt\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      lt: \"lt\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([LESS_THAN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return LessThanValidator;\n}();\n\nvar LESS_THAN_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return LessThanEqualValidator;\n  }),\n  multi: true\n};\n\nvar LessThanEqualValidator = /*@__PURE__*/function () {\n  var LessThanEqualValidator = /*#__PURE__*/function () {\n    function LessThanEqualValidator() {\n      _classCallCheck(this, LessThanEqualValidator);\n    }\n\n    _createClass(LessThanEqualValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = lte(this.lte);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'lte') {\n            this.validator = lte(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return LessThanEqualValidator;\n  }();\n\n  LessThanEqualValidator.Éµfac = function LessThanEqualValidator_Factory(t) {\n    return new (t || LessThanEqualValidator)();\n  };\n\n  LessThanEqualValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: LessThanEqualValidator,\n    selectors: [[\"\", \"lte\", \"\", \"formControlName\", \"\"], [\"\", \"lte\", \"\", \"formControl\", \"\"], [\"\", \"lte\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      lte: \"lte\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([LESS_THAN_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return LessThanEqualValidator;\n}();\n\nvar MAX_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MaxValidator;\n  }),\n  multi: true\n};\n\nvar MaxValidator = /*@__PURE__*/function () {\n  var MaxValidator = /*#__PURE__*/function () {\n    function MaxValidator() {\n      _classCallCheck(this, MaxValidator);\n    }\n\n    _createClass(MaxValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = max(this.max);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'max') {\n            this.validator = max(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return MaxValidator;\n  }();\n\n  MaxValidator.Éµfac = function MaxValidator_Factory(t) {\n    return new (t || MaxValidator)();\n  };\n\n  MaxValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: MaxValidator,\n    selectors: [[\"\", \"max\", \"\", \"formControlName\", \"\"], [\"\", \"max\", \"\", \"formControl\", \"\"], [\"\", \"max\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      max: \"max\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MAX_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MaxValidator;\n}();\n\nvar MAX_DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MaxDateValidator;\n  }),\n  multi: true\n};\n\nvar MaxDateValidator = /*@__PURE__*/function () {\n  var MaxDateValidator = /*#__PURE__*/function () {\n    function MaxDateValidator() {\n      _classCallCheck(this, MaxDateValidator);\n    }\n\n    _createClass(MaxDateValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = maxDate(this.maxDate);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'maxDate') {\n            this.validator = maxDate(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return MaxDateValidator;\n  }();\n\n  MaxDateValidator.Éµfac = function MaxDateValidator_Factory(t) {\n    return new (t || MaxDateValidator)();\n  };\n\n  MaxDateValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: MaxDateValidator,\n    selectors: [[\"\", \"maxDate\", \"\", \"formControlName\", \"\"], [\"\", \"maxDate\", \"\", \"formControl\", \"\"], [\"\", \"maxDate\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      maxDate: \"maxDate\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MAX_DATE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MaxDateValidator;\n}();\n\nvar MIN_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MinValidator;\n  }),\n  multi: true\n};\n\nvar MinValidator = /*@__PURE__*/function () {\n  var MinValidator = /*#__PURE__*/function () {\n    function MinValidator() {\n      _classCallCheck(this, MinValidator);\n    }\n\n    _createClass(MinValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = min(this.min);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'min') {\n            this.validator = min(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return MinValidator;\n  }();\n\n  MinValidator.Éµfac = function MinValidator_Factory(t) {\n    return new (t || MinValidator)();\n  };\n\n  MinValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: MinValidator,\n    selectors: [[\"\", \"min\", \"\", \"formControlName\", \"\"], [\"\", \"min\", \"\", \"formControl\", \"\"], [\"\", \"min\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      min: \"min\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MIN_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MinValidator;\n}();\n\nvar MIN_DATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MinDateValidator;\n  }),\n  multi: true\n};\n\nvar MinDateValidator = /*@__PURE__*/function () {\n  var MinDateValidator = /*#__PURE__*/function () {\n    function MinDateValidator() {\n      _classCallCheck(this, MinDateValidator);\n    }\n\n    _createClass(MinDateValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = minDate(this.minDate);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'minDate') {\n            this.validator = minDate(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return MinDateValidator;\n  }();\n\n  MinDateValidator.Éµfac = function MinDateValidator_Factory(t) {\n    return new (t || MinDateValidator)();\n  };\n\n  MinDateValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: MinDateValidator,\n    selectors: [[\"\", \"minDate\", \"\", \"formControlName\", \"\"], [\"\", \"minDate\", \"\", \"formControl\", \"\"], [\"\", \"minDate\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      minDate: \"minDate\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([MIN_DATE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return MinDateValidator;\n}();\n\nvar NOT_EQUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return NotEqualValidator;\n  }),\n  multi: true\n};\n\nvar NotEqualValidator = /*@__PURE__*/function () {\n  var NotEqualValidator = /*#__PURE__*/function () {\n    function NotEqualValidator() {\n      _classCallCheck(this, NotEqualValidator);\n    }\n\n    _createClass(NotEqualValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = notEqual(this.notEqual);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'notEqual') {\n            this.validator = notEqual(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return NotEqualValidator;\n  }();\n\n  NotEqualValidator.Éµfac = function NotEqualValidator_Factory(t) {\n    return new (t || NotEqualValidator)();\n  };\n\n  NotEqualValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: NotEqualValidator,\n    selectors: [[\"\", \"notEqual\", \"\", \"formControlName\", \"\"], [\"\", \"notEqual\", \"\", \"formControl\", \"\"], [\"\", \"notEqual\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      notEqual: \"notEqual\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NOT_EQUAL_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return NotEqualValidator;\n}();\n\nvar NOT_EQUAL_TO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return NotEqualToValidator;\n  }),\n  multi: true\n};\n\nvar NotEqualToValidator = /*@__PURE__*/function () {\n  var NotEqualToValidator = /*#__PURE__*/function () {\n    function NotEqualToValidator() {\n      _classCallCheck(this, NotEqualToValidator);\n    }\n\n    _createClass(NotEqualToValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = notEqualTo(this.notEqualTo);\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }]);\n\n    return NotEqualToValidator;\n  }();\n\n  NotEqualToValidator.Éµfac = function NotEqualToValidator_Factory(t) {\n    return new (t || NotEqualToValidator)();\n  };\n\n  NotEqualToValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: NotEqualToValidator,\n    selectors: [[\"\", \"notEqualTo\", \"\", \"formControlName\", \"\"], [\"\", \"notEqualTo\", \"\", \"formControl\", \"\"], [\"\", \"notEqualTo\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      notEqualTo: \"notEqualTo\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NOT_EQUAL_TO_VALIDATOR])]\n  });\n  return NotEqualToValidator;\n}();\n\nvar NUMBER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return NumberValidator;\n  }),\n  multi: true\n};\n\nvar NumberValidator = /*@__PURE__*/function () {\n  var NumberValidator = /*#__PURE__*/function () {\n    function NumberValidator() {\n      _classCallCheck(this, NumberValidator);\n    }\n\n    _createClass(NumberValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return number(c);\n      }\n    }]);\n\n    return NumberValidator;\n  }();\n\n  NumberValidator.Éµfac = function NumberValidator_Factory(t) {\n    return new (t || NumberValidator)();\n  };\n\n  NumberValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: NumberValidator,\n    selectors: [[\"\", \"number\", \"\", \"formControlName\", \"\"], [\"\", \"number\", \"\", \"formControl\", \"\"], [\"\", \"number\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([NUMBER_VALIDATOR])]\n  });\n  return NumberValidator;\n}();\n\nvar PROPERTY_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return PropertyValidator;\n  }),\n  multi: true\n};\n\nvar PropertyValidator = /*@__PURE__*/function () {\n  var PropertyValidator = /*#__PURE__*/function () {\n    function PropertyValidator() {\n      _classCallCheck(this, PropertyValidator);\n    }\n\n    _createClass(PropertyValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = property(this.property);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'property') {\n            this.validator = property(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return PropertyValidator;\n  }();\n\n  PropertyValidator.Éµfac = function PropertyValidator_Factory(t) {\n    return new (t || PropertyValidator)();\n  };\n\n  PropertyValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: PropertyValidator,\n    selectors: [[\"\", \"property\", \"\", \"formControlName\", \"\"], [\"\", \"property\", \"\", \"formControl\", \"\"], [\"\", \"property\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      property: \"property\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([PROPERTY_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return PropertyValidator;\n}();\n\nvar RANGE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return RangeValidator;\n  }),\n  multi: true\n};\n\nvar RangeValidator = /*@__PURE__*/function () {\n  var RangeValidator = /*#__PURE__*/function () {\n    function RangeValidator() {\n      _classCallCheck(this, RangeValidator);\n    }\n\n    _createClass(RangeValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = range(this.range);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'range') {\n            this.validator = range(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return RangeValidator;\n  }();\n\n  RangeValidator.Éµfac = function RangeValidator_Factory(t) {\n    return new (t || RangeValidator)();\n  };\n\n  RangeValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: RangeValidator,\n    selectors: [[\"\", \"range\", \"\", \"formControlName\", \"\"], [\"\", \"range\", \"\", \"formControl\", \"\"], [\"\", \"range\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      range: \"range\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([RANGE_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return RangeValidator;\n}();\n\nvar RANGE_LENGTH_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return RangeLengthValidator;\n  }),\n  multi: true\n};\n\nvar RangeLengthValidator = /*@__PURE__*/function () {\n  var RangeLengthValidator = /*#__PURE__*/function () {\n    function RangeLengthValidator() {\n      _classCallCheck(this, RangeLengthValidator);\n    }\n\n    _createClass(RangeLengthValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = rangeLength(this.rangeLength);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'rangeLength') {\n            this.validator = rangeLength(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return RangeLengthValidator;\n  }();\n\n  RangeLengthValidator.Éµfac = function RangeLengthValidator_Factory(t) {\n    return new (t || RangeLengthValidator)();\n  };\n\n  RangeLengthValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: RangeLengthValidator,\n    selectors: [[\"\", \"rangeLength\", \"\", \"formControlName\", \"\"], [\"\", \"rangeLength\", \"\", \"formControl\", \"\"], [\"\", \"rangeLength\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      rangeLength: \"rangeLength\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([RANGE_LENGTH_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return RangeLengthValidator;\n}();\n\nvar URL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return UrlValidator;\n  }),\n  multi: true\n};\n\nvar UrlValidator = /*@__PURE__*/function () {\n  var UrlValidator = /*#__PURE__*/function () {\n    function UrlValidator() {\n      _classCallCheck(this, UrlValidator);\n    }\n\n    _createClass(UrlValidator, [{\n      key: \"validate\",\n      value: function validate(c) {\n        return url(c);\n      }\n    }]);\n\n    return UrlValidator;\n  }();\n\n  UrlValidator.Éµfac = function UrlValidator_Factory(t) {\n    return new (t || UrlValidator)();\n  };\n\n  UrlValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: UrlValidator,\n    selectors: [[\"\", \"url\", \"\", \"formControlName\", \"\"], [\"\", \"url\", \"\", \"formControl\", \"\"], [\"\", \"url\", \"\", \"ngModel\", \"\"]],\n    features: [Éµngcc0.ÉµÉµProvidersFeature([URL_VALIDATOR])]\n  });\n  return UrlValidator;\n}();\n\nvar UUID_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return UUIDValidator;\n  }),\n  multi: true\n};\n\nvar UUIDValidator = /*@__PURE__*/function () {\n  var UUIDValidator = /*#__PURE__*/function () {\n    function UUIDValidator() {\n      _classCallCheck(this, UUIDValidator);\n    }\n\n    _createClass(UUIDValidator, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.validator = uuid(this.uuid);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        for (var key in changes) {\n          if (key === 'uuid') {\n            this.validator = uuid(changes[key].currentValue);\n\n            if (this.onChange) {\n              this.onChange();\n            }\n          }\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(c) {\n        return this.validator(c);\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onChange = fn;\n      }\n    }]);\n\n    return UUIDValidator;\n  }();\n\n  UUIDValidator.Éµfac = function UUIDValidator_Factory(t) {\n    return new (t || UUIDValidator)();\n  };\n\n  UUIDValidator.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n    type: UUIDValidator,\n    selectors: [[\"\", \"uuid\", \"\", \"formControlName\", \"\"], [\"\", \"uuid\", \"\", \"formControl\", \"\"], [\"\", \"uuid\", \"\", \"ngModel\", \"\"]],\n    inputs: {\n      uuid: \"uuid\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([UUID_VALIDATOR]), Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return UUIDValidator;\n}();\n\nvar CustomValidators = {\n  arrayLength: arrayLength,\n  base64: base64,\n  creditCard: creditCard,\n  date: date,\n  dateISO: dateISO,\n  digits: digits,\n  email: email,\n  equal: equal,\n  equalTo: equalTo,\n  gt: gt,\n  gte: gte,\n  json: json,\n  lt: lt,\n  lte: lte,\n  max: max,\n  maxDate: maxDate,\n  min: min,\n  minDate: minDate,\n  notEqual: notEqual,\n  notEqualTo: notEqualTo,\n  number: number,\n  property: property,\n  range: range,\n  rangeLength: rangeLength,\n  url: url,\n  uuid: uuid\n};\nvar CustomDirectives = [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator];\n\nvar CustomFormsModule = /*@__PURE__*/function () {\n  var CustomFormsModule = function CustomFormsModule() {\n    _classCallCheck(this, CustomFormsModule);\n  };\n\n  CustomFormsModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n    type: CustomFormsModule\n  });\n  CustomFormsModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n    factory: function CustomFormsModule_Factory(t) {\n      return new (t || CustomFormsModule)();\n    }\n  });\n  return CustomFormsModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CustomFormsModule, {\n    declarations: [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator],\n    exports: [ArrayLengthValidator, Base64Validator, CreditCardValidator, DateValidator, DateISOValidator, DigitsValidator, EmailValidator, EqualValidator, EqualToValidator, GreaterThanValidator, GreaterThanEqualValidator, JSONValidator, LessThanValidator, LessThanEqualValidator, MaxValidator, MaxDateValidator, MinValidator, MinDateValidator, NotEqualValidator, NotEqualToValidator, NumberValidator, PropertyValidator, RangeValidator, RangeLengthValidator, UrlValidator, UUIDValidator]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CustomFormsModule, CustomValidators, arrayLength as Éµa, base64 as Éµb, ArrayLengthValidator as Éµba, Base64Validator as Éµbb, CreditCardValidator as Éµbc, DateValidator as Éµbd, DateISOValidator as Éµbe, DigitsValidator as Éµbf, EmailValidator as Éµbg, EqualValidator as Éµbh, EqualToValidator as Éµbi, GreaterThanValidator as Éµbj, GreaterThanEqualValidator as Éµbk, JSONValidator as Éµbl, LessThanValidator as Éµbm, LessThanEqualValidator as Éµbn, MaxValidator as Éµbo, MaxDateValidator as Éµbp, MinValidator as Éµbq, MinDateValidator as Éµbr, NotEqualValidator as Éµbs, NotEqualToValidator as Éµbt, NumberValidator as Éµbu, PropertyValidator as Éµbv, RangeValidator as Éµbw, RangeLengthValidator as Éµbx, UrlValidator as Éµby, UUIDValidator as Éµbz, creditCard as Éµc, date as Éµd, dateISO as Éµe, digits as Éµf, email as Éµg, equal as Éµh, equalTo as Éµi, gt as Éµj, gte as Éµk, json as Éµl, lt as Éµm, lte as Éµn, max as Éµo, maxDate as Éµp, min as Éµq, minDate as Éµr, notEqual as Éµs, notEqualTo as Éµt, number as Éµu, property as Éµv, range as Éµw, rangeLength as Éµx, url as Éµy, uuid as Éµz };","map":null,"metadata":{},"sourceType":"module"}