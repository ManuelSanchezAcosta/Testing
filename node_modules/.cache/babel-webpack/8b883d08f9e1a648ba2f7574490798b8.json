{"ast":null,"code":"import _classCallCheck from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Source/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, PLATFORM_ID, Inject, NgModule, Component, Input, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingBarComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r2.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r2.diameter)(\"height\", ctx_r2.diameter);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 6);\n    ɵngcc0.ɵɵelement(2, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var progress_r1 = ɵngcc0.ɵɵnextContext().ngIf;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background\", ctx_r3.color)(\"height\", ctx_r3.height)(\"width\", progress_r1 + \"%\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r3.height);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, LoadingBarComponent_ng_container_0_div_1_Template, 2, 6, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, LoadingBarComponent_ng_container_0_div_2_Template, 3, 10, \"div\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeSpinner);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeBar);\n  }\n}\n\nvar LoadingBarService = /*#__PURE__*/function () {\n  /**\n   * @param {?} platformId\n   */\n  function LoadingBarService(platformId) {\n    _classCallCheck(this, LoadingBarService);\n\n    this.platformId = platformId;\n    this.progress$ =\n    /** @type {?} */\n    new Subject().pipe(debounceTime(0));\n    this._pendingRequests = 0;\n    this._value = 0;\n  }\n  /**\n   * @param {?=} initialValue\n   * @return {?}\n   */\n\n\n  _createClass(LoadingBarService, [{\n    key: \"start\",\n    value: function start() {\n      var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      ++this._pendingRequests;\n\n      if (this._value === 0 || this._pendingRequests === 1) {\n        // Inserts the loading bar element into the dom, and sets it to 2%\n        this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.complete();\n\n      while (this._pendingRequests > 0) {\n        this.complete();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var _this = this;\n\n      if (this._pendingRequests === 0 && this._value === 0) {\n        return;\n      }\n\n      if (this._pendingRequests > 0) {\n        --this._pendingRequests;\n      }\n\n      if (this._pendingRequests === 0 || this._pendingRequests === 0 && this._value > 0) {\n        if (this._value !== 100) {\n          this.set(100);\n        } // Attempt to aggregate any start/complete calls within 500ms:\n\n\n        setTimeout(function () {\n          return _this.set(0);\n        }, 500);\n      }\n    }\n    /**\n     * Set the loading bar's width to a certain percent.\n     *\n     * @param {?} n any value between 0 and 100\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(n) {\n      var _this2 = this;\n\n      if (!isPlatformBrowser(this.platformId)) {\n        this._pendingRequests = 0;\n        return;\n      }\n\n      if (n === 0 && this._pendingRequests > 0) {\n        n = 2;\n      }\n\n      this._value = n;\n      this.progress$.next(n);\n\n      if (this._pendingRequests === 0) {\n        return;\n      } // increment loadingbar to give the illusion that there is always\n      // progress but make sure to cancel the previous timeouts so we don't\n      // have multiple incs running at the same time.\n\n\n      clearTimeout(this._incTimeout);\n\n      if (this._value > 0 && this._value < 100) {\n        this._incTimeout = setTimeout(function () {\n          return _this2.increment();\n        }, 250);\n      }\n    }\n    /**\n     * Increments the loading bar by a random amount\n     * but slows down as it progresses\n     * @param {?=} rnd\n     * @return {?}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      var rnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (rnd > 0) {\n        this.set(this._value + rnd);\n      }\n      /** @type {?} */\n\n\n      var stat = this._value;\n\n      if (stat >= 0 && stat < 25) {\n        // Start out between 3 - 6% increments\n        rnd = Math.random() * (5 - 3 + 1) + 3;\n      } else if (stat >= 25 && stat < 65) {\n        // increment between 0 - 3%\n        rnd = Math.random() * 3;\n      } else if (stat >= 65 && stat < 90) {\n        // increment between 0 - 2%\n        rnd = Math.random() * 2;\n      } else if (stat >= 90 && stat < 99) {\n        // finally, increment it .5 %\n        rnd = 0.5;\n      } else {\n        // after 99%, don't increment:\n        rnd = 0;\n      }\n\n      this.set(this._value + rnd);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.progress$.complete();\n    }\n  }]);\n\n  return LoadingBarService;\n}();\n\nLoadingBarService.ɵfac = function LoadingBarService_Factory(t) {\n  return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nLoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LoadingBarService,\n  factory: LoadingBarService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nLoadingBarService.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nLoadingBarService.ngInjectableDef = defineInjectable({\n  factory: function LoadingBarService_Factory() {\n    return new LoadingBarService(inject(PLATFORM_ID));\n  },\n  token: LoadingBarService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingBarService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar LoadingBarComponent =\n/**\n * @param {?} loader\n */\nfunction LoadingBarComponent(loader) {\n  _classCallCheck(this, LoadingBarComponent);\n\n  this.loader = loader;\n  this.includeSpinner = true;\n  this.includeBar = true;\n  this.fixed = true;\n  this.value = null;\n};\n\nLoadingBarComponent.ɵfac = function LoadingBarComponent_Factory(t) {\n  return new (t || LoadingBarComponent)(ɵngcc0.ɵɵdirectiveInject(LoadingBarService));\n};\n\nLoadingBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LoadingBarComponent,\n  selectors: [[\"ngx-loading-bar\"]],\n  hostVars: 2,\n  hostBindings: function LoadingBarComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"loading-bar-fixed\", ctx.fixed);\n    }\n  },\n  inputs: {\n    includeSpinner: \"includeSpinner\",\n    includeBar: \"includeBar\",\n    fixed: \"fixed\",\n    value: \"value\",\n    color: \"color\",\n    height: \"height\",\n    diameter: \"diameter\"\n  },\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"id\", \"loading-bar-spinner\", 3, \"color\", 4, \"ngIf\"], [\"id\", \"loading-bar\", 3, \"color\", 4, \"ngIf\"], [\"id\", \"loading-bar-spinner\"], [1, \"spinner-icon\"], [\"id\", \"loading-bar\"], [1, \"bar\"], [1, \"peg\"]],\n  template: function LoadingBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, LoadingBarComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.value !== null ? ctx.value : ɵngcc0.ɵɵpipeBind1(1, 1, ctx.loader.progress$));\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  pipes: [ɵngcc1.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{position:relative;display:block}.loading-bar-fixed[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{position:fixed}.loading-bar-fixed[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{position:fixed;top:10px;left:10px}[dir=rtl]   .loading-bar-fixed[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{right:10px;left:unset}.loading-bar-fixed[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .peg[_ngcontent-%COMP%]{display:block}[_nghost-%COMP%] > div[_ngcontent-%COMP%]{pointer-events:none;transition:350ms linear;color:#29d}[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl]   [_nghost-%COMP%] > div[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{right:0;left:unset}[_nghost-%COMP%] > div[_ngcontent-%COMP%]   .peg[_ngcontent-%COMP%]{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]{display:block;position:absolute;z-index:10002;top:5px;left:0}[_nghost-%COMP%] > div#loading-bar-spinner[_ngcontent-%COMP%]   .spinner-icon[_ngcontent-%COMP%]{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"]\n});\n/** @nocollapse */\n\nLoadingBarComponent.ctorParameters = function () {\n  return [{\n    type: LoadingBarService\n  }];\n};\n\nLoadingBarComponent.propDecorators = {\n  includeSpinner: [{\n    type: Input\n  }],\n  includeBar: [{\n    type: Input\n  }],\n  fixed: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  diameter: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-loading-bar',\n      template: \"\\n    <ng-container *ngIf=\\\"(value !== null ? value : loader.progress$|async) as progress\\\">\\n      <div id=\\\"loading-bar-spinner\\\" *ngIf=\\\"includeSpinner\\\" [style.color]=\\\"color\\\">\\n        <div [style.width]=\\\"diameter\\\" [style.height]=\\\"diameter\\\" class=\\\"spinner-icon\\\"></div>\\n      </div>\\n      <div id=\\\"loading-bar\\\" *ngIf=\\\"includeBar\\\" [style.color]=\\\"color\\\">\\n        <div class=\\\"bar\\\" [style.background]=\\\"color\\\" [style.height]=\\\"height\\\" [style.width]=\\\"progress + '%'\\\">\\n          <div class=\\\"peg\\\" [style.height]=\\\"height\\\"></div>\\n        </div>\\n      </div>\\n    </ng-container>\\n  \",\n      preserveWhitespaces: false,\n      encapsulation: ViewEncapsulation.Emulated,\n      host: {\n        '[class.loading-bar-fixed]': 'fixed'\n      },\n      styles: [\":host{position:relative;display:block}:host.loading-bar-fixed>div .bar{position:fixed}:host.loading-bar-fixed>div#loading-bar-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host.loading-bar-fixed>div#loading-bar-spinner{right:10px;left:unset}:host.loading-bar-fixed>div .peg{display:block}:host>div{pointer-events:none;transition:350ms linear;color:#29d}:host>div .bar{transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host>div .bar{right:0;left:unset}:host>div .peg{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}:host>div#loading-bar-spinner{display:block;position:absolute;z-index:10002;top:5px;left:0}:host>div#loading-bar-spinner .spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: LoadingBarService\n    }];\n  }, {\n    includeSpinner: [{\n      type: Input\n    }],\n    includeBar: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar LoadingBarModule = function LoadingBarModule() {\n  _classCallCheck(this, LoadingBarModule);\n};\n\nLoadingBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: LoadingBarModule\n});\nLoadingBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function LoadingBarModule_Factory(t) {\n    return new (t || LoadingBarModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarModule, {\n    declarations: function declarations() {\n      return [LoadingBarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [LoadingBarComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [LoadingBarComponent],\n      exports: [LoadingBarComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { LoadingBarModule, LoadingBarComponent, LoadingBarService };","map":{"version":3,"sources":["@ngx-loading-bar/core/loading-bar.service.ts","@ngx-loading-bar/core/loading-bar.component.ts","@ngx-loading-bar/core/core.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingBarService implements OnDestroy {\n  readonly progress$ = (new Subject<number>()).pipe(debounceTime(0)) as Subject<number>;\n\n  private _pendingRequests = 0;\n  private _value = 0;\n  private _incTimeout: any;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  start(initialValue = 2) {\n    ++this._pendingRequests;\n    if (this._value === 0 || this._pendingRequests === 1) {\n      // Inserts the loading bar element into the dom, and sets it to 2%\n      this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n    }\n  }\n\n  stop() {\n    this.complete();\n    while (this._pendingRequests > 0) {\n      this.complete();\n    }\n  }\n\n  complete() {\n    if (this._pendingRequests === 0 && this._value === 0) {\n      return;\n    }\n\n    if (this._pendingRequests > 0) {\n      --this._pendingRequests;\n    }\n\n    if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {\n      if (this._value !== 100) {\n        this.set(100);\n      }\n\n      // Attempt to aggregate any start/complete calls within 500ms:\n      setTimeout(() => this.set(0), 500);\n    }\n  }\n\n  /**\n   * Set the loading bar's width to a certain percent.\n   *\n   * @param n any value between 0 and 100\n   */\n  set(n) {\n    if (!isPlatformBrowser(this.platformId)) {\n      this._pendingRequests = 0;\n      return;\n    }\n\n    if (n === 0 && this._pendingRequests > 0) {\n      n = 2;\n    }\n\n    this._value = n;\n    this.progress$.next(n);\n\n    if (this._pendingRequests === 0) {\n      return;\n    }\n\n    // increment loadingbar to give the illusion that there is always\n    // progress but make sure to cancel the previous timeouts so we don't\n    // have multiple incs running at the same time.\n    clearTimeout(this._incTimeout);\n    if (this._value > 0 && this._value < 100) {\n      this._incTimeout = setTimeout(() => this.increment(), 250);\n    }\n  }\n\n  /**\n   * Increments the loading bar by a random amount\n   * but slows down as it progresses\n   */\n  increment(rnd = 0) {\n    if (rnd > 0) {\n      this.set(this._value + rnd);\n    }\n\n    const stat = this._value;\n    if (stat >= 0 && stat < 25) {\n      // Start out between 3 - 6% increments\n      rnd = (Math.random() * (5 - 3 + 1) + 3);\n    } else if (stat >= 25 && stat < 65) {\n      // increment between 0 - 3%\n      rnd = (Math.random() * 3);\n    } else if (stat >= 65 && stat < 90) {\n      // increment between 0 - 2%\n      rnd = (Math.random() * 2);\n    } else if (stat >= 90 && stat < 99) {\n      // finally, increment it .5 %\n      rnd = 0.5;\n    } else {\n      // after 99%, don't increment:\n      rnd = 0;\n    }\n\n    this.set(this._value + rnd);\n  }\n\n  ngOnDestroy() {\n    this.progress$.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { LoadingBarService } from './loading-bar.service';\n\n@Component({\n  selector: 'ngx-loading-bar',\n  template: `\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.Emulated,\n  styleUrls: ['./loading-bar.component.scss'],\n  host: {\n    '[class.loading-bar-fixed]': 'fixed',\n  }\n})\nexport class LoadingBarComponent {\n  @Input() includeSpinner = true;\n  @Input() includeBar = true;\n  @Input() fixed = true;\n  @Input() color;\n  @Input() height;\n  @Input() diameter;\n  @Input() value = null;\n\n  constructor(public loader: LoadingBarService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingBarComponent } from './loading-bar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingBarComponent],\n  exports: [LoadingBarComponent],\n})\nexport class LoadingBarModule {}\n"]},"metadata":{},"sourceType":"module"}