{"ast":null,"code":"import { Observable, asyncScheduler } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nfunction _fromRef(ref) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(function () {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return function () {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nexport function fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\nexport function fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'value'\n    };\n  }));\n}\nexport function fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'query'\n    };\n  }));\n}","map":{"version":3,"sources":["../../../../../src/firestore/observable/fromRef.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAoC,cAApC,QAA0D,MAA1D;AAEA,SAAS,GAAT,QAAoB,gBAApB;;AAEA,SAAS,QAAT,CAAwB,GAAxB,EAAoF;AAAA,MAAzC,SAAyC,uEAAd,cAAc;AAClF,SAAO,IAAI,UAAJ,CAAe,UAAA,UAAU,EAAG;AACjC,QAAI,WAAJ;;AACA,QAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,MAAA,SAAS,CAAC,QAAV,CAAmB,YAAK;AACtB,QAAA,WAAW,GAAG,GAAG,CAAC,UAAJ,CAAe,UAAf,CAAd;AACD,OAFD;AAGD,KAJD,MAIO;AACL,MAAA,WAAW,GAAG,GAAG,CAAC,UAAJ,CAAe,UAAf,CAAd;AACD;;AAED,WAAO,YAAA;AACL,UAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,QAAA,WAAW;AACZ;AACF,KAJD;AAKD,GAfM,CAAP;AAgBD;;AAED,OAAM,SAAU,OAAV,CAAqB,GAArB,EAAqD,SAArD,EAA8E;AAClF,SAAO,QAAQ,CAAgB,GAAhB,EAAqB,SAArB,CAAf;AACD;AAED,OAAM,SAAU,UAAV,CAAwB,GAAxB,EAAgD,SAAhD,EAAyE;AAC7E,SAAO,OAAO,CAAsB,GAAtB,EAA2B,SAA3B,CAAP,CACJ,IADI,CAEH,GAAG,CAAC,UAAA,OAAO;AAAA,WAAK;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,IAAI,EAAE;AAAjB,KAAL;AAAA,GAAR,CAFA,CAAP;AAID;AAED,OAAM,SAAU,iBAAV,CAA+B,GAA/B,EAA2C,SAA3C,EAAoE;AACxE,SAAO,OAAO,CAAmB,GAAnB,EAAwB,SAAxB,CAAP,CAA0C,IAA1C,CAA+C,GAAG,CAAC,UAAA,OAAO;AAAA,WAAK;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,IAAI,EAAE;AAAjB,KAAL;AAAA,GAAR,CAAlD,CAAP;AACD","sourcesContent":["import { Observable, SchedulerLike, asyncScheduler } from 'rxjs';\nimport { DocumentReference, Query, Action, Reference, DocumentSnapshot, QuerySnapshot } from '../interfaces';\nimport { map } from 'rxjs/operators';\n\nfunction _fromRef<T, R>(ref: Reference<T>, scheduler: SchedulerLike = asyncScheduler): Observable<R> {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return function() {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    }\n  });\n}\n\nexport function fromRef<R>(ref: DocumentReference | Query, scheduler?: SchedulerLike) {\n  return _fromRef<typeof ref, R>(ref, scheduler);\n}\n\nexport function fromDocRef<T>(ref: DocumentReference, scheduler?: SchedulerLike): Observable<Action<DocumentSnapshot<T>>>{\n  return fromRef<DocumentSnapshot<T>>(ref, scheduler)\n    .pipe(\n      map(payload => ({ payload, type: 'value' }))\n    );\n}\n\nexport function fromCollectionRef<T>(ref: Query, scheduler?: SchedulerLike): Observable<Action<QuerySnapshot<T>>> {\n  return fromRef<QuerySnapshot<T>>(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}