{"ast":null,"code":"import _slicedToArray from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Directive, ElementRef, Input, Output, EventEmitter, forwardRef, HostListener, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar FlatpickrDefaults = /*@__PURE__*/function () {\n  var FlatpickrDefaults = function FlatpickrDefaults() {\n    _classCallCheck(this, FlatpickrDefaults);\n\n    /**\n     * Exactly the same as date format, but for the altInput field.\n     */\n    this.altFormat = 'F j, Y';\n    /**\n     * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n     */\n\n    this.altInput = false;\n    /**\n     * This class will be added to the input element created by the altInput option.\n     * Note that `altInput` already inherits classes from the original input.\n     */\n\n    this.altInputClass = '';\n    /**\n     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n     */\n\n    this.allowInput = false;\n    /**\n     * Instead of `body`, appends the calendar to the specified node instead.\n     */\n\n    this.appendTo = undefined;\n    /**\n     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n     */\n\n    this.ariaDateFormat = 'F j, Y';\n    /**\n     * Whether clicking on the input should open the picker.\n     * You could disable this if you wish to open the calendar manually `with.open()`.\n     */\n\n    this.clickOpens = true;\n    /**\n     * A string of characters which are used to define how the date will be displayed in the input box.\n     * The supported characters are defined in the table below.\n     */\n\n    this.dateFormat = 'Y-m-d';\n    /**\n     * Initial value of the hour element.\n     */\n\n    this.defaultHour = 12;\n    /**\n     * Initial value of the minute element.\n     */\n\n    this.defaultMinute = 0;\n    /**\n     * Initial value of the seconds element.\n     */\n\n    this.defaultSeconds = 0;\n    /**\n     * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n     */\n\n    this.disable = [];\n    /**\n     * Set disableMobile to true to always use the non-native picker.\n     * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n     */\n\n    this.disableMobile = false;\n    /**\n     * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n     */\n\n    this.enable = [];\n    /**\n     * Enables time picker.\n     */\n\n    this.enableTime = false;\n    /**\n     * Enables seconds in the time picker.\n     */\n\n    this.enableSeconds = false;\n    /**\n     * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n     */\n\n    this.formatDate = undefined;\n    /**\n     * Adjusts the step for the hour input (incl. scrolling).\n     */\n\n    this.hourIncrement = 1;\n    /**\n     * Displays the calendar inline.\n     */\n\n    this.inline = false;\n    /**\n     * The maximum date that a user can pick to (inclusive).\n     */\n\n    this.maxDate = undefined;\n    /**\n     * The minimum date that a user can start picking from (inclusive).\n     */\n\n    this.minDate = undefined;\n    /**\n     * Adjusts the step for the minute input (incl. scrolling).\n     */\n\n    this.minuteIncrement = 5;\n    /**\n     * Select a single date, multiple dates or a date range.\n     */\n\n    this.mode = 'single';\n    /**\n     * HTML for the arrow icon, used to switch months.\n     */\n\n    this.nextArrow = '>';\n    /**\n     * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n     */\n\n    this.noCalendar = false;\n    /**\n     * Default now to the current date\n     */\n\n    this.now = new Date();\n    /**\n     * HTML for the left arrow icon.\n     */\n\n    this.prevArrow = '<';\n    /**\n     * Show the month using the shorthand version (ie, Sep instead of September).\n     */\n\n    this.shorthandCurrentMonth = false;\n    /**\n     * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n     */\n\n    this.static = false;\n    /**\n     * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n     */\n\n    this.time24hr = false;\n    /**\n     * When true, dates will parsed, formatted, and displayed in UTC.\n     * It's recommended that date strings contain the timezone, but not necessary.\n     */\n\n    this.utc = false;\n    /**\n     * Enables display of week numbers in calendar.\n     */\n\n    this.weekNumbers = false;\n    /**\n     * Custom elements and input groups.\n     */\n\n    this.wrap = false;\n    /**\n     * Array of plugin instances to use.\n     */\n\n    this.plugins = [];\n    /**\n     * The locale object or string to use for the locale.\n     */\n\n    this.locale = 'default';\n    /**\n     * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n     */\n\n    this.convertModelValue = false;\n    /**\n     * The number of months shown.\n     */\n\n    this.showMonths = 1;\n  };\n\n  FlatpickrDefaults.ɵfac = function FlatpickrDefaults_Factory(t) {\n    return new (t || FlatpickrDefaults)();\n  };\n\n  FlatpickrDefaults.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: FlatpickrDefaults,\n    factory: FlatpickrDefaults.ɵfac\n  });\n  return FlatpickrDefaults;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nFLATPICKR_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return FlatpickrDirective;\n  }),\n  //tslint:disable-line\n  multi: true\n};\n\nvar FlatpickrDirective = /*@__PURE__*/function () {\n  var FlatpickrDirective = /*#__PURE__*/function () {\n    /**\n     * @param {?} elm\n     * @param {?} defaults\n     * @param {?} renderer\n     */\n    function FlatpickrDirective(elm, defaults, renderer) {\n      _classCallCheck(this, FlatpickrDirective);\n\n      this.elm = elm;\n      this.defaults = defaults;\n      this.renderer = renderer;\n      /**\n       * Gets triggered once the calendar is in a ready state\n       */\n\n      this.flatpickrReady = new EventEmitter();\n      /**\n       * Gets triggered when the user selects a date, or changes the time on a selected date.\n       */\n\n      this.flatpickrChange = new EventEmitter();\n      /**\n       * Gets triggered when the input value is updated with a new date string.\n       */\n\n      this.flatpickrValueUpdate = new EventEmitter();\n      /**\n       * Gets triggered when the calendar is opened.\n       */\n\n      this.flatpickrOpen = new EventEmitter();\n      /**\n       * Gets triggered when the calendar is closed.\n       */\n\n      this.flatpickrClose = new EventEmitter();\n      /**\n       * Gets triggered when the month is changed, either by the user or programmatically.\n       */\n\n      this.flatpickrMonthChange = new EventEmitter();\n      /**\n       * Gets triggered when the year is changed, either by the user or programmatically.\n       */\n\n      this.flatpickrYearChange = new EventEmitter();\n      /**\n       * Take full control of every date cell with this output\n       */\n\n      this.flatpickrDayCreate = new EventEmitter();\n      this.isDisabled = false;\n\n      this.onChangeFn = function () {};\n\n      this.onTouchedFn = function () {};\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(FlatpickrDirective, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        var\n        /** @type {?} */\n        options = {\n          altFormat: this.altFormat,\n          altInput: this.altInput,\n          altInputClass: this.altInputClass,\n          allowInput: this.allowInput,\n          appendTo: this.appendTo,\n          ariaDateFormat: this.ariaDateFormat,\n          clickOpens: this.clickOpens,\n          dateFormat: this.dateFormat,\n          defaultHour: this.defaultHour,\n          defaultMinute: this.defaultMinute,\n          defaultSeconds: this.defaultSeconds,\n          disable: this.disable,\n          disableMobile: this.disableMobile,\n          enable: this.enable,\n          enableTime: this.enableTime,\n          enableSeconds: this.enableSeconds,\n          formatDate: this.formatDate,\n          hourIncrement: this.hourIncrement,\n          defaultDate: this.initialValue,\n          inline: this.inline,\n          maxDate: this.maxDate,\n          minDate: this.minDate,\n          minuteIncrement: this.minuteIncrement,\n          mode: this.mode,\n          nextArrow: this.nextArrow,\n          noCalendar: this.noCalendar,\n          now: this.now,\n          parseDate: this.parseDate,\n          prevArrow: this.prevArrow,\n          shorthandCurrentMonth: this.shorthandCurrentMonth,\n          showMonths: this.showMonths,\n          static: this.static,\n          time24hr: this.time24hr,\n          weekNumbers: this.weekNumbers,\n          getWeek: this.getWeek,\n          wrap: this.wrap,\n          plugins: this.plugins,\n          locale: this.locale,\n          onChange: function onChange(selectedDates, dateString, instance) {\n            _this.flatpickrChange.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onOpen: function onOpen(selectedDates, dateString, instance) {\n            _this.flatpickrOpen.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onClose: function onClose(selectedDates, dateString, instance) {\n            _this.flatpickrClose.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onMonthChange: function onMonthChange(selectedDates, dateString, instance) {\n            _this.flatpickrMonthChange.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onYearChange: function onYearChange(selectedDates, dateString, instance) {\n            _this.flatpickrYearChange.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onReady: function onReady(selectedDates, dateString, instance) {\n            _this.flatpickrReady.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onValueUpdate: function onValueUpdate(selectedDates, dateString, instance) {\n            _this.flatpickrValueUpdate.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance\n            });\n          },\n          onDayCreate: function onDayCreate(selectedDates, dateString, instance, dayElement) {\n            _this.flatpickrDayCreate.emit({\n              selectedDates: selectedDates,\n              dateString: dateString,\n              instance: instance,\n              dayElement: dayElement\n            });\n          }\n        };\n        Object.keys(options).forEach(function (key) {\n          if (typeof options[key] === 'undefined') {\n            options[key] =\n            /** @type {?} */\n            _this.defaults[key];\n          }\n        });\n        options.time_24hr = options.time24hr;\n        this.instance =\n        /** @type {?} */\n        flatpickr(this.elm.nativeElement, options);\n        this.setDisabledState(this.isDisabled);\n      }\n      /**\n       * @param {?} changes\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this2 = this;\n\n        if (this.instance) {\n          Object.keys(changes).forEach(function (inputKey) {\n            _this2.instance.set(\n            /** @type {?} */\n            inputKey,\n            /** @type {?} */\n            _this2[inputKey]);\n          });\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.instance.destroy();\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        var\n        /** @type {?} */\n        convertedValue = value;\n\n        if (this.convertModelValue && this.mode === 'range' && value) {\n          convertedValue = [value.from, value.to];\n        }\n\n        if (this.instance) {\n          this.instance.setDate(convertedValue);\n        } else {\n          // flatpickr hasn't been initialised yet, store the value for later use\n          this.initialValue = convertedValue;\n        }\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChangeFn = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouchedFn = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n\n        if (this.instance) {\n          if (this.isDisabled) {\n            this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n          } else {\n            this.renderer.removeAttribute(this.instance._input, 'disabled');\n          }\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"inputChanged\",\n      value: function inputChanged() {\n        var _this3 = this;\n\n        var\n        /** @type {?} */\n        value = this.elm.nativeElement.value;\n\n        if (this.convertModelValue && typeof value === 'string') {\n          switch (this.mode) {\n            case 'multiple':\n              var\n              /** @type {?} */\n              dates = value.split('; ').map(function (str) {\n                return _this3.instance.parseDate(str, _this3.instance.config.dateFormat, !_this3.instance.config.enableTime);\n              });\n              this.onChangeFn(dates);\n              break;\n\n            case 'range':\n              var _value$split$map = value.split(this.instance.l10n.rangeSeparator).map(function (str) {\n                return _this3.instance.parseDate(str, _this3.instance.config.dateFormat, !_this3.instance.config.enableTime);\n              }),\n                  _value$split$map2 = _slicedToArray(_value$split$map, 2),\n                  from = _value$split$map2[0],\n                  to = _value$split$map2[1];\n\n              this.onChangeFn({\n                from: from,\n                to: to\n              });\n              break;\n\n            case 'single':\n            default:\n              this.onChangeFn(this.instance.parseDate(value, this.instance.config.dateFormat, !this.instance.config.enableTime));\n          }\n        } else {\n          this.onChangeFn(value);\n        }\n      }\n    }]);\n\n    return FlatpickrDirective;\n  }();\n\n  FlatpickrDirective.ɵfac = function FlatpickrDirective_Factory(t) {\n    return new (t || FlatpickrDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FlatpickrDefaults), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  FlatpickrDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: FlatpickrDirective,\n    selectors: [[\"\", \"mwlFlatpickr\", \"\"]],\n    hostBindings: function FlatpickrDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function FlatpickrDirective_blur_HostBindingHandler() {\n          return ctx.onTouchedFn();\n        })(\"input\", function FlatpickrDirective_input_HostBindingHandler() {\n          return ctx.inputChanged();\n        });\n      }\n    },\n    inputs: {\n      altFormat: \"altFormat\",\n      altInput: \"altInput\",\n      altInputClass: \"altInputClass\",\n      allowInput: \"allowInput\",\n      appendTo: \"appendTo\",\n      ariaDateFormat: \"ariaDateFormat\",\n      clickOpens: \"clickOpens\",\n      dateFormat: \"dateFormat\",\n      defaultHour: \"defaultHour\",\n      defaultMinute: \"defaultMinute\",\n      defaultSeconds: \"defaultSeconds\",\n      disable: \"disable\",\n      disableMobile: \"disableMobile\",\n      enable: \"enable\",\n      enableTime: \"enableTime\",\n      enableSeconds: \"enableSeconds\",\n      formatDate: \"formatDate\",\n      hourIncrement: \"hourIncrement\",\n      inline: \"inline\",\n      maxDate: \"maxDate\",\n      minDate: \"minDate\",\n      minuteIncrement: \"minuteIncrement\",\n      mode: \"mode\",\n      nextArrow: \"nextArrow\",\n      noCalendar: \"noCalendar\",\n      now: \"now\",\n      parseDate: \"parseDate\",\n      prevArrow: \"prevArrow\",\n      shorthandCurrentMonth: \"shorthandCurrentMonth\",\n      showMonths: \"showMonths\",\n      static: \"static\",\n      time24hr: \"time24hr\",\n      weekNumbers: \"weekNumbers\",\n      getWeek: \"getWeek\",\n      wrap: \"wrap\",\n      plugins: \"plugins\",\n      locale: \"locale\",\n      convertModelValue: \"convertModelValue\"\n    },\n    outputs: {\n      flatpickrReady: \"flatpickrReady\",\n      flatpickrChange: \"flatpickrChange\",\n      flatpickrValueUpdate: \"flatpickrValueUpdate\",\n      flatpickrOpen: \"flatpickrOpen\",\n      flatpickrClose: \"flatpickrClose\",\n      flatpickrMonthChange: \"flatpickrMonthChange\",\n      flatpickrYearChange: \"flatpickrYearChange\",\n      flatpickrDayCreate: \"flatpickrDayCreate\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([FLATPICKR_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return FlatpickrDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nUSER_DEFAULTS = new InjectionToken('flatpickr defaults');\n/**\n * @param {?} userDefaults\n * @return {?}\n */\n\nfunction defaultsFactory(userDefaults) {\n  var\n  /** @type {?} */\n  defaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\nvar FlatpickrModule = /*@__PURE__*/function () {\n  var FlatpickrModule = /*#__PURE__*/function () {\n    function FlatpickrModule() {\n      _classCallCheck(this, FlatpickrModule);\n    }\n\n    _createClass(FlatpickrModule, null, [{\n      key: \"forRoot\",\n\n      /**\n       * @param {?=} userDefaults\n       * @return {?}\n       */\n      value: function forRoot() {\n        var userDefaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: FlatpickrModule,\n          providers: [{\n            provide: USER_DEFAULTS,\n            useValue: userDefaults\n          }, {\n            provide: FlatpickrDefaults,\n            useFactory: defaultsFactory,\n            deps: [USER_DEFAULTS]\n          }]\n        };\n      }\n    }]);\n\n    return FlatpickrModule;\n  }();\n\n  FlatpickrModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: FlatpickrModule\n  });\n  FlatpickrModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function FlatpickrModule_Factory(t) {\n      return new (t || FlatpickrModule)();\n    }\n  });\n  return FlatpickrModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FlatpickrModule, {\n    declarations: [FlatpickrDirective],\n    exports: [FlatpickrDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { FlatpickrDefaults, USER_DEFAULTS, defaultsFactory, FlatpickrModule, FLATPICKR_CONTROL_VALUE_ACCESSOR as ɵa, FlatpickrDirective as ɵb };","map":null,"metadata":{},"sourceType":"module"}