{"ast":null,"code":"import _classCallCheck from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/Manuel/Sistenet/Testing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport imagesLoadedMethod from 'imagesloaded';\nimport * as masonry from 'masonry-layout';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar Utilities = /*#__PURE__*/function () {\n  function Utilities() {\n    _classCallCheck(this, Utilities);\n  }\n\n  _createClass(Utilities, [{\n    key: \"newGuid\",\n\n    /**\r\n     * @return {?}\r\n     */\n    value: function newGuid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,\n      /**\r\n      * @param {?} c\r\n      * @return {?}\r\n      */\n      function (c) {\n        // tslint:disable-next-line:no-bitwise triple-equals\n\n        /** @type {?} */\n        var r = Math.random() * 16 | 0;\n        /** @type {?} */\n\n        var v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n  }]);\n\n  return Utilities;\n}();\n/** @type {?} */\n\n\nvar utilities = new Utilities();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nvar MasonryGalleryComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} renderer\r\n   */\n  function MasonryGalleryComponent(renderer) {\n    _classCallCheck(this, MasonryGalleryComponent);\n\n    this.renderer = renderer;\n    this.images = [];\n    this.width = 330;\n    this.gutter = 5;\n    this.verticalGutter = 5;\n    this.imageClasses = [];\n    this.clickImage = new EventEmitter();\n    this.removeComplete = new EventEmitter();\n    this.layoutComplete = new EventEmitter();\n    this.galleryGuid = utilities.newGuid();\n    this.mansonryItemSelectorClass = \"grid-item-\".concat(this.galleryGuid);\n    this.activeImages = [];\n    this.viewReady = false;\n  }\n  /**\r\n   * @param {?} changes\r\n   * @return {?}\r\n   */\n\n\n  _createClass(MasonryGalleryComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.images && changes.images.currentValue) {\n        if (!this.viewReady) {\n          // process images once we can\n          this.changesToProcess = changes;\n        } else {\n          this.processImages(changes);\n        }\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.msnry) {\n        this.msnry.destroy();\n      }\n    }\n    /**\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(image) {\n      this.clickImage.next(image);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.viewReady = true;\n      this.initMasonry(); // process images now\n\n      if (this.changesToProcess) {\n        this.processImages(this.changesToProcess);\n        this.changesToProcess = undefined;\n      }\n    }\n    /**\r\n     * @param {?} images\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addImages\",\n    value: function addImages(images) {\n      if (images && images.length > 0) {\n        this.addImagesToGallery(images);\n      }\n    }\n    /**\r\n     * @param {?} images\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeImages\",\n    value: function removeImages(images) {\n      var _this = this;\n\n      if (images && images.length > 0) {\n        images.forEach(\n        /**\r\n        * @param {?} image\r\n        * @return {?}\r\n        */\n        function (image) {\n          _this.removeImageFromGallery(image);\n        });\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"processImages\",\n    value: function processImages(changes) {\n      /** @type {?} */\n      var imagesToProcess = this.getAddedAndRemovesImages(changes); // add images to mansonry layout\n\n      this.addImages(imagesToProcess.addedImages); // removes images from layout\n\n      this.removeImages(imagesToProcess.removedImages);\n    }\n    /**\r\n     * @private\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getAddedAndRemovesImages\",\n    value: function getAddedAndRemovesImages(changes) {\n      /** @type {?} */\n      var addedImages = [];\n      /** @type {?} */\n\n      var removedImages = [];\n      /** @type {?} */\n\n      var newImagesValue =\n      /** @type {?} */\n      changes.images.currentValue;\n      /** @type {?} */\n\n      var oldImagesValue =\n      /** @type {?} */\n      changes.images.previousValue;\n\n      if (!oldImagesValue) {\n        // all images are new ones\n        addedImages = changes.images.currentValue;\n      } else {\n        // process added images\n        newImagesValue.forEach(\n        /**\r\n        * @param {?} newImage\r\n        * @return {?}\r\n        */\n        function (newImage) {\n          /** @type {?} */\n          var existingImage = oldImagesValue.find(\n          /**\r\n          * @param {?} m\r\n          * @return {?}\r\n          */\n          function (m) {\n            return m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase();\n          });\n          if (existingImage) ;else {\n            // image is new\n            addedImages.push(newImage);\n          }\n        }); // process removed images\n\n        oldImagesValue.forEach(\n        /**\r\n        * @param {?} oldImage\r\n        * @return {?}\r\n        */\n        function (oldImage) {\n          /** @type {?} */\n          var existingImage = newImagesValue.find(\n          /**\r\n          * @param {?} m\r\n          * @return {?}\r\n          */\n          function (m) {\n            return m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase();\n          });\n          if (existingImage) ;else {\n            // image is removed\n            removedImages.push(oldImage);\n          }\n        });\n      }\n\n      return {\n        addedImages: addedImages,\n        removedImages: removedImages\n      };\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"initMasonry\",\n    value: function initMasonry() {\n      this.grid = document.getElementById(this.galleryGuid); // remove all existing data from grid\n\n      this.grid.innerHTML = '';\n\n      if (!this.grid) {\n        throw Error(\"Could not init mansory due to non existing elem with id '\".concat(this.galleryGuid, \"'\"));\n      }\n\n      this.msnry = new masonry(this.grid, {\n        // options...\n        itemSelector: '.' + this.mansonryItemSelectorClass,\n        columnWidth: this.width,\n        gutter: this.gutter\n      });\n      /** @type {?} */\n\n      var that = this;\n      this.msnry.on('layoutComplete',\n      /**\r\n      * @param {?} items\r\n      * @return {?}\r\n      */\n      function (items) {\n        that.layoutComplete.next(items);\n      });\n      this.msnry.on('removeComplete',\n      /**\r\n      * @param {?} items\r\n      * @return {?}\r\n      */\n      function (items) {\n        that.removeComplete.next(items);\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {?} image\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeImageFromGallery\",\n    value: function removeImageFromGallery(image) {\n      // get image guid\n\n      /** @type {?} */\n      var imageIdResult = this.activeImages.find(\n      /**\r\n      * @param {?} m\r\n      * @return {?}\r\n      */\n      function (m) {\n        return m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase();\n      });\n\n      if (!imageIdResult) {\n        // image was not found, this is probably an error\n        console.warn(\"Image with url '\".concat(image.imageUrl, \"' was not found. If you are adding images, make sure to 'replace' the images array with a new one\\n                so that detection change can be executed instead of just adding an image to array\\n                (which doesn't fire change detection on array property)\"));\n        return;\n      } // find image based on its id\n\n      /** @type {?} */\n\n\n      var imageElem = document.getElementById(imageIdResult.id);\n\n      if (!imageElem) {\n        // image was not found in DOM\n        console.warn(\"Image with id '{\".concat(imageIdResult.id, \"}' was not found in DOM. Have you manipulated the DOM in some way?\"));\n        return;\n      } // remove image from gallery\n\n\n      this.msnry.remove(imageElem); // refresh layout\n\n      this.msnry.layout(); // remove image from array\n\n      for (var i = 0; i < this.activeImages.length; i++) {\n        /** @type {?} */\n        var idWithImage = this.activeImages[i];\n\n        if (idWithImage.image.imageUrl.toLowerCase() === imageIdResult.image.imageUrl.toLowerCase()) {\n          this.activeImages.splice(i, 1);\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} images\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addImagesToGallery\",\n    value: function addImagesToGallery(images) {\n      var _this2 = this;\n\n      if (!this.grid) {\n        throw Error('Grid element is not yet ready, are you trying to add image too soon?');\n      }\n      /** @type {?} */\n\n\n      var imagesWrapper = this.renderer.createElement('span');\n      images.forEach(\n      /**\r\n      * @param {?} image\r\n      * @return {?}\r\n      */\n      function (image) {\n        // generate unique image id\n\n        /** @type {?} */\n        var imageId = _this2.getImageId(); // create element\n\n        /** @type {?} */\n\n\n        var imageElem = _this2.renderer.createElement('img');\n\n        imageElem.setAttribute('id', imageId);\n        imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\n        imageElem.setAttribute('src', image.imageUrl); // note - images are hidden by default and should be shown only after they are loaded\n\n        imageElem.setAttribute('style', \"display: none; width: \".concat(_this2.width, \"px; margin-bottom: \").concat(_this2.verticalGutter, \"px\"));\n        imageElem.className = _this2.getImageClass();\n        imageElem.addEventListener('click',\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          _this2.handleClick(image);\n        }); // store guid with this image\n\n        _this2.activeImages.push({\n          id: imageId,\n          image: image\n        }); // add to dom and mansory & refresh layout\n\n\n        _this2.renderer.appendChild(imagesWrapper, imageElem);\n      }); // add html to dom\n\n      this.renderer.appendChild(this.grid, imagesWrapper); // add images once they are loaded\n\n      /** @type {?} */\n\n      var imgLoad = imagesLoadedMethod(imagesWrapper);\n      imgLoad.on('progress',\n      /**\r\n      * @param {?} instance\r\n      * @param {?} image\r\n      * @return {?}\r\n      */\n      function (instance, image) {\n        if (image.isLoaded) {\n          _this2.renderer.appendChild(_this2.grid, image.img); // unhide image\n\n\n          _this2.renderer.setStyle(image.img, 'display', 'block');\n\n          _this2.msnry.appended(image.img);\n\n          _this2.msnry.reloadItems();\n        }\n      });\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getImageClass\",\n    value: function getImageClass() {\n      /** @type {?} */\n      var className = this.mansonryItemSelectorClass;\n\n      if (this.imageClasses && this.imageClasses.length > 0) {\n        /** @type {?} */\n        var customClass = this.imageClasses.join(' ');\n        className += ' ' + customClass;\n      }\n\n      return className;\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getImageId\",\n    value: function getImageId() {\n      return this.galleryGuid + '_' + utilities.newGuid();\n    }\n  }]);\n\n  return MasonryGalleryComponent;\n}();\n\nMasonryGalleryComponent.Éµfac = function MasonryGalleryComponent_Factory(t) {\n  return new (t || MasonryGalleryComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2));\n};\n\nMasonryGalleryComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: MasonryGalleryComponent,\n  selectors: [[\"ngx-masonry-gallery\"]],\n  inputs: {\n    images: \"images\",\n    width: \"width\",\n    gutter: \"gutter\",\n    verticalGutter: \"verticalGutter\",\n    imageClasses: \"imageClasses\"\n  },\n  outputs: {\n    clickImage: \"clickImage\",\n    removeComplete: \"removeComplete\",\n    layoutComplete: \"layoutComplete\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"id\"]],\n  template: function MasonryGalleryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      Éµngcc0.ÉµÉµproperty(\"id\", ctx.galleryGuid);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMasonryGalleryComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }];\n};\n\nMasonryGalleryComponent.propDecorators = {\n  images: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  gutter: [{\n    type: Input\n  }],\n  verticalGutter: [{\n    type: Input\n  }],\n  imageClasses: [{\n    type: Input\n  }],\n  clickImage: [{\n    type: Output\n  }],\n  removeComplete: [{\n    type: Output\n  }],\n  layoutComplete: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MasonryGalleryComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'ngx-masonry-gallery',\n      template: '<div [id]=\"galleryGuid\"></div>'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.Renderer2\n    }];\n  }, {\n    images: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    gutter: [{\n      type: Input\n    }],\n    verticalGutter: [{\n      type: Input\n    }],\n    imageClasses: [{\n      type: Input\n    }],\n    clickImage: [{\n      type: Output\n    }],\n    removeComplete: [{\n      type: Output\n    }],\n    layoutComplete: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar MasonryGalleryModule = function MasonryGalleryModule() {\n  _classCallCheck(this, MasonryGalleryModule);\n};\n\nMasonryGalleryModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: MasonryGalleryModule\n});\nMasonryGalleryModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function MasonryGalleryModule_Factory(t) {\n    return new (t || MasonryGalleryModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(MasonryGalleryModule, {\n    declarations: function declarations() {\n      return [MasonryGalleryComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [MasonryGalleryComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MasonryGalleryModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [MasonryGalleryComponent],\n      exports: [MasonryGalleryComponent]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar IMasonryGalleryImage = function IMasonryGalleryImage() {\n  _classCallCheck(this, IMasonryGalleryImage);\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { IMasonryGalleryImage, MasonryGalleryComponent, MasonryGalleryModule };","map":{"version":3,"sources":["ngx-masonry-gallery/lib/utilities.ts","ngx-masonry-gallery/lib/masonry-gallery.component.ts","ngx-masonry-gallery/lib/masonry-gallery.module.ts","ngx-masonry-gallery/lib/masonry-gallery-models.ts"],"names":[],"mappings":"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","sourcesContent":["export class Utilities {\r\n    newGuid() {\r\n       return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n           // tslint:disable-next-line:no-bitwise triple-equals\r\n           const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n           return v.toString(16);\r\n       });\r\n   }\r\n}\r\n\r\nexport let utilities = new Utilities();\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport imagesLoadedMethod from 'imagesloaded';\r\nimport * as masonry from 'masonry-layout';\r\n\r\nimport { IMasonryGalleryImage } from './masonry-gallery-models';\r\nimport { utilities } from './utilities';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-masonry-gallery',\r\n    template: '<div [id]=\"galleryGuid\"></div>'\r\n})\r\nexport class MasonryGalleryComponent\r\n    implements AfterViewInit, OnDestroy, OnChanges {\r\n    @Input() images: IMasonryGalleryImage[] = [];\r\n    @Input() width: number = 330;\r\n    @Input() gutter: number = 5;\r\n    @Input() verticalGutter: number = 5;\r\n    @Input() imageClasses: string[] = [];\r\n\r\n    @Output() clickImage = new EventEmitter<IMasonryGalleryImage>();\r\n    @Output() removeComplete = new EventEmitter<any[]>();\r\n    @Output() layoutComplete = new EventEmitter<any[]>();\r\n\r\n    public readonly galleryGuid: string = utilities.newGuid();\r\n\r\n    private readonly mansonryItemSelectorClass = `grid-item-${this.galleryGuid}`;\r\n    private readonly activeImages: ActiveImage[] = [];\r\n\r\n    private msnry?: any;\r\n    private grid?: any;\r\n    private changesToProcess?: SimpleChanges;\r\n    private viewReady: boolean = false;\r\n\r\n    constructor(private renderer: Renderer2) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.images && changes.images.currentValue) {\r\n            if (!this.viewReady) {\r\n                // process images once we can\r\n                this.changesToProcess = changes;\r\n            } else {\r\n                this.processImages(changes);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.msnry) {\r\n            this.msnry.destroy();\r\n        }\r\n    }\r\n\r\n    handleClick(image: IMasonryGalleryImage): void {\r\n        this.clickImage.next(image);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.viewReady = true;\r\n        this.initMasonry();\r\n\r\n        // process images now\r\n        if (this.changesToProcess) {\r\n            this.processImages(this.changesToProcess);\r\n            this.changesToProcess = undefined;\r\n        }\r\n    }\r\n\r\n    addImages(images: IMasonryGalleryImage[]): void {\r\n        if (images && images.length > 0) {\r\n            this.addImagesToGallery(images);\r\n        }\r\n    }\r\n\r\n    removeImages(images: IMasonryGalleryImage[]): void {\r\n        if (images && images.length > 0) {\r\n            images.forEach(image => {\r\n                this.removeImageFromGallery(image);\r\n            });\r\n        }\r\n    }\r\n\r\n    private processImages(changes: SimpleChanges): void {\r\n        const imagesToProcess = this.getAddedAndRemovesImages(changes);\r\n\r\n        // add images to mansonry layout\r\n        this.addImages(imagesToProcess.addedImages);\r\n\r\n        // removes images from layout\r\n        this.removeImages(imagesToProcess.removedImages);\r\n    }\r\n\r\n    private getAddedAndRemovesImages(\r\n        changes: SimpleChanges\r\n    ): {\r\n            addedImages: IMasonryGalleryImage[];\r\n            removedImages: IMasonryGalleryImage[];\r\n        } {\r\n        let addedImages: IMasonryGalleryImage[] = [];\r\n        const removedImages: IMasonryGalleryImage[] = [];\r\n\r\n        const newImagesValue = changes.images\r\n            .currentValue as IMasonryGalleryImage[];\r\n        const oldImagesValue = changes.images\r\n            .previousValue as IMasonryGalleryImage[];\r\n\r\n        if (!oldImagesValue) {\r\n            // all images are new ones\r\n            addedImages = changes.images.currentValue;\r\n        } else {\r\n            // process added images\r\n            newImagesValue.forEach(newImage => {\r\n                const existingImage = oldImagesValue.find(\r\n                    m => m.imageUrl.toLowerCase() === newImage.imageUrl.toLowerCase()\r\n                );\r\n\r\n                if (existingImage) {\r\n                    // image was in previous value && is in new, do nothing\r\n                } else {\r\n                    // image is new\r\n                    addedImages.push(newImage);\r\n                }\r\n            });\r\n\r\n            // process removed images\r\n            oldImagesValue.forEach(oldImage => {\r\n                const existingImage = newImagesValue.find(\r\n                    m => m.imageUrl.toLowerCase() === oldImage.imageUrl.toLowerCase()\r\n                );\r\n\r\n                if (existingImage) {\r\n                    // image was in previous value && is in new, do nothing\r\n                } else {\r\n                    // image is removed\r\n                    removedImages.push(oldImage);\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            addedImages: addedImages,\r\n            removedImages: removedImages\r\n        };\r\n    }\r\n\r\n    private initMasonry(): void {\r\n        this.grid = document.getElementById(this.galleryGuid);\r\n\r\n        // remove all existing data from grid\r\n        this.grid.innerHTML = '';\r\n\r\n        if (!this.grid) {\r\n            throw Error(\r\n                `Could not init mansory due to non existing elem with id '${\r\n                this.galleryGuid\r\n                }'`\r\n            );\r\n        }\r\n\r\n        this.msnry = new masonry(this.grid, {\r\n            // options...\r\n            itemSelector: '.' + this.mansonryItemSelectorClass,\r\n            columnWidth: this.width,\r\n            gutter: this.gutter,\r\n        });\r\n\r\n        const that = this;\r\n\r\n        this.msnry.on('layoutComplete', function (items) {\r\n            that.layoutComplete.next(items);\r\n        });\r\n\r\n        this.msnry.on('removeComplete', function (items) {\r\n            that.removeComplete.next(items);\r\n        });\r\n    }\r\n\r\n    private removeImageFromGallery(image: IMasonryGalleryImage): void {\r\n        // get image guid\r\n        const imageIdResult = this.activeImages.find(\r\n            m => m.image.imageUrl.toLowerCase() === image.imageUrl.toLowerCase()\r\n        );\r\n\r\n        if (!imageIdResult) {\r\n            // image was not found, this is probably an error\r\n            console.warn(\r\n                `Image with url '${\r\n                image.imageUrl\r\n                }' was not found. If you are adding images, make sure to 'replace' the images array with a new one\r\n                so that detection change can be executed instead of just adding an image to array\r\n                (which doesn't fire change detection on array property)`\r\n            );\r\n            return;\r\n        }\r\n\r\n        // find image based on its id\r\n        const imageElem = document.getElementById(imageIdResult.id);\r\n\r\n        if (!imageElem) {\r\n            // image was not found in DOM\r\n            console.warn(\r\n                `Image with id '{${\r\n                imageIdResult.id\r\n                }}' was not found in DOM. Have you manipulated the DOM in some way?`\r\n            );\r\n            return;\r\n        }\r\n\r\n        // remove image from gallery\r\n        this.msnry.remove(imageElem);\r\n\r\n        // refresh layout\r\n        this.msnry.layout();\r\n\r\n        // remove image from array\r\n        for (let i = 0; i < this.activeImages.length; i++) {\r\n            const idWithImage = this.activeImages[i];\r\n            if (\r\n                idWithImage.image.imageUrl.toLowerCase() ===\r\n                imageIdResult.image.imageUrl.toLowerCase()\r\n            ) {\r\n                this.activeImages.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addImagesToGallery(images: IMasonryGalleryImage[]): void {\r\n        if (!this.grid) {\r\n            throw Error(\r\n                'Grid element is not yet ready, are you trying to add image too soon?'\r\n            );\r\n        }\r\n\r\n        const imagesWrapper = this.renderer.createElement('span');\r\n\r\n        images.forEach(image => {\r\n            // generate unique image id\r\n            const imageId = this.getImageId();\r\n\r\n            // create element\r\n            const imageElem = this.renderer.createElement('img');\r\n            imageElem.setAttribute('id', imageId);\r\n            imageElem.setAttribute('alt', image.alt ? image.alt : 'no description');\r\n            imageElem.setAttribute('src', image.imageUrl);\r\n            // note - images are hidden by default and should be shown only after they are loaded\r\n            imageElem.setAttribute(\r\n                'style',\r\n                `display: none; width: ${this.width}px; margin-bottom: ${\r\n                this.verticalGutter\r\n                }px`\r\n            );\r\n            imageElem.className = this.getImageClass();\r\n            imageElem.addEventListener('click', () => {\r\n                this.handleClick(image);\r\n            });\r\n\r\n            // store guid with this image\r\n            this.activeImages.push({\r\n                id: imageId,\r\n                image: image\r\n            });\r\n\r\n            // add to dom and mansory & refresh layout\r\n            this.renderer.appendChild(imagesWrapper, imageElem);\r\n        });\r\n\r\n        // add html to dom\r\n        this.renderer.appendChild(this.grid, imagesWrapper);\r\n\r\n        // add images once they are loaded\r\n        const imgLoad = imagesLoadedMethod(imagesWrapper);\r\n        imgLoad.on('progress', (instance, image) => {\r\n            if (image.isLoaded) {\r\n                this.renderer.appendChild(this.grid, image.img);\r\n                // unhide image\r\n                this.renderer.setStyle(image.img, 'display', 'block');\r\n                this.msnry.appended(image.img);\r\n                this.msnry.reloadItems();\r\n            }\r\n        });\r\n    }\r\n\r\n    private getImageClass(): string {\r\n        let className = this.mansonryItemSelectorClass;\r\n\r\n        if (this.imageClasses && this.imageClasses.length > 0) {\r\n            const customClass = this.imageClasses.join(' ');\r\n\r\n            className += ' ' + customClass;\r\n        }\r\n\r\n        return className;\r\n    }\r\n\r\n    private getImageId(): string {\r\n        return this.galleryGuid + '_' + utilities.newGuid();\r\n    }\r\n}\r\n\r\ninterface ActiveImage {\r\n    id: string;\r\n    image: IMasonryGalleryImage;\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { MasonryGalleryComponent } from './masonry-gallery.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n    exports: [\r\n        MasonryGalleryComponent,\r\n    ],\r\n})\r\nexport class MasonryGalleryModule { }\r\n","export class IMasonryGalleryImage {\r\n    public imageUrl: string;\r\n    public alt?: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}