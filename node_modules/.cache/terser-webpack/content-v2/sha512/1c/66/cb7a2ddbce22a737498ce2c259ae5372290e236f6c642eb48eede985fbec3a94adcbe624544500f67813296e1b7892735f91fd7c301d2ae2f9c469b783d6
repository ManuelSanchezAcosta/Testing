{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{LSHg:function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return ye}),n.d(t,\"b\",function(){return oe}),n.d(t,\"c\",function(){return se}),n.d(t,\"d\",function(){return ue}),n.d(t,\"e\",function(){return pe}),n.d(t,\"f\",function(){return ce}),n.d(t,\"g\",function(){return A}),n.d(t,\"h\",function(){return T});var i=n(\"Ji7U\"),r=n(\"LK+K\"),o=n(\"ODXe\"),a=n(\"KQm4\"),s=n(\"o0o1\"),u=n.n(s),l=n(\"vuIU\"),c=n(\"1OyB\"),h=n(\"S5nb\"),p=n(\"8Y7J\"),d=n(\"HDdC\"),f=n(\"2Vo4\"),g=n(\"Cfvw\"),b=n(\"PqYM\"),v=(n(\"XNiG\"),n(\"DH7j\")),_=n(\"n6bG\"),y=n(\"lJxs\");function m(e,t,n){return n?m(e,t).pipe(Object(y.a)(function(e){return Object(v.a)(e)?n.apply(void 0,Object(a.a)(e)):n(e)})):new d.a(function(n){var i,r=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return n.next(1===t.length?t[0]:t)};try{i=e(r)}catch(o){return void n.error(o)}if(Object(_.a)(t))return function(){return t(r,i)}})}var k=n(\"VRyK\"),O=n(\"jtHE\");n(\"ReuC\"),n(\"foSv\"),n(\"quSY\"),n(\"8Qeq\"),n(\"z+Ro\"),n(\"LRne\"),n(\"z6cu\");var C=n(\"5+tZ\"),w=n(\"zx2A\"),M=function(){function e(t){Object(c.a)(this,e),this.notifier=t}return Object(l.a)(e,[{key:\"call\",value:function(e,t){var n=new I(e),i=t.subscribe(n);return i.add(Object(w.c)(this.notifier,new w.a(n))),i}}]),e}(),I=function(e){Object(i.a)(n,e);var t=Object(r.a)(n);function n(){var e;return Object(c.a)(this,n),(e=t.apply(this,arguments)).hasValue=!1,e}return Object(l.a)(n,[{key:\"_next\",value:function(e){this.value=e,this.hasValue=!0}},{key:\"notifyNext\",value:function(){this.emitValue()}},{key:\"notifyComplete\",value:function(){this.emitValue()}},{key:\"emitValue\",value:function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))}}]),n}(w.b),j=n(\"eIep\");n(\"/uUt\"),n(\"1G5W\");var P=n(\"JX91\"),W=n(\"7o/Q\");function S(e){return function(t){return t.lift(new D(e))}}var z,D=function(){function e(t){Object(c.a)(this,e),this.total=t}return Object(l.a)(e,[{key:\"call\",value:function(e,t){return t.subscribe(new x(e,this.total))}}]),e}(),x=function(e){Object(i.a)(n,e);var t=Object(r.a)(n);function n(e,i){var r;return Object(c.a)(this,n),(r=t.call(this,e)).total=i,r.count=0,r}return Object(l.a)(n,[{key:\"_next\",value:function(e){++this.count>this.total&&this.destination.next(e)}}]),n}(W.a),B=(n(\"oB13\"),n(\"SVse\")),E=[\"*\"],T=function(){var e=function e(){Object(c.a)(this,e)};return e.\\u0275fac=function(t){return new(t||e)},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e}(),A=function(){var e=function(){function e(t,n){var i=this;Object(c.a)(this,e),this._loader=t,this._zone=n,this._map=new Promise(function(e){i._mapResolver=e})}return Object(l.a)(e,[{key:\"createMap\",value:function(e,t){var n=this;return this._zone.runOutsideAngular(function(){return n._loader.load().then(function(){var i=new google.maps.Map(e,t);n._mapResolver(i)})})}},{key:\"setMapOptions\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){t._map.then(function(t){t.setOptions(e)})})}},{key:\"createMarker\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this._zone.runOutsideAngular(function(){return e._map.then(function(e){return n&&(t.map=e),new google.maps.Marker(t)})})}},{key:\"createInfoWindow\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(){return new google.maps.InfoWindow(e)})})}},{key:\"createCircle\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){return\"string\"==typeof e.strokePosition&&(e.strokePosition=google.maps.StrokePosition[e.strokePosition]),e.map=t,new google.maps.Circle(e)})})}},{key:\"createRectangle\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){return e.map=t,new google.maps.Rectangle(e)})})}},{key:\"createPolyline\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t.getNativeMap().then(function(t){var n=new google.maps.Polyline(e);return n.setMap(t),n})})}},{key:\"createPolygon\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t.getNativeMap().then(function(t){var n=new google.maps.Polygon(e);return n.setMap(t),n})})}},{key:\"createDataLayer\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){var n=new google.maps.Data(e);return n.setMap(t),n})})}},{key:\"createTransitLayer\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){var n=new google.maps.TransitLayer;return n.setMap(e.visible?t:null),n})})}},{key:\"createBicyclingLayer\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){var n=new google.maps.BicyclingLayer;return n.setMap(e.visible?t:null),n})})}},{key:\"containsLocation\",value:function(e,t){return google.maps.geometry.poly.containsLocation(e,t)}},{key:\"subscribeToMapEvent\",value:function(e){var t=this;return new d.a(function(n){t._map.then(function(i){i.addListener(e,function(e){t._zone.run(function(){return n.next(e)})})})})}},{key:\"clearInstanceListeners\",value:function(){var e=this;return this._zone.runOutsideAngular(function(){e._map.then(function(e){google.maps.event.clearInstanceListeners(e)})})}},{key:\"setCenter\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){return t.setCenter(e)})})}},{key:\"getZoom\",value:function(){var e=this;return this._zone.runOutsideAngular(function(){return e._map.then(function(e){return e.getZoom()})})}},{key:\"getBounds\",value:function(){var e=this;return this._zone.runOutsideAngular(function(){return e._map.then(function(e){return e.getBounds()})})}},{key:\"getMapTypeId\",value:function(){var e=this;return this._zone.runOutsideAngular(function(){return e._map.then(function(e){return e.getMapTypeId()})})}},{key:\"setZoom\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){return t.setZoom(e)})})}},{key:\"getCenter\",value:function(){var e=this;return this._zone.runOutsideAngular(function(){return e._map.then(function(e){return e.getCenter()})})}},{key:\"panTo\",value:function(e){var t=this;return this._zone.runOutsideAngular(function(){return t._map.then(function(t){return t.panTo(e)})})}},{key:\"panBy\",value:function(e,t){var n=this;return this._zone.runOutsideAngular(function(){return n._map.then(function(n){return n.panBy(e,t)})})}},{key:\"fitBounds\",value:function(e,t){var n=this;return this._zone.runOutsideAngular(function(){return n._map.then(function(n){return n.fitBounds(e,t)})})}},{key:\"panToBounds\",value:function(e,t){var n=this;return this._zone.runOutsideAngular(function(){return n._map.then(function(n){return n.panToBounds(e,t)})})}},{key:\"getNativeMap\",value:function(){return this._map}},{key:\"triggerMapEvent\",value:function(e){return this._map.then(function(t){return google.maps.event.trigger(t,e)})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(T),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[T,p.B])],e)}(),L=function(){var e=function(){function e(t){Object(c.a)(this,e),this._wrapper=t,this._layers=new Map}return Object(l.a)(e,[{key:\"addTransitLayer\",value:function(e,t){var n=this._wrapper.createTransitLayer(t);this._layers.set(e,n)}},{key:\"addBicyclingLayer\",value:function(e,t){var n=this._wrapper.createBicyclingLayer(t);this._layers.set(e,n)}},{key:\"deleteLayer\",value:function(e){var t=this;return this._layers.get(e).then(function(n){n.setMap(null),t._layers.delete(e)})}},{key:\"toggleLayerVisibility\",value:function(e,t){var n=this;return this._layers.get(e).then(function(e){return t.visible?n._wrapper.getNativeMap().then(function(t){e.setMap(t)}):void e.setMap(null)})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A])],e)}(),R=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._apiWrapper=t,this._zone=n,this._circles=new Map}return Object(l.a)(e,[{key:\"addCircle\",value:function(e){this._circles.set(e,this._apiWrapper.createCircle({center:{lat:e.latitude,lng:e.longitude},clickable:e.clickable,draggable:e.draggable,editable:e.editable,fillColor:e.fillColor,fillOpacity:e.fillOpacity,radius:e.radius,strokeColor:e.strokeColor,strokeOpacity:e.strokeOpacity,strokePosition:e.strokePosition,strokeWeight:e.strokeWeight,visible:e.visible,zIndex:e.zIndex}))}},{key:\"removeCircle\",value:function(e){var t=this;return this._circles.get(e).then(function(n){n.setMap(null),t._circles.delete(e)})}},{key:\"setOptions\",value:function(e,t){return this._circles.get(e).then(function(e){\"string\"==typeof t.strokePosition&&(t.strokePosition=google.maps.StrokePosition[t.strokePosition]),e.setOptions(t)})}},{key:\"getBounds\",value:function(e){return this._circles.get(e).then(function(e){return e.getBounds()})}},{key:\"getCenter\",value:function(e){return this._circles.get(e).then(function(e){return e.getCenter()})}},{key:\"getRadius\",value:function(e){return this._circles.get(e).then(function(e){return e.getRadius()})}},{key:\"setCenter\",value:function(e){return this._circles.get(e).then(function(t){return t.setCenter({lat:e.latitude,lng:e.longitude})})}},{key:\"setEditable\",value:function(e){return this._circles.get(e).then(function(t){return t.setEditable(e.editable)})}},{key:\"setDraggable\",value:function(e){return this._circles.get(e).then(function(t){return t.setDraggable(e.draggable)})}},{key:\"setVisible\",value:function(e){return this._circles.get(e).then(function(t){return t.setVisible(e.visible)})}},{key:\"setRadius\",value:function(e){return this._circles.get(e).then(function(t){return t.setRadius(e.radius)})}},{key:\"getNativeCircle\",value:function(e){return this._circles.get(e)}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){var r=null;return n._circles.get(t).then(function(t){r=t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})}),function(){null!==r&&r.remove()}})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),V=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._wrapper=t,this._zone=n,this._layers=new Map}return Object(l.a)(e,[{key:\"addDataLayer\",value:function(e){var t=this,n=this._wrapper.createDataLayer({style:e.style}).then(function(n){return e.geoJson&&t.getDataFeatures(n,e.geoJson).then(function(e){return n.features=e}),n});this._layers.set(e,n)}},{key:\"deleteDataLayer\",value:function(e){var t=this;this._layers.get(e).then(function(n){n.setMap(null),t._layers.delete(e)})}},{key:\"updateGeoJson\",value:function(e,t){var n=this;this._layers.get(e).then(function(e){e.forEach(function(t){e.remove(t);var n=e.features.indexOf(t,0);n>-1&&e.features.splice(n,1)}),n.getDataFeatures(e,t).then(function(t){return e.features=t})})}},{key:\"setDataOptions\",value:function(e,t){this._layers.get(e).then(function(e){e.setControlPosition(t.controlPosition),e.setControls(t.controls),e.setDrawingMode(t.drawingMode),e.setStyle(t.style)})}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._layers.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}},{key:\"getDataFeatures\",value:function(e,t){return new Promise(function(n,i){if(\"object\"==typeof t)try{n(e.addGeoJson(t))}catch(r){i(r)}else\"string\"==typeof t?e.loadGeoJson(t,null,n):i(\"Impossible to extract features from geoJson: wrong argument type\")})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),N=function e(){Object(c.a)(this,e)},Z=function(){var e=function(){function e(t){var n,i,r=this;Object(c.a)(this,e),this._boundsChangeSampleTime$=new f.a(200),this._includeInBounds$=new f.a(new Map),this.bounds$=Object(g.a)(t.load()).pipe(Object(C.a)(function(){return r._includeInBounds$}),(n=this._boundsChangeSampleTime$.pipe(Object(j.a)(function(e){return Object(b.a)(0,e)})),function(e){return e.lift(new M(n))}),Object(y.a)(function(e){return r._generateBounds(e)}),(1,i={bufferSize:1,windowTime:undefined,refCount:!1,scheduler:undefined},function(e){return e.lift(function(e){var t,n,i=e.bufferSize,r=void 0===i?Number.POSITIVE_INFINITY:i,o=e.windowTime,a=void 0===o?Number.POSITIVE_INFINITY:o,s=e.refCount,u=e.scheduler,l=0,c=!1,h=!1;return function(e){var i;l++,!t||c?(c=!1,t=new O.a(r,a,u),i=t.subscribe(this),n=e.subscribe({next:function(e){t.next(e)},error:function(e){c=!0,t.error(e)},complete:function(){h=!0,n=void 0,t.complete()}})):i=t.subscribe(this),this.add(function(){l--,i.unsubscribe(),n&&!h&&s&&0===l&&(n.unsubscribe(),n=void 0,t=void 0)})}}(i))}))}return Object(l.a)(e,[{key:\"_generateBounds\",value:function(e){var t=new google.maps.LatLngBounds;return e.forEach(function(e){return t.extend(e)}),t}},{key:\"addToBounds\",value:function(e){var t=this._createIdentifier(e);if(!this._includeInBounds$.value.has(t)){var n=this._includeInBounds$.value;n.set(t,e),this._includeInBounds$.next(n)}}},{key:\"removeFromBounds\",value:function(e){var t=this._includeInBounds$.value;t.delete(this._createIdentifier(e)),this._includeInBounds$.next(t)}},{key:\"changeFitBoundsChangeSampleTime\",value:function(e){this._boundsChangeSampleTime$.next(e)}},{key:\"getBounds$\",value:function(){return this.bounds$}},{key:\"_createIdentifier\",value:function(e){return\"\".concat(e.lat,\"+\").concat(e.lng)}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(T))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[T])],e)}(),U=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._mapsWrapper=t,this._zone=n,this._markers=new Map}return Object(l.a)(e,[{key:\"convertAnimation\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(null!==e){t.next=4;break}return t.abrupt(\"return\",null);case 4:return t.abrupt(\"return\",this._mapsWrapper.getNativeMap().then(function(){return google.maps.Animation[e]}));case 5:case\"end\":return t.stop()}},t,this)}))}},{key:\"deleteMarker\",value:function(e){var t=this,n=this._markers.get(e);return null==n?Promise.resolve():n.then(function(n){return t._zone.run(function(){n.setMap(null),t._markers.delete(e)})})}},{key:\"updateMarkerPosition\",value:function(e){return this._markers.get(e).then(function(t){return t.setPosition({lat:e.latitude,lng:e.longitude})})}},{key:\"updateTitle\",value:function(e){return this._markers.get(e).then(function(t){return t.setTitle(e.title)})}},{key:\"updateLabel\",value:function(e){return this._markers.get(e).then(function(t){t.setLabel(e.label)})}},{key:\"updateDraggable\",value:function(e){return this._markers.get(e).then(function(t){return t.setDraggable(e.draggable)})}},{key:\"updateIcon\",value:function(e){return this._markers.get(e).then(function(t){return t.setIcon(e.iconUrl)})}},{key:\"updateOpacity\",value:function(e){return this._markers.get(e).then(function(t){return t.setOpacity(e.opacity)})}},{key:\"updateVisible\",value:function(e){return this._markers.get(e).then(function(t){return t.setVisible(e.visible)})}},{key:\"updateZIndex\",value:function(e){return this._markers.get(e).then(function(t){return t.setZIndex(e.zIndex)})}},{key:\"updateClickable\",value:function(e){return this._markers.get(e).then(function(t){return t.setClickable(e.clickable)})}},{key:\"updateAnimation\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._markers.get(e);case 2:return t.t0=t.sent,t.next=6,this.convertAnimation(e.animation);case 6:t.t1=t.sent,t.t0.setAnimation.call(t.t0,t.t1);case 8:case\"end\":return t.stop()}},t,this)}))}},{key:\"addMarker\",value:function(e){var t=this,n=new Promise(function(n){return Object(h.__awaiter)(t,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=this._mapsWrapper,t.t1={lat:e.latitude,lng:e.longitude},t.t2=e.label,t.t3=e.draggable,t.t4=e.iconUrl,t.t5=e.opacity,t.t6=e.visible,t.t7=e.zIndex,t.t8=e.title,t.t9=e.clickable,t.next=12,this.convertAnimation(e.animation);case 12:return t.t10=t.sent,t.t11={position:t.t1,label:t.t2,draggable:t.t3,icon:t.t4,opacity:t.t5,visible:t.t6,zIndex:t.t7,title:t.t8,clickable:t.t9,animation:t.t10},t.abrupt(\"return\",t.t0.createMarker.call(t.t0,t.t11).then(n));case 15:case\"end\":return t.stop()}},t,this)}))});this._markers.set(e,n)}},{key:\"getNativeMarker\",value:function(e){return this._markers.get(e)}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._markers.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),q=function(){var e=function(){function e(t,n,i){Object(c.a)(this,e),this._mapsWrapper=t,this._zone=n,this._markerManager=i,this._infoWindows=new Map}return Object(l.a)(e,[{key:\"deleteInfoWindow\",value:function(e){var t=this,n=this._infoWindows.get(e);return null==n?Promise.resolve():n.then(function(n){return t._zone.run(function(){n.close(),t._infoWindows.delete(e)})})}},{key:\"setPosition\",value:function(e){return this._infoWindows.get(e).then(function(t){return t.setPosition({lat:e.latitude,lng:e.longitude})})}},{key:\"setZIndex\",value:function(e){return this._infoWindows.get(e).then(function(t){return t.setZIndex(e.zIndex)})}},{key:\"open\",value:function(e){var t=this;return this._infoWindows.get(e).then(function(n){return null!=e.hostMarker?t._markerManager.getNativeMarker(e.hostMarker).then(function(e){return t._mapsWrapper.getNativeMap().then(function(t){return n.open(t,e)})}):t._mapsWrapper.getNativeMap().then(function(e){return n.open(e)})})}},{key:\"close\",value:function(e){return this._infoWindows.get(e).then(function(e){return e.close()})}},{key:\"setOptions\",value:function(e,t){return this._infoWindows.get(e).then(function(e){return e.setOptions(t)})}},{key:\"addInfoWindow\",value:function(e){var t={content:e.content,maxWidth:e.maxWidth,zIndex:e.zIndex,disableAutoPan:e.disableAutoPan};\"number\"==typeof e.latitude&&\"number\"==typeof e.longitude&&(t.position={lat:e.latitude,lng:e.longitude});var n=this._mapsWrapper.createInfoWindow(t);this._infoWindows.set(e,n)}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._infoWindows.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B),p.fc(U))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B,U])],e)}(),F=0,$=function(){var e=z=function(){function e(t,n){Object(c.a)(this,e),this._infoWindowManager=t,this._el=n,this.isOpen=!1,this.infoWindowClose=new p.o,this._infoWindowAddedToManager=!1,this._id=(F++).toString()}return Object(l.a)(e,[{key:\"ngOnInit\",value:function(){this.content=this._el.nativeElement.querySelector(\".agm-info-window-content\"),this._infoWindowManager.addInfoWindow(this),this._infoWindowAddedToManager=!0,this._updateOpenState(),this._registerEventListeners()}},{key:\"ngOnChanges\",value:function(e){this._infoWindowAddedToManager&&((e.latitude||e.longitude)&&\"number\"==typeof this.latitude&&\"number\"==typeof this.longitude&&this._infoWindowManager.setPosition(this),e.zIndex&&this._infoWindowManager.setZIndex(this),e.isOpen&&this._updateOpenState(),this._setInfoWindowOptions(e))}},{key:\"_registerEventListeners\",value:function(){var e=this;this._infoWindowManager.createEventObservable(\"closeclick\",this).subscribe(function(){e.isOpen=!1,e.infoWindowClose.emit()})}},{key:\"_updateOpenState\",value:function(){this.isOpen?this.open():this.close()}},{key:\"_setInfoWindowOptions\",value:function(e){var t={};Object.keys(e).filter(function(e){return-1!==z._infoWindowOptionsInputs.indexOf(e)}).forEach(function(n){t[n]=e[n].currentValue}),this._infoWindowManager.setOptions(this,t)}},{key:\"open\",value:function(){return this._infoWindowManager.open(this)}},{key:\"close\",value:function(){var e=this;return this._infoWindowManager.close(this).then(function(){e.infoWindowClose.emit()})}},{key:\"id\",value:function(){return this._id}},{key:\"toString\",value:function(){return\"AgmInfoWindow-\"+this._id.toString()}},{key:\"ngOnDestroy\",value:function(){this._infoWindowManager.deleteInfoWindow(this)}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.Sb(q),p.Sb(p.m))},e.\\u0275cmp=p.Mb({type:e,selectors:[[\"agm-info-window\"]],inputs:{isOpen:\"isOpen\",latitude:\"latitude\",longitude:\"longitude\",disableAutoPan:\"disableAutoPan\",zIndex:\"zIndex\",maxWidth:\"maxWidth\"},outputs:{infoWindowClose:\"infoWindowClose\"},features:[p.Cb],ngContentSelectors:E,decls:2,vars:0,consts:[[1,\"agm-info-window-content\"]],template:function(e,t){1&e&&(p.rc(),p.Yb(0,\"div\",0),p.qc(1),p.Xb())},encapsulation:2}),e._infoWindowOptionsInputs=[\"disableAutoPan\",\"maxWidth\"],e=z=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[q,p.m])],e)}(),H=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._wrapper=t,this._zone=n,this._layers=new Map}return Object(l.a)(e,[{key:\"addKmlLayer\",value:function(e){var t=this._wrapper.getNativeMap().then(function(t){return new google.maps.KmlLayer({clickable:e.clickable,map:t,preserveViewport:e.preserveViewport,screenOverlays:e.screenOverlays,suppressInfoWindows:e.suppressInfoWindows,url:e.url,zIndex:e.zIndex})});this._layers.set(e,t)}},{key:\"setOptions\",value:function(e,t){this._layers.get(e).then(function(e){return e.setOptions(t)})}},{key:\"deleteKmlLayer\",value:function(e){var t=this;this._layers.get(e).then(function(n){n.setMap(null),t._layers.delete(e)})}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._layers.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}();function J(e){var t=[\"insert_at\",\"remove_at\",\"set_at\"];return m(function(n){return t.map(function(t){return e.addListener(t,function(i,r){return n.apply(e,[{newArr:e.getArray(),evName:t,index:i,previous:r}])})})},function(e,t){return t.forEach(function(e){return e.remove()})})}var Y,K,G,X,Q,ee,te,ne=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._mapsWrapper=t,this._zone=n,this._polygons=new Map}return Object(l.a)(e,[{key:\"addPolygon\",value:function(e){var t=this._mapsWrapper.createPolygon({clickable:e.clickable,draggable:e.draggable,editable:e.editable,fillColor:e.fillColor,fillOpacity:e.fillOpacity,geodesic:e.geodesic,paths:e.paths,strokeColor:e.strokeColor,strokeOpacity:e.strokeOpacity,strokeWeight:e.strokeWeight,visible:e.visible,zIndex:e.zIndex});this._polygons.set(e,t)}},{key:\"updatePolygon\",value:function(e){var t=this,n=this._polygons.get(e);return null==n?Promise.resolve():n.then(function(n){return t._zone.run(function(){n.setPaths(e.paths)})})}},{key:\"setPolygonOptions\",value:function(e,t){return this._polygons.get(e).then(function(e){e.setOptions(t)})}},{key:\"deletePolygon\",value:function(e){var t=this,n=this._polygons.get(e);return null==n?Promise.resolve():n.then(function(n){return t._zone.run(function(){n.setMap(null),t._polygons.delete(e)})})}},{key:\"getPath\",value:function(e){return this._polygons.get(e).then(function(e){return e.getPath().getArray()})}},{key:\"getPaths\",value:function(e){return this._polygons.get(e).then(function(e){return e.getPaths().getArray().map(function(e){return e.getArray()})})}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._polygons.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}},{key:\"createPathEventObservable\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){var n,i;return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._polygons.get(e);case 2:return n=t.sent.getPaths(),i=J(n),t.abrupt(\"return\",i.pipe(Object(P.a)({newArr:n.getArray()}),Object(j.a)(function(e){return k.a.apply(void 0,Object(a.a)(e.newArr.map(function(t,n){return J(t).pipe(Object(y.a)(function(t){return{parentMVEvent:e,chMVCEvent:t,pathIndex:n}}))}))).pipe(Object(P.a)({parentMVEvent:e,chMVCEvent:null,pathIndex:null}))}),S(1),Object(y.a)(function(e){var t,n=e.parentMVEvent,i=e.chMVCEvent,r=e.pathIndex;return i?(t={newArr:n.newArr.map(function(e){return e.getArray().map(function(e){return e.toJSON()})}),pathIndex:r,eventName:i.evName,index:i.index},i.previous&&(t.previous=i.previous)):(t={newArr:n.newArr.map(function(e){return e.getArray().map(function(e){return e.toJSON()})}),eventName:n.evName,index:n.index},n.previous&&(t.previous=n.previous.getArray())),t})));case 6:case\"end\":return t.stop()}},t,this)}))}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),ie=function(){var e=Y=function(){function e(t,n){Object(c.a)(this,e),this._mapsWrapper=t,this._zone=n,this._polylines=new Map}return Object(l.a)(e,[{key:\"addPolyline\",value:function(e){var t=this,n=this._mapsWrapper.getNativeMap().then(function(){return[Y._convertPoints(e),Y._convertIcons(e)]}).then(function(n){var i=Object(o.a)(n,2);return t._mapsWrapper.createPolyline({clickable:e.clickable,draggable:e.draggable,editable:e.editable,geodesic:e.geodesic,strokeColor:e.strokeColor,strokeOpacity:e.strokeOpacity,strokeWeight:e.strokeWeight,visible:e.visible,zIndex:e.zIndex,path:i[0],icons:i[1]})});this._polylines.set(e,n)}},{key:\"updatePolylinePoints\",value:function(e){var t=this,n=Y._convertPoints(e),i=this._polylines.get(e);return null==i?Promise.resolve():i.then(function(e){return t._zone.run(function(){e.setPath(n)})})}},{key:\"updateIconSequences\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){var n,i,r=this;return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._mapsWrapper.getNativeMap();case 2:if(n=Y._convertIcons(e),null!=(i=this._polylines.get(e))){t.next=6;break}return t.abrupt(\"return\");case 6:return t.abrupt(\"return\",i.then(function(e){return r._zone.run(function(){return e.setOptions({icons:n})})}));case 7:case\"end\":return t.stop()}},t,this)}))}},{key:\"setPolylineOptions\",value:function(e,t){return this._polylines.get(e).then(function(e){e.setOptions(t)})}},{key:\"deletePolyline\",value:function(e){var t=this,n=this._polylines.get(e);return null==n?Promise.resolve():n.then(function(n){return t._zone.run(function(){n.setMap(null),t._polylines.delete(e)})})}},{key:\"getMVCPath\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._polylines.get(e);case 2:return t.abrupt(\"return\",t.sent.getPath());case 4:case\"end\":return t.stop()}},t,this)}))}},{key:\"getPath\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getMVCPath(e);case 2:return t.abrupt(\"return\",t.sent.getArray());case 3:case\"end\":return t.stop()}},t,this)}))}},{key:\"createEventObservable\",value:function(e,t){var n=this;return new d.a(function(i){n._polylines.get(t).then(function(t){t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})})})}},{key:\"createPathEventObservable\",value:function(e){return Object(h.__awaiter)(this,void 0,void 0,u.a.mark(function t(){return u.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getMVCPath(e);case 2:return t.abrupt(\"return\",J(t.sent));case 4:case\"end\":return t.stop()}},t,this)}))}}],[{key:\"_convertPoints\",value:function(e){return e._getPoints().map(function(e){return{lat:e.latitude,lng:e.longitude}})}},{key:\"_convertPath\",value:function(e){var t=google.maps.SymbolPath[e];return\"number\"==typeof t?t:e}},{key:\"_convertIcons\",value:function(e){var t=e._getIcons().map(function(e){return{fixedRotation:e.fixedRotation,offset:e.offset,repeat:e.repeat,icon:{anchor:new google.maps.Point(e.anchorX,e.anchorY),fillColor:e.fillColor,fillOpacity:e.fillOpacity,path:Y._convertPath(e.path),rotation:e.rotation,scale:e.scale,strokeColor:e.strokeColor,strokeOpacity:e.strokeOpacity,strokeWeight:e.strokeWeight}}});return t.forEach(function(e){Object.entries(e).forEach(function(t){var n=Object(o.a)(t,2);void 0===n[1]&&delete e[n[0]]}),void 0!==e.icon.anchor.x&&void 0!==e.icon.anchor.y||delete e.icon.anchor}),t}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Y=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),re=function(){var e=function(){function e(t,n){Object(c.a)(this,e),this._apiWrapper=t,this._zone=n,this._rectangles=new Map}return Object(l.a)(e,[{key:\"addRectangle\",value:function(e){this._rectangles.set(e,this._apiWrapper.createRectangle({bounds:{north:e.north,east:e.east,south:e.south,west:e.west},clickable:e.clickable,draggable:e.draggable,editable:e.editable,fillColor:e.fillColor,fillOpacity:e.fillOpacity,strokeColor:e.strokeColor,strokeOpacity:e.strokeOpacity,strokePosition:e.strokePosition,strokeWeight:e.strokeWeight,visible:e.visible,zIndex:e.zIndex}))}},{key:\"removeRectangle\",value:function(e){var t=this;return this._rectangles.get(e).then(function(n){n.setMap(null),t._rectangles.delete(e)})}},{key:\"setOptions\",value:function(e,t){return this._rectangles.get(e).then(function(e){return e.setOptions(t)})}},{key:\"getBounds\",value:function(e){return this._rectangles.get(e).then(function(e){return e.getBounds()})}},{key:\"setBounds\",value:function(e){return this._rectangles.get(e).then(function(t){return t.setBounds({north:e.north,east:e.east,south:e.south,west:e.west})})}},{key:\"setEditable\",value:function(e){return this._rectangles.get(e).then(function(t){return t.setEditable(e.editable)})}},{key:\"setDraggable\",value:function(e){return this._rectangles.get(e).then(function(t){return t.setDraggable(e.draggable)})}},{key:\"setVisible\",value:function(e){return this._rectangles.get(e).then(function(t){return t.setVisible(e.visible)})}},{key:\"createEventObservable\",value:function(e,t){var n=this;return d.a.create(function(i){var r=null;return n._rectangles.get(t).then(function(t){r=t.addListener(e,function(e){return n._zone.run(function(){return i.next(e)})})}),function(){null!==r&&r.remove()}})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.fc(A),p.fc(p.B))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[A,p.B])],e)}(),oe=function(){var e=K=function(){function e(t,n,i,r,o){Object(c.a)(this,e),this._elem=t,this._mapsWrapper=n,this._platformId=i,this._fitBoundsService=r,this._zone=o,this.longitude=0,this.latitude=0,this.zoom=8,this.draggable=!0,this.disableDoubleClickZoom=!1,this.disableDefaultUI=!1,this.scrollwheel=!0,this.keyboardShortcuts=!0,this.styles=[],this.usePanning=!1,this.fitBounds=!1,this.scaleControl=!1,this.mapTypeControl=!1,this.panControl=!1,this.rotateControl=!1,this.fullscreenControl=!1,this.mapTypeId=\"roadmap\",this.clickableIcons=!0,this.showDefaultInfoWindow=!0,this.gestureHandling=\"auto\",this.tilt=0,this._observableSubscriptions=[],this.mapClick=new p.o,this.mapRightClick=new p.o,this.mapDblClick=new p.o,this.centerChange=new p.o,this.boundsChange=new p.o,this.mapTypeIdChange=new p.o,this.idle=new p.o,this.zoomChange=new p.o,this.mapReady=new p.o,this.tilesLoaded=new p.o}return Object(l.a)(e,[{key:\"ngOnInit\",value:function(){if(!Object(B.D)(this._platformId)){var e=this._elem.nativeElement.querySelector(\".agm-map-container-inner\");this._initMapInstance(e)}}},{key:\"_initMapInstance\",value:function(e){var t=this;this._mapsWrapper.createMap(e,{center:{lat:this.latitude||0,lng:this.longitude||0},zoom:this.zoom,minZoom:this.minZoom,maxZoom:this.maxZoom,controlSize:this.controlSize,disableDefaultUI:this.disableDefaultUI,disableDoubleClickZoom:this.disableDoubleClickZoom,scrollwheel:this.scrollwheel,backgroundColor:this.backgroundColor,draggable:this.draggable,draggableCursor:this.draggableCursor,draggingCursor:this.draggingCursor,keyboardShortcuts:this.keyboardShortcuts,styles:this.styles,zoomControl:this.zoomControl,zoomControlOptions:this.zoomControlOptions,streetViewControl:this.streetViewControl,streetViewControlOptions:this.streetViewControlOptions,scaleControl:this.scaleControl,scaleControlOptions:this.scaleControlOptions,mapTypeControl:this.mapTypeControl,mapTypeControlOptions:this.mapTypeControlOptions,panControl:this.panControl,panControlOptions:this.panControlOptions,rotateControl:this.rotateControl,rotateControlOptions:this.rotateControlOptions,fullscreenControl:this.fullscreenControl,fullscreenControlOptions:this.fullscreenControlOptions,mapTypeId:this.mapTypeId,clickableIcons:this.clickableIcons,gestureHandling:this.gestureHandling,tilt:this.tilt,restriction:this.restriction}).then(function(){return t._mapsWrapper.getNativeMap()}).then(function(e){return t.mapReady.emit(e)}),this._handleMapCenterChange(),this._handleMapZoomChange(),this._handleMapMouseEvents(),this._handleBoundsChange(),this._handleMapTypeIdChange(),this._handleTilesLoadedEvent(),this._handleIdleEvent()}},{key:\"ngOnDestroy\",value:function(){this._observableSubscriptions.forEach(function(e){return e.unsubscribe()}),this._mapsWrapper.clearInstanceListeners(),this._fitBoundsSubscription&&this._fitBoundsSubscription.unsubscribe()}},{key:\"ngOnChanges\",value:function(e){this._updateMapOptionsChanges(e),this._updatePosition(e)}},{key:\"_updateMapOptionsChanges\",value:function(e){var t={};Object.keys(e).filter(function(e){return-1!==K._mapOptionsAttributes.indexOf(e)}).forEach(function(n){t[n]=e[n].currentValue}),this._mapsWrapper.setMapOptions(t)}},{key:\"triggerResize\",value:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return new Promise(function(n){setTimeout(function(){return e._mapsWrapper.triggerMapEvent(\"resize\").then(function(){t&&(null!=e.fitBounds?e._fitBounds():e._setCenter()),n()})})})}},{key:\"_updatePosition\",value:function(e){(null!=e.latitude||null!=e.longitude||e.fitBounds)&&(\"fitBounds\"in e?this._fitBounds():\"number\"==typeof this.latitude&&\"number\"==typeof this.longitude&&this._setCenter())}},{key:\"_setCenter\",value:function(){var e={lat:this.latitude,lng:this.longitude};this.usePanning?this._mapsWrapper.panTo(e):this._mapsWrapper.setCenter(e)}},{key:\"_fitBounds\",value:function(){switch(this.fitBounds){case!0:this._subscribeToFitBoundsUpdates();break;case!1:this._fitBoundsSubscription&&this._fitBoundsSubscription.unsubscribe();break;default:this._updateBounds(this.fitBounds,this.fitBoundsPadding)}}},{key:\"_subscribeToFitBoundsUpdates\",value:function(){var e=this;this._zone.runOutsideAngular(function(){e._fitBoundsSubscription=e._fitBoundsService.getBounds$().subscribe(function(t){e._zone.run(function(){return e._updateBounds(t,e.fitBoundsPadding)})})})}},{key:\"_updateBounds\",value:function(e,t){if(e){if(this._isLatLngBoundsLiteral(e)&&\"undefined\"!=typeof google&&google&&google.maps&&google.maps.LatLngBounds){var n=new google.maps.LatLngBounds;n.union(e),e=n}this.usePanning?this._mapsWrapper.panToBounds(e,t):this._mapsWrapper.fitBounds(e,t)}}},{key:\"_isLatLngBoundsLiteral\",value:function(e){return null!=e&&void 0===e.extend}},{key:\"_handleMapCenterChange\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"center_changed\").subscribe(function(){e._mapsWrapper.getCenter().then(function(t){e.latitude=t.lat(),e.longitude=t.lng(),e.centerChange.emit({lat:e.latitude,lng:e.longitude})})});this._observableSubscriptions.push(t)}},{key:\"_handleBoundsChange\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"bounds_changed\").subscribe(function(){e._mapsWrapper.getBounds().then(function(t){e.boundsChange.emit(t)})});this._observableSubscriptions.push(t)}},{key:\"_handleMapTypeIdChange\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"maptypeid_changed\").subscribe(function(){e._mapsWrapper.getMapTypeId().then(function(t){e.mapTypeIdChange.emit(t)})});this._observableSubscriptions.push(t)}},{key:\"_handleMapZoomChange\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"zoom_changed\").subscribe(function(){e._mapsWrapper.getZoom().then(function(t){e.zoom=t,e.zoomChange.emit(t)})});this._observableSubscriptions.push(t)}},{key:\"_handleIdleEvent\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"idle\").subscribe(function(){e.idle.emit(void 0)});this._observableSubscriptions.push(t)}},{key:\"_handleTilesLoadedEvent\",value:function(){var e=this,t=this._mapsWrapper.subscribeToMapEvent(\"tilesloaded\").subscribe(function(){return e.tilesLoaded.emit(void 0)});this._observableSubscriptions.push(t)}},{key:\"_handleMapMouseEvents\",value:function(){var e=this;[{name:\"click\",emitter:this.mapClick},{name:\"rightclick\",emitter:this.mapRightClick},{name:\"dblclick\",emitter:this.mapDblClick}].forEach(function(t){var n=e._mapsWrapper.subscribeToMapEvent(t.name).subscribe(function(n){var i={coords:{lat:n.latLng.lat(),lng:n.latLng.lng()},placeId:n.placeId};i.placeId&&!e.showDefaultInfoWindow&&n.stop(),t.emitter.emit(i)});e._observableSubscriptions.push(n)})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.Sb(p.m),p.Sb(A),p.Sb(p.D),p.Sb(Z),p.Sb(p.B))},e.\\u0275cmp=p.Mb({type:e,selectors:[[\"agm-map\"]],hostVars:2,hostBindings:function(e,t){2&e&&p.Kb(\"sebm-google-map-container\",!0)},inputs:{longitude:\"longitude\",latitude:\"latitude\",zoom:\"zoom\",draggable:[\"mapDraggable\",\"draggable\"],disableDoubleClickZoom:\"disableDoubleClickZoom\",disableDefaultUI:\"disableDefaultUI\",scrollwheel:\"scrollwheel\",keyboardShortcuts:\"keyboardShortcuts\",styles:\"styles\",usePanning:\"usePanning\",fitBounds:\"fitBounds\",scaleControl:\"scaleControl\",mapTypeControl:\"mapTypeControl\",panControl:\"panControl\",rotateControl:\"rotateControl\",fullscreenControl:\"fullscreenControl\",mapTypeId:\"mapTypeId\",clickableIcons:\"clickableIcons\",showDefaultInfoWindow:\"showDefaultInfoWindow\",gestureHandling:\"gestureHandling\",tilt:\"tilt\",minZoom:\"minZoom\",maxZoom:\"maxZoom\",controlSize:\"controlSize\",backgroundColor:\"backgroundColor\",draggableCursor:\"draggableCursor\",draggingCursor:\"draggingCursor\",zoomControl:\"zoomControl\",zoomControlOptions:\"zoomControlOptions\",streetViewControl:\"streetViewControl\",streetViewControlOptions:\"streetViewControlOptions\",fitBoundsPadding:\"fitBoundsPadding\",scaleControlOptions:\"scaleControlOptions\",mapTypeControlOptions:\"mapTypeControlOptions\",panControlOptions:\"panControlOptions\",rotateControlOptions:\"rotateControlOptions\",fullscreenControlOptions:\"fullscreenControlOptions\",restriction:\"restriction\"},outputs:{mapClick:\"mapClick\",mapRightClick:\"mapRightClick\",mapDblClick:\"mapDblClick\",centerChange:\"centerChange\",boundsChange:\"boundsChange\",mapTypeIdChange:\"mapTypeIdChange\",idle:\"idle\",zoomChange:\"zoomChange\",mapReady:\"mapReady\",tilesLoaded:\"tilesLoaded\"},features:[p.Db([R,V,V,Z,A,q,H,L,U,ne,ie,re]),p.Cb],ngContentSelectors:E,decls:3,vars:0,consts:[[1,\"agm-map-container-inner\",\"sebm-google-map-container-inner\"],[1,\"agm-map-content\"]],template:function(e,t){1&e&&(p.rc(),p.Tb(0,\"div\",0),p.Yb(1,\"div\",1),p.qc(2),p.Xb())},styles:[\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"]}),e._mapOptionsAttributes=[\"disableDoubleClickZoom\",\"scrollwheel\",\"draggable\",\"draggableCursor\",\"draggingCursor\",\"keyboardShortcuts\",\"zoomControl\",\"zoomControlOptions\",\"styles\",\"streetViewControl\",\"streetViewControlOptions\",\"zoom\",\"mapTypeControl\",\"mapTypeControlOptions\",\"minZoom\",\"maxZoom\",\"panControl\",\"panControlOptions\",\"rotateControl\",\"rotateControlOptions\",\"fullscreenControl\",\"fullscreenControlOptions\",\"scaleControl\",\"scaleControlOptions\",\"mapTypeId\",\"clickableIcons\",\"gestureHandling\",\"tilt\",\"restriction\"],e=K=Object(h.__decorate)([Object(h.__param)(2,Object(p.q)(p.D)),Object(h.__metadata)(\"design:paramtypes\",[p.m,A,Object,Z,p.B])],e)}(),ae=0,se=function(){var e=G=function(){function e(t){Object(c.a)(this,e),this._markerManager=t,this.draggable=!1,this.visible=!0,this.openInfoWindow=!0,this.opacity=1,this.zIndex=1,this.clickable=!0,this.animationChange=new p.o,this.markerClick=new p.o,this.markerDblClick=new p.o,this.markerRightClick=new p.o,this.dragStart=new p.o,this.drag=new p.o,this.dragEnd=new p.o,this.mouseOver=new p.o,this.mouseOut=new p.o,this.infoWindow=new p.F,this._markerAddedToManger=!1,this._observableSubscriptions=[],this._fitBoundsDetails$=new O.a(1),this._id=(ae++).toString()}return Object(l.a)(e,[{key:\"ngAfterContentInit\",value:function(){var e=this;this.handleInfoWindowUpdate(),this.infoWindow.changes.subscribe(function(){return e.handleInfoWindowUpdate()})}},{key:\"handleInfoWindowUpdate\",value:function(){var e=this;if(this.infoWindow.length>1)throw new Error(\"Expected no more than one info window.\");this.infoWindow.forEach(function(t){t.hostMarker=e})}},{key:\"ngOnChanges\",value:function(e){if(\"string\"==typeof this.latitude&&(this.latitude=Number(this.latitude)),\"string\"==typeof this.longitude&&(this.longitude=Number(this.longitude)),\"number\"==typeof this.latitude&&\"number\"==typeof this.longitude){if(!this._markerAddedToManger)return this._markerManager.addMarker(this),this._updateFitBoundsDetails(),this._markerAddedToManger=!0,void this._addEventListeners();(e.latitude||e.longitude)&&(this._markerManager.updateMarkerPosition(this),this._updateFitBoundsDetails()),e.title&&this._markerManager.updateTitle(this),e.label&&this._markerManager.updateLabel(this),e.draggable&&this._markerManager.updateDraggable(this),e.iconUrl&&this._markerManager.updateIcon(this),e.opacity&&this._markerManager.updateOpacity(this),e.visible&&this._markerManager.updateVisible(this),e.zIndex&&this._markerManager.updateZIndex(this),e.clickable&&this._markerManager.updateClickable(this),e.animation&&this._markerManager.updateAnimation(this)}}},{key:\"getFitBoundsDetails$\",value:function(){return this._fitBoundsDetails$.asObservable()}},{key:\"_updateFitBoundsDetails\",value:function(){this._fitBoundsDetails$.next({latLng:{lat:this.latitude,lng:this.longitude}})}},{key:\"_addEventListeners\",value:function(){var e=this,t=this._markerManager.createEventObservable(\"click\",this).subscribe(function(){e.openInfoWindow&&e.infoWindow.forEach(function(e){return e.open()}),e.markerClick.emit(e)});this._observableSubscriptions.push(t);var n=this._markerManager.createEventObservable(\"dblclick\",this).subscribe(function(){e.markerDblClick.emit(null)});this._observableSubscriptions.push(n);var i=this._markerManager.createEventObservable(\"rightclick\",this).subscribe(function(){e.markerRightClick.emit(null)});this._observableSubscriptions.push(i);var r=this._markerManager.createEventObservable(\"dragstart\",this).subscribe(function(t){e.dragStart.emit({coords:{lat:t.latLng.lat(),lng:t.latLng.lng()}})});this._observableSubscriptions.push(r);var o=this._markerManager.createEventObservable(\"drag\",this).subscribe(function(t){e.drag.emit({coords:{lat:t.latLng.lat(),lng:t.latLng.lng()}})});this._observableSubscriptions.push(o);var a=this._markerManager.createEventObservable(\"dragend\",this).subscribe(function(t){e.dragEnd.emit({coords:{lat:t.latLng.lat(),lng:t.latLng.lng()}})});this._observableSubscriptions.push(a);var s=this._markerManager.createEventObservable(\"mouseover\",this).subscribe(function(t){e.mouseOver.emit({coords:{lat:t.latLng.lat(),lng:t.latLng.lng()}})});this._observableSubscriptions.push(s);var u=this._markerManager.createEventObservable(\"mouseout\",this).subscribe(function(t){e.mouseOut.emit({coords:{lat:t.latLng.lat(),lng:t.latLng.lng()}})});this._observableSubscriptions.push(u);var l=this._markerManager.createEventObservable(\"animation_changed\",this).subscribe(function(){e.animationChange.emit(e.animation)});this._observableSubscriptions.push(l)}},{key:\"id\",value:function(){return this._id}},{key:\"toString\",value:function(){return\"AgmMarker-\"+this._id.toString()}},{key:\"ngOnDestroy\",value:function(){this._markerManager.deleteMarker(this),this._observableSubscriptions.forEach(function(e){return e.unsubscribe()})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.Sb(U))},e.\\u0275dir=p.Nb({type:e,selectors:[[\"agm-marker\"]],contentQueries:function(e,t,n){var i;1&e&&p.Lb(n,$,0),2&e&&p.Fc(i=p.jc())&&(t.infoWindow=i)},inputs:{latitude:\"latitude\",longitude:\"longitude\",title:\"title\",label:\"label\",draggable:[\"markerDraggable\",\"draggable\"],iconUrl:\"iconUrl\",openInfoWindow:\"openInfoWindow\",opacity:\"opacity\",visible:\"visible\",zIndex:\"zIndex\",animation:\"animation\",clickable:[\"markerClickable\",\"clickable\"]},outputs:{markerClick:\"markerClick\",dragStart:\"dragStart\",drag:\"drag\",dragEnd:\"dragEnd\",mouseOver:\"mouseOver\",mouseOut:\"mouseOut\",animationChange:\"animationChange\",markerDblClick:\"markerDblClick\",markerRightClick:\"markerRightClick\"},features:[p.Db([{provide:N,useExisting:Object(p.Y)(function(){return G})}]),p.Cb]}),e=G=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[U])],e)}(),ue=function(){var e=X=function(){function e(t){Object(c.a)(this,e),this._polygonManager=t,this.clickable=!0,this.draggable=!1,this.editable=!1,this.geodesic=!1,this.paths=[],this.polyClick=new p.o,this.polyDblClick=new p.o,this.polyDrag=new p.o,this.polyDragEnd=new p.o,this.polyDragStart=new p.o,this.polyMouseDown=new p.o,this.polyMouseMove=new p.o,this.polyMouseOut=new p.o,this.polyMouseOver=new p.o,this.polyMouseUp=new p.o,this.polyRightClick=new p.o,this.polyPathsChange=new p.o,this._polygonAddedToManager=!1,this._subscriptions=[]}return Object(l.a)(e,[{key:\"ngAfterContentInit\",value:function(){this._polygonAddedToManager||this._init()}},{key:\"ngOnChanges\",value:function(e){this._polygonAddedToManager?this._polygonManager.setPolygonOptions(this,this._updatePolygonOptions(e)):this._init()}},{key:\"_init\",value:function(){this._polygonManager.addPolygon(this),this._polygonAddedToManager=!0,this._addEventListeners()}},{key:\"_addEventListeners\",value:function(){var e=this;[{name:\"click\",handler:function(t){return e.polyClick.emit(t)}},{name:\"dblclick\",handler:function(t){return e.polyDblClick.emit(t)}},{name:\"drag\",handler:function(t){return e.polyDrag.emit(t)}},{name:\"dragend\",handler:function(t){return e.polyDragEnd.emit(t)}},{name:\"dragstart\",handler:function(t){return e.polyDragStart.emit(t)}},{name:\"mousedown\",handler:function(t){return e.polyMouseDown.emit(t)}},{name:\"mousemove\",handler:function(t){return e.polyMouseMove.emit(t)}},{name:\"mouseout\",handler:function(t){return e.polyMouseOut.emit(t)}},{name:\"mouseover\",handler:function(t){return e.polyMouseOver.emit(t)}},{name:\"mouseup\",handler:function(t){return e.polyMouseUp.emit(t)}},{name:\"rightclick\",handler:function(t){return e.polyRightClick.emit(t)}}].forEach(function(t){var n=e._polygonManager.createEventObservable(t.name,e).subscribe(t.handler);e._subscriptions.push(n)}),this._polygonManager.createPathEventObservable(this).then(function(t){var n=t.subscribe(function(t){return e.polyPathsChange.emit(t)});e._subscriptions.push(n)})}},{key:\"_updatePolygonOptions\",value:function(e){return Object.keys(e).filter(function(e){return-1!==X._polygonOptionsAttributes.indexOf(e)}).reduce(function(t,n){return t[n]=e[n].currentValue,t},{})}},{key:\"id\",value:function(){return this._id}},{key:\"ngOnDestroy\",value:function(){this._polygonManager.deletePolygon(this),this._subscriptions.forEach(function(e){return e.unsubscribe()})}},{key:\"getPath\",value:function(){return this._polygonManager.getPath(this)}},{key:\"getPaths\",value:function(){return this._polygonManager.getPaths(this)}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.Sb(ne))},e.\\u0275dir=p.Nb({type:e,selectors:[[\"agm-polygon\"]],inputs:{clickable:\"clickable\",draggable:[\"polyDraggable\",\"draggable\"],editable:\"editable\",geodesic:\"geodesic\",paths:\"paths\",fillColor:\"fillColor\",fillOpacity:\"fillOpacity\",strokeColor:\"strokeColor\",strokeOpacity:\"strokeOpacity\",strokeWeight:\"strokeWeight\",visible:\"visible\",zIndex:\"zIndex\"},outputs:{polyClick:\"polyClick\",polyDblClick:\"polyDblClick\",polyDrag:\"polyDrag\",polyDragEnd:\"polyDragEnd\",polyDragStart:\"polyDragStart\",polyMouseDown:\"polyMouseDown\",polyMouseMove:\"polyMouseMove\",polyMouseOut:\"polyMouseOut\",polyMouseOver:\"polyMouseOver\",polyMouseUp:\"polyMouseUp\",polyRightClick:\"polyRightClick\",polyPathsChange:\"polyPathsChange\"},features:[p.Cb]}),e._polygonOptionsAttributes=[\"clickable\",\"draggable\",\"editable\",\"fillColor\",\"fillOpacity\",\"geodesic\",\"icon\",\"map\",\"paths\",\"strokeColor\",\"strokeOpacity\",\"strokeWeight\",\"visible\",\"zIndex\",\"draggable\",\"editable\",\"visible\"],e=X=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[ne])],e)}(),le=function(){var e=function(){function e(){Object(c.a)(this,e)}return Object(l.a)(e,[{key:\"ngOnInit\",value:function(){if(null==this.path)throw new Error(\"Icon Sequence path is required\")}}]),e}();return e.\\u0275fac=function(t){return new(t||e)},e.\\u0275dir=p.Nb({type:e,selectors:[[\"agm-icon-sequence\"]],inputs:{fixedRotation:\"fixedRotation\",offset:\"offset\",repeat:\"repeat\",anchorX:\"anchorX\",anchorY:\"anchorY\",fillColor:\"fillColor\",fillOpacity:\"fillOpacity\",path:\"path\",rotation:\"rotation\",scale:\"scale\",strokeColor:\"strokeColor\",strokeOpacity:\"strokeOpacity\",strokeWeight:\"strokeWeight\"}}),e}(),ce=function(){var e=Q=function(){function e(){Object(c.a)(this,e),this.positionChanged=new p.o}return Object(l.a)(e,[{key:\"ngOnChanges\",value:function(e){(e.latitude||e.longitude)&&this.positionChanged.emit({lat:e.latitude?e.latitude.currentValue:this.latitude,lng:e.longitude?e.longitude.currentValue:this.longitude})}},{key:\"getFitBoundsDetails$\",value:function(){return this.positionChanged.pipe(Object(P.a)({lat:this.latitude,lng:this.longitude}),Object(y.a)(function(e){return{latLng:e}}))}}]),e}();return e.\\u0275fac=function(t){return new(t||e)},e.\\u0275dir=p.Nb({type:e,selectors:[[\"agm-polyline-point\"]],inputs:{latitude:\"latitude\",longitude:\"longitude\"},outputs:{positionChanged:\"positionChanged\"},features:[p.Db([{provide:N,useExisting:Object(p.Y)(function(){return Q})}]),p.Cb]}),e=Q=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[])],e)}(),he=0,pe=function(){var e=ee=function(){function e(t){Object(c.a)(this,e),this._polylineManager=t,this.clickable=!0,this.draggable=!1,this.editable=!1,this.geodesic=!1,this.visible=!0,this.lineClick=new p.o,this.lineDblClick=new p.o,this.lineDrag=new p.o,this.lineDragEnd=new p.o,this.lineDragStart=new p.o,this.lineMouseDown=new p.o,this.lineMouseMove=new p.o,this.lineMouseOut=new p.o,this.lineMouseOver=new p.o,this.lineMouseUp=new p.o,this.lineRightClick=new p.o,this.polyPathChange=new p.o,this._polylineAddedToManager=!1,this._subscriptions=[],this._id=(he++).toString()}return Object(l.a)(e,[{key:\"ngAfterContentInit\",value:function(){var e=this;this.points.length&&this.points.forEach(function(t){var n=t.positionChanged.subscribe(function(){e._polylineManager.updatePolylinePoints(e)});e._subscriptions.push(n)}),this._polylineAddedToManager||this._init();var t=this.points.changes.subscribe(function(){return e._polylineManager.updatePolylinePoints(e)});this._subscriptions.push(t),this._polylineManager.updatePolylinePoints(this);var n=this.iconSequences.changes.subscribe(function(){return e._polylineManager.updateIconSequences(e)});this._subscriptions.push(n)}},{key:\"ngOnChanges\",value:function(e){if(this._polylineAddedToManager){var t={};Object.keys(e).filter(function(e){return-1!==ee._polylineOptionsAttributes.indexOf(e)}).forEach(function(n){return t[n]=e[n].currentValue}),this._polylineManager.setPolylineOptions(this,t)}else this._init()}},{key:\"getPath\",value:function(){return this._polylineManager.getPath(this)}},{key:\"_init\",value:function(){this._polylineManager.addPolyline(this),this._polylineAddedToManager=!0,this._addEventListeners()}},{key:\"_addEventListeners\",value:function(){var e=this;[{name:\"click\",handler:function(t){return e.lineClick.emit(t)}},{name:\"dblclick\",handler:function(t){return e.lineDblClick.emit(t)}},{name:\"drag\",handler:function(t){return e.lineDrag.emit(t)}},{name:\"dragend\",handler:function(t){return e.lineDragEnd.emit(t)}},{name:\"dragstart\",handler:function(t){return e.lineDragStart.emit(t)}},{name:\"mousedown\",handler:function(t){return e.lineMouseDown.emit(t)}},{name:\"mousemove\",handler:function(t){return e.lineMouseMove.emit(t)}},{name:\"mouseout\",handler:function(t){return e.lineMouseOut.emit(t)}},{name:\"mouseover\",handler:function(t){return e.lineMouseOver.emit(t)}},{name:\"mouseup\",handler:function(t){return e.lineMouseUp.emit(t)}},{name:\"rightclick\",handler:function(t){return e.lineRightClick.emit(t)}}].forEach(function(t){var n=e._polylineManager.createEventObservable(t.name,e).subscribe(t.handler);e._subscriptions.push(n)}),this._polylineManager.createPathEventObservable(this).then(function(t){var n=t.subscribe(function(t){return e.polyPathChange.emit(t)});e._subscriptions.push(n)})}},{key:\"_getPoints\",value:function(){return this.points?this.points.toArray():[]}},{key:\"_getIcons\",value:function(){return this.iconSequences?this.iconSequences.toArray():[]}},{key:\"id\",value:function(){return this._id}},{key:\"ngOnDestroy\",value:function(){this._polylineManager.deletePolyline(this),this._subscriptions.forEach(function(e){return e.unsubscribe()})}}]),e}();return e.\\u0275fac=function(t){return new(t||e)(p.Sb(ie))},e.\\u0275dir=p.Nb({type:e,selectors:[[\"agm-polyline\"]],contentQueries:function(e,t,n){var i;1&e&&(p.Lb(n,ce,0),p.Lb(n,le,0)),2&e&&(p.Fc(i=p.jc())&&(t.points=i),p.Fc(i=p.jc())&&(t.iconSequences=i))},inputs:{clickable:\"clickable\",draggable:[\"polylineDraggable\",\"draggable\"],editable:\"editable\",geodesic:\"geodesic\",visible:\"visible\",strokeColor:\"strokeColor\",strokeOpacity:\"strokeOpacity\",strokeWeight:\"strokeWeight\",zIndex:\"zIndex\"},outputs:{lineClick:\"lineClick\",lineDblClick:\"lineDblClick\",lineDrag:\"lineDrag\",lineDragEnd:\"lineDragEnd\",lineDragStart:\"lineDragStart\",lineMouseDown:\"lineMouseDown\",lineMouseMove:\"lineMouseMove\",lineMouseOut:\"lineMouseOut\",lineMouseOver:\"lineMouseOver\",lineMouseUp:\"lineMouseUp\",lineRightClick:\"lineRightClick\",polyPathChange:\"polyPathChange\"},features:[p.Cb]}),e._polylineOptionsAttributes=[\"draggable\",\"editable\",\"visible\",\"geodesic\",\"strokeColor\",\"strokeOpacity\",\"strokeWeight\",\"zIndex\"],e=ee=Object(h.__decorate)([Object(h.__metadata)(\"design:paramtypes\",[ie])],e)}(),de=function(){function e(){Object(c.a)(this,e)}return Object(l.a)(e,[{key:\"getNativeWindow\",value:function(){return window}}]),e}(),fe=function(){function e(){Object(c.a)(this,e)}return Object(l.a)(e,[{key:\"getNativeDocument\",value:function(){return document}}]),e}(),ge=[de,fe],be=function(e){return e[e.HTTP=1]=\"HTTP\",e[e.HTTPS=2]=\"HTTPS\",e[e.AUTO=3]=\"AUTO\",e}({}),ve=new p.s(\"angular-google-maps LAZY_MAPS_API_CONFIG\"),_e=function(){var e=function(e){Object(i.a)(n,e);var t=Object(r.a)(n);function n(){var e,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,r=arguments.length>1?arguments[1]:void 0,o=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;return Object(c.a)(this,n),(e=t.call(this)).localeId=a,e._SCRIPT_ID=\"agmGoogleMapsApiScript\",e.callbackName=\"agmLazyMapsAPILoader\",e._config=i||{},e._windowRef=r,e._documentRef=o,e}return Object(l.a)(n,[{key:\"load\",value:function(){var e=this._windowRef.getNativeWindow();if(e.google&&e.google.maps)return Promise.resolve();if(this._scriptLoadingPromise)return this._scriptLoadingPromise;var t=this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);if(t)return this._assignScriptLoadingPromise(t),this._scriptLoadingPromise;var n=this._documentRef.getNativeDocument().createElement(\"script\");return n.type=\"text/javascript\",n.async=!0,n.defer=!0,n.id=this._SCRIPT_ID,n.src=this._getScriptSrc(this.callbackName),this._assignScriptLoadingPromise(n),this._documentRef.getNativeDocument().body.appendChild(n),this._scriptLoadingPromise}},{key:\"_assignScriptLoadingPromise\",value:function(e){var t=this;this._scriptLoadingPromise=new Promise(function(n,i){t._windowRef.getNativeWindow()[t.callbackName]=function(){n()},e.onerror=function(e){i(e)}})}},{key:\"_getScriptSrc\",value:function(e){var t;switch(this._config&&this._config.protocol||be.HTTPS){case be.AUTO:t=\"\";break;case be.HTTP:t=\"http:\";break;case be.HTTPS:t=\"https:\"}var n=this._config.hostAndPath||\"maps.googleapis.com/maps/api/js\",i={v:this._config.apiVersion||\"quarterly\",callback:e,key:this._config.apiKey,client:this._config.clientId,channel:this._config.channel,libraries:this._config.libraries,region:this._config.region,language:this._config.language||\"en-US\"!==this.localeId?this.localeId:null},r=Object.keys(i).filter(function(e){return null!=i[e]}).filter(function(e){return!Array.isArray(i[e])||Array.isArray(i[e])&&i[e].length>0}).map(function(e){var t=i[e];return Array.isArray(t)?{key:e,value:t.join(\",\")}:{key:e,value:i[e]}}).map(function(e){return\"\".concat(e.key,\"=\").concat(e.value)}).join(\"&\");return\"\".concat(t,\"//\").concat(n,\"?\").concat(r)}}]),n}(T);return e.\\u0275fac=function(t){return new(t||e)(p.fc(ve,8),p.fc(de),p.fc(fe),p.fc(p.w))},e.\\u0275prov=p.Ob({token:e,factory:function(t){return e.\\u0275fac(t)}}),e=Object(h.__decorate)([Object(h.__param)(0,Object(p.C)()),Object(h.__param)(0,Object(p.q)(ve)),Object(h.__param)(3,Object(p.q)(p.w)),Object(h.__metadata)(\"design:paramtypes\",[Object,de,fe,String])],e)}(),ye=function(){var e=te=function(){function e(){Object(c.a)(this,e)}return Object(l.a)(e,null,[{key:\"forRoot\",value:function(e){return{ngModule:te,providers:[].concat(ge,[{provide:T,useClass:_e},{provide:ve,useValue:e}])}}}]),e}();return e.\\u0275mod=p.Qb({type:e}),e.\\u0275inj=p.Pb({factory:function(t){return new(t||e)}}),e}()}}]);","name":"8.7910ecc0568bf0eb8235.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[8],{\n\n/***/ \"LSHg\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ agm_core_AgmCoreModule; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ agm_core_AgmMap; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ agm_core_AgmMarker; });\n__webpack_require__.d(__webpack_exports__, \"d\", function() { return /* binding */ agm_core_AgmPolygon; });\n__webpack_require__.d(__webpack_exports__, \"e\", function() { return /* binding */ agm_core_AgmPolyline; });\n__webpack_require__.d(__webpack_exports__, \"f\", function() { return /* binding */ agm_core_AgmPolylinePoint; });\n__webpack_require__.d(__webpack_exports__, \"g\", function() { return /* binding */ agm_core_GoogleMapsAPIWrapper; });\n__webpack_require__.d(__webpack_exports__, \"h\", function() { return /* binding */ agm_core_MapsAPILoader; });\n\n// UNUSED EXPORTS: AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmPolylineIcon, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, ɵa, ɵb, ɵc, ɵd, ɵe\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(\"Ji7U\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 2 modules\nvar createSuper = __webpack_require__(\"LK+K\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__(\"ODXe\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__(\"KQm4\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(\"o0o1\");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"vuIU\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"1OyB\");\n\n// EXTERNAL MODULE: ./node_modules/ngx-toastr/node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(\"S5nb\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/fesm2015/core.js + 4 modules\nvar core = __webpack_require__(\"8Y7J\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Observable.js + 2 modules\nvar Observable = __webpack_require__(\"HDdC\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js\nvar BehaviorSubject = __webpack_require__(\"2Vo4\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/from.js + 6 modules\nvar from = __webpack_require__(\"Cfvw\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/timer.js\nvar timer = __webpack_require__(\"PqYM\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subject.js\nvar Subject = __webpack_require__(\"XNiG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/isArray.js\nvar isArray = __webpack_require__(\"DH7j\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/isFunction.js\nvar isFunction = __webpack_require__(\"n6bG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/map.js\nvar map = __webpack_require__(\"lJxs\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js\n\n\n\n\n\nfunction fromEventPattern(addHandler, removeHandler, resultSelector) {\n  if (resultSelector) {\n    return fromEventPattern(addHandler, removeHandler).pipe(Object(map[\"a\" /* map */])(function (args) {\n      return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, Object(toConsumableArray[\"a\" /* default */])(args)) : resultSelector(args);\n    }));\n  }\n\n  return new Observable[\"a\" /* Observable */](function (subscriber) {\n    var handler = function handler() {\n      for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n        e[_key] = arguments[_key];\n      }\n\n      return subscriber.next(e.length === 1 ? e[0] : e);\n    };\n\n    var retValue;\n\n    try {\n      retValue = addHandler(handler);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    if (!Object(isFunction[\"a\" /* isFunction */])(removeHandler)) {\n      return undefined;\n    }\n\n    return function () {\n      return removeHandler(handler, retValue);\n    };\n  });\n}\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/merge.js\nvar merge = __webpack_require__(\"VRyK\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js\nvar ReplaySubject = __webpack_require__(\"jtHE\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js + 1 modules\nvar get = __webpack_require__(\"ReuC\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(\"foSv\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subscription.js + 1 modules\nvar Subscription = __webpack_require__(\"quSY\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/AsyncSubject.js\n\n\n\n\n\n\n\n\nvar AsyncSubject_AsyncSubject = /*#__PURE__*/function (_Subject) {\n  Object(inherits[\"a\" /* default */])(AsyncSubject, _Subject);\n\n  var _super = Object(createSuper[\"a\" /* default */])(AsyncSubject);\n\n  function AsyncSubject() {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, AsyncSubject);\n\n    _this = _super.apply(this, arguments);\n    _this.value = null;\n    _this.hasNext = false;\n    _this.hasCompleted = false;\n    return _this;\n  }\n\n  Object(createClass[\"a\" /* default */])(AsyncSubject, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      if (this.hasError) {\n        subscriber.error(this.thrownError);\n        return Subscription[\"a\" /* Subscription */].EMPTY;\n      } else if (this.hasCompleted && this.hasNext) {\n        subscriber.next(this.value);\n        subscriber.complete();\n        return Subscription[\"a\" /* Subscription */].EMPTY;\n      }\n\n      return Object(get[\"a\" /* default */])(Object(getPrototypeOf[\"a\" /* default */])(AsyncSubject.prototype), \"_subscribe\", this).call(this, subscriber);\n    }\n  }, {\n    key: \"next\",\n    value: function next(value) {\n      if (!this.hasCompleted) {\n        this.value = value;\n        this.hasNext = true;\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(_error) {\n      if (!this.hasCompleted) {\n        Object(get[\"a\" /* default */])(Object(getPrototypeOf[\"a\" /* default */])(AsyncSubject.prototype), \"error\", this).call(this, _error);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.hasCompleted = true;\n\n      if (this.hasNext) {\n        Object(get[\"a\" /* default */])(Object(getPrototypeOf[\"a\" /* default */])(AsyncSubject.prototype), \"next\", this).call(this, this.value);\n      }\n\n      Object(get[\"a\" /* default */])(Object(getPrototypeOf[\"a\" /* default */])(AsyncSubject.prototype), \"complete\", this).call(this);\n    }\n  }]);\n\n  return AsyncSubject;\n}(Subject[\"a\" /* Subject */]);\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/canReportError.js\nvar canReportError = __webpack_require__(\"8Qeq\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js\nvar isScheduler = __webpack_require__(\"z+Ro\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js\n\n\n\n\n\n\n\nfunction bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (Object(isScheduler[\"a\" /* isScheduler */])(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        return bindCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(Object(map[\"a\" /* map */])(function (args) {\n          return Object(isArray[\"a\" /* isArray */])(args) ? resultSelector.apply(void 0, Object(toConsumableArray[\"a\" /* default */])(args)) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var context = this;\n    var subject;\n    var params = {\n      context: context,\n      subject: subject,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler\n    };\n    return new Observable[\"a\" /* Observable */](function (subscriber) {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject_AsyncSubject();\n\n          var handler = function handler() {\n            for (var _len2 = arguments.length, innerArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              innerArgs[_key2] = arguments[_key2];\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [].concat(args, [handler]));\n          } catch (err) {\n            if (Object(canReportError[\"a\" /* canReportError */])(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        var state = {\n          args: args,\n          subscriber: subscriber,\n          params: params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var self = this;\n  var args = state.args,\n      subscriber = state.subscriber,\n      params = state.params;\n  var callbackFunc = params.callbackFunc,\n      context = params.context,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject_AsyncSubject();\n\n    var handler = function handler() {\n      for (var _len3 = arguments.length, innerArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        innerArgs[_key3] = arguments[_key3];\n      }\n\n      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n      _this.add(scheduler.schedule(dispatchNext, 0, {\n        value: value,\n        subject: subject\n      }));\n    };\n\n    try {\n      callbackFunc.apply(context, [].concat(Object(toConsumableArray[\"a\" /* default */])(args), [handler]));\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(state) {\n  var value = state.value,\n      subject = state.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(state) {\n  var err = state.err,\n      subject = state.subject;\n  subject.error(err);\n}\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/of.js\nvar of = __webpack_require__(\"LRne\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/throwError.js\nvar throwError = __webpack_require__(\"z6cu\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js\nvar mergeMap = __webpack_require__(\"5+tZ\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/innerSubscribe.js\nvar innerSubscribe = __webpack_require__(\"zx2A\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/sample.js\n\n\n\n\n\nfunction sample(notifier) {\n  return function (source) {\n    return source.lift(new sample_SampleOperator(notifier));\n  };\n}\n\nvar sample_SampleOperator = /*#__PURE__*/function () {\n  function SampleOperator(notifier) {\n    Object(classCallCheck[\"a\" /* default */])(this, SampleOperator);\n\n    this.notifier = notifier;\n  }\n\n  Object(createClass[\"a\" /* default */])(SampleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var sampleSubscriber = new sample_SampleSubscriber(subscriber);\n      var subscription = source.subscribe(sampleSubscriber);\n      subscription.add(Object(innerSubscribe[\"c\" /* innerSubscribe */])(this.notifier, new innerSubscribe[\"a\" /* SimpleInnerSubscriber */](sampleSubscriber)));\n      return subscription;\n    }\n  }]);\n\n  return SampleOperator;\n}();\n\nvar sample_SampleSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  Object(inherits[\"a\" /* default */])(SampleSubscriber, _SimpleOuterSubscribe);\n\n  var _super = Object(createSuper[\"a\" /* default */])(SampleSubscriber);\n\n  function SampleSubscriber() {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, SampleSubscriber);\n\n    _this = _super.apply(this, arguments);\n    _this.hasValue = false;\n    return _this;\n  }\n\n  Object(createClass[\"a\" /* default */])(SampleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.value = value;\n      this.hasValue = true;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.emitValue();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.emitValue();\n    }\n  }, {\n    key: \"emitValue\",\n    value: function emitValue() {\n      if (this.hasValue) {\n        this.hasValue = false;\n        this.destination.next(this.value);\n      }\n    }\n  }]);\n\n  return SampleSubscriber;\n}(innerSubscribe[\"b\" /* SimpleOuterSubscriber */]);\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js\nvar switchMap = __webpack_require__(\"eIep\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js\n\nfunction shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n      _ref$windowTime = _ref.windowTime,\n      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n      useRefCount = _ref.refCount,\n      scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject[\"a\" /* ReplaySubject */](bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js\nvar distinctUntilChanged = __webpack_require__(\"/uUt\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js\nvar takeUntil = __webpack_require__(\"1G5W\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/startWith.js\nvar startWith = __webpack_require__(\"JX91\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subscriber.js\nvar Subscriber = __webpack_require__(\"7o/Q\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/skip.js\n\n\n\n\n\nfunction skip(count) {\n  return function (source) {\n    return source.lift(new skip_SkipOperator(count));\n  };\n}\n\nvar skip_SkipOperator = /*#__PURE__*/function () {\n  function SkipOperator(total) {\n    Object(classCallCheck[\"a\" /* default */])(this, SkipOperator);\n\n    this.total = total;\n  }\n\n  Object(createClass[\"a\" /* default */])(SkipOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new skip_SkipSubscriber(subscriber, this.total));\n    }\n  }]);\n\n  return SkipOperator;\n}();\n\nvar skip_SkipSubscriber = /*#__PURE__*/function (_Subscriber) {\n  Object(inherits[\"a\" /* default */])(SkipSubscriber, _Subscriber);\n\n  var _super = Object(createSuper[\"a\" /* default */])(SkipSubscriber);\n\n  function SkipSubscriber(destination, total) {\n    var _this;\n\n    Object(classCallCheck[\"a\" /* default */])(this, SkipSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n\n  Object(createClass[\"a\" /* default */])(SkipSubscriber, [{\n    key: \"_next\",\n    value: function _next(x) {\n      if (++this.count > this.total) {\n        this.destination.next(x);\n      }\n    }\n  }]);\n\n  return SkipSubscriber;\n}(Subscriber[\"a\" /* Subscriber */]);\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/multicast.js + 1 modules\nvar multicast = __webpack_require__(\"oB13\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/fesm2015/common.js\nvar common = __webpack_require__(\"SVse\");\n\n// CONCATENATED MODULE: ./node_modules/@agm/core/fesm2015/agm-core.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _c0 = [\"*\"];\n\nvar agm_core_MapsAPILoader = /*@__PURE__*/function () {\n  var MapsAPILoader = function MapsAPILoader() {\n    Object(classCallCheck[\"a\" /* default */])(this, MapsAPILoader);\n  };\n\n  MapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) {\n    return new (t || MapsAPILoader)();\n  };\n\n  MapsAPILoader.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: MapsAPILoader,\n    factory: function factory(t) {\n      return MapsAPILoader.ɵfac(t);\n    }\n  });\n  return MapsAPILoader;\n}();\n\nvar agm_core_GoogleMapsAPIWrapper = /*@__PURE__*/function () {\n  /**\n   * Wrapper class that handles the communication with the Google Maps Javascript\n   * API v3\n   */\n  var GoogleMapsAPIWrapper = /*#__PURE__*/function () {\n    function GoogleMapsAPIWrapper(_loader, _zone) {\n      var _this = this;\n\n      Object(classCallCheck[\"a\" /* default */])(this, GoogleMapsAPIWrapper);\n\n      this._loader = _loader;\n      this._zone = _zone;\n      this._map = new Promise(function (resolve) {\n        _this._mapResolver = resolve;\n      });\n    }\n\n    Object(createClass[\"a\" /* default */])(GoogleMapsAPIWrapper, [{\n      key: \"createMap\",\n      value: function createMap(el, mapOptions) {\n        var _this2 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this2._loader.load().then(function () {\n            var map = new google.maps.Map(el, mapOptions);\n\n            _this2._mapResolver(map);\n\n            return;\n          });\n        });\n      }\n    }, {\n      key: \"setMapOptions\",\n      value: function setMapOptions(options) {\n        var _this3 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          _this3._map.then(function (m) {\n            m.setOptions(options);\n          });\n        });\n      }\n      /**\n       * Creates a google map marker with the map context\n       */\n\n    }, {\n      key: \"createMarker\",\n      value: function createMarker() {\n        var _this4 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var addToMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return this._zone.runOutsideAngular(function () {\n          return _this4._map.then(function (map) {\n            if (addToMap) {\n              options.map = map;\n            }\n\n            return new google.maps.Marker(options);\n          });\n        });\n      }\n    }, {\n      key: \"createInfoWindow\",\n      value: function createInfoWindow(options) {\n        var _this5 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this5._map.then(function () {\n            return new google.maps.InfoWindow(options);\n          });\n        });\n      }\n      /**\n       * Creates a google.map.Circle for the current map.\n       */\n\n    }, {\n      key: \"createCircle\",\n      value: function createCircle(options) {\n        var _this6 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this6._map.then(function (map) {\n            if (typeof options.strokePosition === 'string') {\n              options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n            }\n\n            options.map = map;\n            return new google.maps.Circle(options);\n          });\n        });\n      }\n      /**\n       * Creates a google.map.Rectangle for the current map.\n       */\n\n    }, {\n      key: \"createRectangle\",\n      value: function createRectangle(options) {\n        var _this7 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this7._map.then(function (map) {\n            options.map = map;\n            return new google.maps.Rectangle(options);\n          });\n        });\n      }\n    }, {\n      key: \"createPolyline\",\n      value: function createPolyline(options) {\n        var _this8 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this8.getNativeMap().then(function (map) {\n            var line = new google.maps.Polyline(options);\n            line.setMap(map);\n            return line;\n          });\n        });\n      }\n    }, {\n      key: \"createPolygon\",\n      value: function createPolygon(options) {\n        var _this9 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this9.getNativeMap().then(function (map) {\n            var polygon = new google.maps.Polygon(options);\n            polygon.setMap(map);\n            return polygon;\n          });\n        });\n      }\n      /**\n       * Creates a new google.map.Data layer for the current map\n       */\n\n    }, {\n      key: \"createDataLayer\",\n      value: function createDataLayer(options) {\n        var _this10 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this10._map.then(function (m) {\n            var data = new google.maps.Data(options);\n            data.setMap(m);\n            return data;\n          });\n        });\n      }\n      /**\n       * Creates a TransitLayer instance for a map\n       * @param {TransitLayerOptions} options - used for setting layer options\n       * @returns {Promise<TransitLayer>} a new transit layer object\n       */\n\n    }, {\n      key: \"createTransitLayer\",\n      value: function createTransitLayer(options) {\n        var _this11 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this11._map.then(function (map) {\n            var newLayer = new google.maps.TransitLayer();\n            newLayer.setMap(options.visible ? map : null);\n            return newLayer;\n          });\n        });\n      }\n      /**\n       * Creates a BicyclingLayer instance for a map\n       * @param {BicyclingLayerOptions} options - used for setting layer options\n       * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n       */\n\n    }, {\n      key: \"createBicyclingLayer\",\n      value: function createBicyclingLayer(options) {\n        var _this12 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this12._map.then(function (map) {\n            var newLayer = new google.maps.BicyclingLayer();\n            newLayer.setMap(options.visible ? map : null);\n            return newLayer;\n          });\n        });\n      }\n      /**\n       * Determines if given coordinates are insite a Polygon path.\n       */\n\n    }, {\n      key: \"containsLocation\",\n      value: function containsLocation(latLng, polygon) {\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\n      }\n    }, {\n      key: \"subscribeToMapEvent\",\n      value: function subscribeToMapEvent(eventName) {\n        var _this13 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this13._map.then(function (m) {\n            m.addListener(eventName, function (arg) {\n              _this13._zone.run(function () {\n                return observer.next(arg);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"clearInstanceListeners\",\n      value: function clearInstanceListeners() {\n        var _this14 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          _this14._map.then(function (map) {\n            google.maps.event.clearInstanceListeners(map);\n          });\n        });\n      }\n    }, {\n      key: \"setCenter\",\n      value: function setCenter(latLng) {\n        var _this15 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this15._map.then(function (map) {\n            return map.setCenter(latLng);\n          });\n        });\n      }\n    }, {\n      key: \"getZoom\",\n      value: function getZoom() {\n        var _this16 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this16._map.then(function (map) {\n            return map.getZoom();\n          });\n        });\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        var _this17 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this17._map.then(function (map) {\n            return map.getBounds();\n          });\n        });\n      }\n    }, {\n      key: \"getMapTypeId\",\n      value: function getMapTypeId() {\n        var _this18 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this18._map.then(function (map) {\n            return map.getMapTypeId();\n          });\n        });\n      }\n    }, {\n      key: \"setZoom\",\n      value: function setZoom(zoom) {\n        var _this19 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this19._map.then(function (map) {\n            return map.setZoom(zoom);\n          });\n        });\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter() {\n        var _this20 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this20._map.then(function (map) {\n            return map.getCenter();\n          });\n        });\n      }\n    }, {\n      key: \"panTo\",\n      value: function panTo(latLng) {\n        var _this21 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this21._map.then(function (map) {\n            return map.panTo(latLng);\n          });\n        });\n      }\n    }, {\n      key: \"panBy\",\n      value: function panBy(x, y) {\n        var _this22 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this22._map.then(function (map) {\n            return map.panBy(x, y);\n          });\n        });\n      }\n    }, {\n      key: \"fitBounds\",\n      value: function fitBounds(latLng, padding) {\n        var _this23 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this23._map.then(function (map) {\n            return map.fitBounds(latLng, padding);\n          });\n        });\n      }\n    }, {\n      key: \"panToBounds\",\n      value: function panToBounds(latLng, padding) {\n        var _this24 = this;\n\n        return this._zone.runOutsideAngular(function () {\n          return _this24._map.then(function (map) {\n            return map.panToBounds(latLng, padding);\n          });\n        });\n      }\n      /**\n       * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n       */\n\n    }, {\n      key: \"getNativeMap\",\n      value: function getNativeMap() {\n        return this._map;\n      }\n      /**\n       * Triggers the given event name on the map instance.\n       */\n\n    }, {\n      key: \"triggerMapEvent\",\n      value: function triggerMapEvent(eventName) {\n        return this._map.then(function (m) {\n          return google.maps.event.trigger(m, eventName);\n        });\n      }\n    }]);\n\n    return GoogleMapsAPIWrapper;\n  }();\n\n  GoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) {\n    return new (t || GoogleMapsAPIWrapper)(core[\"fc\" /* ɵɵinject */](agm_core_MapsAPILoader), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  GoogleMapsAPIWrapper.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: GoogleMapsAPIWrapper,\n    factory: function factory(t) {\n      return GoogleMapsAPIWrapper.ɵfac(t);\n    }\n  });\n  GoogleMapsAPIWrapper = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_MapsAPILoader, core[\"B\" /* NgZone */]])], GoogleMapsAPIWrapper);\n  return GoogleMapsAPIWrapper;\n}();\n\nvar agm_core_LayerManager = /*@__PURE__*/function () {\n  /**\n   * This class manages Transit and Bicycling Layers for a Google Map instance.\n   */\n  var LayerManager = /*#__PURE__*/function () {\n    function LayerManager(_wrapper) {\n      Object(classCallCheck[\"a\" /* default */])(this, LayerManager);\n\n      this._wrapper = _wrapper;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n\n\n    Object(createClass[\"a\" /* default */])(LayerManager, [{\n      key: \"addTransitLayer\",\n      value: function addTransitLayer(layer, options) {\n        var newLayer = this._wrapper.createTransitLayer(options);\n\n        this._layers.set(layer, newLayer);\n      }\n      /**\n       * Adds a bicycling layer to a map instance.\n       * @param {AgmBicyclingLayer} layer - a bicycling layer object\n       * @param {BicyclingLayerOptions} options - BicyclingLayer options\n       * @returns void\n       */\n\n    }, {\n      key: \"addBicyclingLayer\",\n      value: function addBicyclingLayer(layer, options) {\n        var newLayer = this._wrapper.createBicyclingLayer(options);\n\n        this._layers.set(layer, newLayer);\n      }\n      /**\n       * Deletes a map layer\n       * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n       * @returns  Promise<void>\n       */\n\n    }, {\n      key: \"deleteLayer\",\n      value: function deleteLayer(layer) {\n        var _this25 = this;\n\n        return this._layers.get(layer).then(function (currentLayer) {\n          currentLayer.setMap(null);\n\n          _this25._layers.delete(layer);\n        });\n      }\n      /**\n       * Hide/Show a google map layer\n       * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n       * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n       * @returns Promise<void>\n       */\n\n    }, {\n      key: \"toggleLayerVisibility\",\n      value: function toggleLayerVisibility(layer, options) {\n        var _this26 = this;\n\n        return this._layers.get(layer).then(function (currentLayer) {\n          if (!options.visible) {\n            currentLayer.setMap(null);\n            return;\n          } else {\n            return _this26._wrapper.getNativeMap().then(function (map) {\n              currentLayer.setMap(map);\n            });\n          }\n        });\n      }\n    }]);\n\n    return LayerManager;\n  }();\n\n  LayerManager.ɵfac = function LayerManager_Factory(t) {\n    return new (t || LayerManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper));\n  };\n\n  LayerManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: LayerManager,\n    factory: function factory(t) {\n      return LayerManager.ɵfac(t);\n    }\n  });\n  LayerManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper])], LayerManager);\n  return LayerManager;\n}();\n\nvar layerId = 0;\n\nvar agm_core_AgmBicyclingLayer = /*@__PURE__*/function () {\n  /*\n   * This directive adds a bicycling layer to a google map instance\n   * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n   * */\n  var AgmBicyclingLayer = /*#__PURE__*/function () {\n    function AgmBicyclingLayer(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmBicyclingLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId++).toString();\n      /**\n       * Hide/show bicycling layer\n       */\n\n      this.visible = true;\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmBicyclingLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addBicyclingLayer(this, {\n          visible: this.visible\n        });\n\n        this._addedToManager = true;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._addedToManager) {\n          return;\n        }\n\n        if (changes['visible'] != null) {\n          this._manager.toggleLayerVisibility(this, {\n            visible: changes['visible'].currentValue\n          });\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmBicyclingLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteLayer(this);\n      }\n    }]);\n\n    return AgmBicyclingLayer;\n  }();\n\n  AgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) {\n    return new (t || AgmBicyclingLayer)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_LayerManager));\n  };\n\n  AgmBicyclingLayer.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmBicyclingLayer,\n    selectors: [[\"agm-bicycling-layer\"]],\n    inputs: {\n      visible: \"visible\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmBicyclingLayer = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_LayerManager])], AgmBicyclingLayer);\n  return AgmBicyclingLayer;\n}();\n\nvar agm_core_CircleManager = /*@__PURE__*/function () {\n  var CircleManager = /*#__PURE__*/function () {\n    function CircleManager(_apiWrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, CircleManager);\n\n      this._apiWrapper = _apiWrapper;\n      this._zone = _zone;\n      this._circles = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(CircleManager, [{\n      key: \"addCircle\",\n      value: function addCircle(circle) {\n        this._circles.set(circle, this._apiWrapper.createCircle({\n          center: {\n            lat: circle.latitude,\n            lng: circle.longitude\n          },\n          clickable: circle.clickable,\n          draggable: circle.draggable,\n          editable: circle.editable,\n          fillColor: circle.fillColor,\n          fillOpacity: circle.fillOpacity,\n          radius: circle.radius,\n          strokeColor: circle.strokeColor,\n          strokeOpacity: circle.strokeOpacity,\n          strokePosition: circle.strokePosition,\n          strokeWeight: circle.strokeWeight,\n          visible: circle.visible,\n          zIndex: circle.zIndex\n        }));\n      }\n      /**\n       * Removes the given circle from the map.\n       */\n\n    }, {\n      key: \"removeCircle\",\n      value: function removeCircle(circle) {\n        var _this27 = this;\n\n        return this._circles.get(circle).then(function (c) {\n          c.setMap(null);\n\n          _this27._circles.delete(circle);\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(circle, options) {\n        return this._circles.get(circle).then(function (c) {\n          if (typeof options.strokePosition === 'string') {\n            options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n          }\n\n          c.setOptions(options);\n        });\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getBounds();\n        });\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getCenter();\n        });\n      }\n    }, {\n      key: \"getRadius\",\n      value: function getRadius(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.getRadius();\n        });\n      }\n    }, {\n      key: \"setCenter\",\n      value: function setCenter(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setCenter({\n            lat: circle.latitude,\n            lng: circle.longitude\n          });\n        });\n      }\n    }, {\n      key: \"setEditable\",\n      value: function setEditable(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setEditable(circle.editable);\n        });\n      }\n    }, {\n      key: \"setDraggable\",\n      value: function setDraggable(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setDraggable(circle.draggable);\n        });\n      }\n    }, {\n      key: \"setVisible\",\n      value: function setVisible(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setVisible(circle.visible);\n        });\n      }\n    }, {\n      key: \"setRadius\",\n      value: function setRadius(circle) {\n        return this._circles.get(circle).then(function (c) {\n          return c.setRadius(circle.radius);\n        });\n      }\n    }, {\n      key: \"getNativeCircle\",\n      value: function getNativeCircle(circle) {\n        return this._circles.get(circle);\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, circle) {\n        var _this28 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          var listener = null;\n\n          _this28._circles.get(circle).then(function (c) {\n            listener = c.addListener(eventName, function (e) {\n              return _this28._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n\n          return function () {\n            if (listener !== null) {\n              listener.remove();\n            }\n          };\n        });\n      }\n    }]);\n\n    return CircleManager;\n  }();\n\n  CircleManager.ɵfac = function CircleManager_Factory(t) {\n    return new (t || CircleManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  CircleManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: CircleManager,\n    factory: function factory(t) {\n      return CircleManager.ɵfac(t);\n    }\n  });\n  CircleManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], CircleManager);\n  return CircleManager;\n}();\n\nvar AgmCircle_1;\n\nvar agm_core_AgmCircle = /*@__PURE__*/function () {\n  var AgmCircle = AgmCircle_1 = /*#__PURE__*/function () {\n    function AgmCircle(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmCircle);\n\n      this._manager = _manager;\n      /**\n       * Indicates whether this Circle handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this circle over the map. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this circle by dragging the control points shown at\n       * the center and around the circumference of the circle. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * The radius in meters on the Earth's surface.\n       */\n\n      this.radius = 0;\n      /**\n       * The stroke position. Defaults to CENTER.\n       * This property is not supported on Internet Explorer 8 and earlier.\n       */\n\n      this.strokePosition = 'CENTER';\n      /**\n       * The stroke width in pixels.\n       */\n\n      this.strokeWeight = 0;\n      /**\n       * Whether this circle is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the circle's center is changed.\n       */\n\n      this.centerChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks on the circle.\n       */\n\n      this.circleClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks on the circle.\n       */\n\n      this.circleDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is repeatedly fired while the user drags the circle.\n       */\n\n      this.drag = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user stops dragging the circle.\n       */\n\n      this.dragEnd = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user starts dragging the circle.\n       */\n\n      this.dragStart = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the circle.\n       */\n\n      this.mouseDown = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the circle.\n       */\n\n      this.mouseMove = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on circle mouseout.\n       */\n\n      this.mouseOut = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on circle mouseover.\n       */\n\n      this.mouseOver = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mouseup event is fired on the circle.\n       */\n\n      this.mouseUp = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the circle's radius is changed.\n       */\n\n      this.radiusChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the circle is right-clicked on.\n       */\n\n      this.rightClick = new core[\"o\" /* EventEmitter */]();\n      this._circleAddedToManager = false;\n      this._eventSubscriptions = [];\n    }\n    /** @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmCircle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._manager.addCircle(this);\n\n        this._circleAddedToManager = true;\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n          return;\n        }\n\n        if (changes['latitude'] || changes['longitude']) {\n          this._manager.setCenter(this);\n        }\n\n        if (changes['editable']) {\n          this._manager.setEditable(this);\n        }\n\n        if (changes['draggable']) {\n          this._manager.setDraggable(this);\n        }\n\n        if (changes['visible']) {\n          this._manager.setVisible(this);\n        }\n\n        if (changes['radius']) {\n          this._manager.setRadius(this);\n        }\n\n        this._updateCircleOptionsChanges(changes);\n      }\n    }, {\n      key: \"_updateCircleOptionsChanges\",\n      value: function _updateCircleOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmCircle_1._mapOptions.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        if (optionKeys.length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this29 = this;\n\n        var events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n          _this29._eventSubscriptions.push(_this29._manager.createEventObservable(eventName, _this29).subscribe(function (value) {\n            switch (eventName) {\n              case 'radius_changed':\n                _this29._manager.getRadius(_this29).then(function (radius) {\n                  return eventEmitter.emit(radius);\n                });\n\n                break;\n\n              case 'center_changed':\n                _this29._manager.getCenter(_this29).then(function (center) {\n                  return eventEmitter.emit({\n                    lat: center.lat(),\n                    lng: center.lng()\n                  });\n                });\n\n                break;\n\n              default:\n                eventEmitter.emit({\n                  coords: {\n                    lat: value.latLng.lat(),\n                    lng: value.latLng.lng()\n                  }\n                });\n            }\n          }));\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n          s.unsubscribe();\n        });\n\n        this._eventSubscriptions = null;\n\n        this._manager.removeCircle(this);\n      }\n      /**\n       * Gets the LatLngBounds of this Circle.\n       */\n\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        return this._manager.getBounds(this);\n      }\n    }, {\n      key: \"getCenter\",\n      value: function getCenter() {\n        return this._manager.getCenter(this);\n      }\n    }]);\n\n    return AgmCircle;\n  }();\n\n  AgmCircle.ɵfac = function AgmCircle_Factory(t) {\n    return new (t || AgmCircle)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_CircleManager));\n  };\n\n  AgmCircle.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmCircle,\n    selectors: [[\"agm-circle\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"circleDraggable\", \"draggable\"],\n      editable: \"editable\",\n      radius: \"radius\",\n      strokePosition: \"strokePosition\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      centerChange: \"centerChange\",\n      circleClick: \"circleClick\",\n      circleDblClick: \"circleDblClick\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      dragStart: \"dragStart\",\n      mouseDown: \"mouseDown\",\n      mouseMove: \"mouseMove\",\n      mouseOut: \"mouseOut\",\n      mouseOver: \"mouseOver\",\n      mouseUp: \"mouseUp\",\n      radiusChange: \"radiusChange\",\n      rightClick: \"rightClick\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n  AgmCircle = AgmCircle_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_CircleManager])], AgmCircle);\n  return AgmCircle;\n}();\n\nvar agm_core_DataLayerManager = /*@__PURE__*/function () {\n  /**\n   * Manages all Data Layers for a Google Map instance.\n   */\n  var DataLayerManager = /*#__PURE__*/function () {\n    function DataLayerManager(_wrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, DataLayerManager);\n\n      this._wrapper = _wrapper;\n      this._zone = _zone;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n\n\n    Object(createClass[\"a\" /* default */])(DataLayerManager, [{\n      key: \"addDataLayer\",\n      value: function addDataLayer(layer) {\n        var _this30 = this;\n\n        var newLayer = this._wrapper.createDataLayer({\n          style: layer.style\n        }).then(function (d) {\n          if (layer.geoJson) {\n            _this30.getDataFeatures(d, layer.geoJson).then(function (features) {\n              return d.features = features;\n            });\n          }\n\n          return d;\n        });\n\n        this._layers.set(layer, newLayer);\n      }\n    }, {\n      key: \"deleteDataLayer\",\n      value: function deleteDataLayer(layer) {\n        var _this31 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.setMap(null);\n\n          _this31._layers.delete(layer);\n        });\n      }\n    }, {\n      key: \"updateGeoJson\",\n      value: function updateGeoJson(layer, geoJson) {\n        var _this32 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.forEach(function (feature) {\n            l.remove(feature);\n            var index = l.features.indexOf(feature, 0);\n\n            if (index > -1) {\n              l.features.splice(index, 1);\n            }\n          });\n\n          _this32.getDataFeatures(l, geoJson).then(function (features) {\n            return l.features = features;\n          });\n        });\n      }\n    }, {\n      key: \"setDataOptions\",\n      value: function setDataOptions(layer, options) {\n        this._layers.get(layer).then(function (l) {\n          l.setControlPosition(options.controlPosition);\n          l.setControls(options.controls);\n          l.setDrawingMode(options.drawingMode);\n          l.setStyle(options.style);\n        });\n      }\n      /**\n       * Creates a Google Maps event listener for the given DataLayer as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, layer) {\n        var _this33 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this33._layers.get(layer).then(function (d) {\n            d.addListener(eventName, function (e) {\n              return _this33._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n      /**\n       * Extract features from a geoJson using google.maps Data Class\n       * @param d : google.maps.Data class instance\n       * @param geoJson : url or geojson object\n       */\n\n    }, {\n      key: \"getDataFeatures\",\n      value: function getDataFeatures(d, geoJson) {\n        return new Promise(function (resolve, reject) {\n          if (typeof geoJson === 'object') {\n            try {\n              var features = d.addGeoJson(geoJson);\n              resolve(features);\n            } catch (e) {\n              reject(e);\n            }\n          } else if (typeof geoJson === 'string') {\n            d.loadGeoJson(geoJson, null, resolve);\n          } else {\n            reject(\"Impossible to extract features from geoJson: wrong argument type\");\n          }\n        });\n      }\n    }]);\n\n    return DataLayerManager;\n  }();\n\n  DataLayerManager.ɵfac = function DataLayerManager_Factory(t) {\n    return new (t || DataLayerManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  DataLayerManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: DataLayerManager,\n    factory: function factory(t) {\n      return DataLayerManager.ɵfac(t);\n    }\n  });\n  DataLayerManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], DataLayerManager);\n  return DataLayerManager;\n}();\n\nvar AgmDataLayer_1;\nvar layerId$1 = 0;\n\nvar agm_core_AgmDataLayer = /*@__PURE__*/function () {\n  /**\n   * AgmDataLayer enables the user to add data layers to the map.\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from 'angular2/core';\n   * import { AgmMap, AgmDataLayer } from\n   * 'angular-google-maps/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  directives: [AgmMap, AgmDataLayer],\n   *  styles: [`\n   *    .agm-container {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n   * \t  </agm-data-layer>\n   * </agm-map>\n   *  `\n   * })\n   * export class MyMapCmp {\n   *   lat: number = -25.274449;\n   *   lng: number = 133.775060;\n   *   zoom: number = 5;\n   *\n   * clicked(clickEvent) {\n   *    console.log(clickEvent);\n   *  }\n   *\n   *  styleFunc(feature) {\n   *    return ({\n   *      clickable: false,\n   *      fillColor: feature.getProperty('color'),\n   *      strokeWeight: 1\n   *    });\n   *  }\n   *\n   *  geoJsonObject: Object = {\n   *    \"type\": \"FeatureCollection\",\n   *    \"features\": [\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"G\",\n   *          \"color\": \"blue\",\n   *          \"rank\": \"7\",\n   *          \"ascii\": \"71\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n   *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n   *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n   *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n   *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n   *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n   *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n   *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n   *            ]\n   *          ]\n   *        }\n   *      },\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"o\",\n   *          \"color\": \"red\",\n   *          \"rank\": \"15\",\n   *          \"ascii\": \"111\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n   *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n   *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n   *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n   *            ],\n   *            [\n   *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n   *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n   *            ]\n   *          ]\n   *        }\n   *      },\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"o\",\n   *          \"color\": \"yellow\",\n   *          \"rank\": \"15\",\n   *          \"ascii\": \"111\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n   *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n   *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n   *              [132.71, -25.64], [131.87, -25.76]\n   *            ],\n   *            [\n   *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n   *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n   *            ]\n   *          ]\n   *        }\n   *      },\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"g\",\n   *          \"color\": \"blue\",\n   *          \"rank\": \"7\",\n   *          \"ascii\": \"103\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n   *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n   *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n   *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n   *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n   *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n   *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n   *            ],\n   *            [\n   *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n   *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n   *            ]\n   *          ]\n   *        }\n   *      },\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"l\",\n   *          \"color\": \"green\",\n   *          \"rank\": \"12\",\n   *          \"ascii\": \"108\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n   *            ]\n   *          ]\n   *        }\n   *      },\n   *      {\n   *        \"type\": \"Feature\",\n   *        \"properties\": {\n   *          \"letter\": \"e\",\n   *          \"color\": \"red\",\n   *          \"rank\": \"5\",\n   *          \"ascii\": \"101\"\n   *        },\n   *        \"geometry\": {\n   *          \"type\": \"Polygon\",\n   *          \"coordinates\": [\n   *            [\n   *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n   *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n   *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n   *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n   *              [144.31, -28.26], [144.14, -27.41]\n   *            ],\n   *            [\n   *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n   *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n   *            ]\n   *          ]\n   *        }\n   *      }\n   *    ]\n   *  };\n   * }\n   * ```\n   */\n  var AgmDataLayer = AgmDataLayer_1 = /*#__PURE__*/function () {\n    function AgmDataLayer(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmDataLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$1++).toString();\n      this._subscriptions = [];\n      /**\n       * This event is fired when a feature in the layer is clicked.\n       */\n\n      this.layerClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * The geoJson to be displayed\n       */\n\n      this.geoJson = null;\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmDataLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addDataLayer(this);\n\n        this._addedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this34 = this;\n\n        var listeners = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this34.layerClick.emit(ev);\n          }\n        }];\n        listeners.forEach(function (obj) {\n          var os = _this34._manager.createEventObservable(obj.name, _this34).subscribe(obj.handler);\n\n          _this34._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmDataLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this35 = this;\n\n        if (!this._addedToManager) {\n          return;\n        }\n\n        var geoJsonChange = changes['geoJson'];\n\n        if (geoJsonChange) {\n          this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n\n        var dataOptions = {};\n\n        AgmDataLayer_1._dataOptionsAttributes.forEach(function (k) {\n          return dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this35[k];\n        });\n\n        this._manager.setDataOptions(this, dataOptions);\n      }\n    }]);\n\n    return AgmDataLayer;\n  }();\n\n  AgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) {\n    return new (t || AgmDataLayer)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_DataLayerManager));\n  };\n\n  AgmDataLayer.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmDataLayer,\n    selectors: [[\"agm-data-layer\"]],\n    inputs: {\n      geoJson: \"geoJson\",\n      style: \"style\"\n    },\n    outputs: {\n      layerClick: \"layerClick\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmDataLayer._dataOptionsAttributes = ['style'];\n  AgmDataLayer = AgmDataLayer_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_DataLayerManager])], AgmDataLayer);\n  return AgmDataLayer;\n}();\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\n\n\nvar agm_core_FitBoundsAccessor = function FitBoundsAccessor() {\n  Object(classCallCheck[\"a\" /* default */])(this, FitBoundsAccessor);\n};\n\nvar agm_core_FitBoundsService = /*@__PURE__*/function () {\n  /**\n   * The FitBoundsService is responsible for computing the bounds of the a single map.\n   */\n  var FitBoundsService = /*#__PURE__*/function () {\n    function FitBoundsService(loader) {\n      var _this36 = this;\n\n      Object(classCallCheck[\"a\" /* default */])(this, FitBoundsService);\n\n      this._boundsChangeSampleTime$ = new BehaviorSubject[\"a\" /* BehaviorSubject */](200);\n      this._includeInBounds$ = new BehaviorSubject[\"a\" /* BehaviorSubject */](new Map());\n      this.bounds$ = Object(from[\"a\" /* from */])(loader.load()).pipe(Object(mergeMap[\"a\" /* flatMap */])(function () {\n        return _this36._includeInBounds$;\n      }), sample(this._boundsChangeSampleTime$.pipe(Object(switchMap[\"a\" /* switchMap */])(function (time) {\n        return Object(timer[\"a\" /* timer */])(0, time);\n      }))), Object(map[\"a\" /* map */])(function (includeInBounds) {\n        return _this36._generateBounds(includeInBounds);\n      }), shareReplay(1));\n    }\n\n    Object(createClass[\"a\" /* default */])(FitBoundsService, [{\n      key: \"_generateBounds\",\n      value: function _generateBounds(includeInBounds) {\n        var bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(function (b) {\n          return bounds.extend(b);\n        });\n        return bounds;\n      }\n    }, {\n      key: \"addToBounds\",\n      value: function addToBounds(latLng) {\n        var id = this._createIdentifier(latLng);\n\n        if (this._includeInBounds$.value.has(id)) {\n          return;\n        }\n\n        var map = this._includeInBounds$.value;\n        map.set(id, latLng);\n\n        this._includeInBounds$.next(map);\n      }\n    }, {\n      key: \"removeFromBounds\",\n      value: function removeFromBounds(latLng) {\n        var map = this._includeInBounds$.value;\n        map.delete(this._createIdentifier(latLng));\n\n        this._includeInBounds$.next(map);\n      }\n    }, {\n      key: \"changeFitBoundsChangeSampleTime\",\n      value: function changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n      }\n    }, {\n      key: \"getBounds$\",\n      value: function getBounds$() {\n        return this.bounds$;\n      }\n    }, {\n      key: \"_createIdentifier\",\n      value: function _createIdentifier(latLng) {\n        return \"\".concat(latLng.lat, \"+\").concat(latLng.lng);\n      }\n    }]);\n\n    return FitBoundsService;\n  }();\n\n  FitBoundsService.ɵfac = function FitBoundsService_Factory(t) {\n    return new (t || FitBoundsService)(core[\"fc\" /* ɵɵinject */](agm_core_MapsAPILoader));\n  };\n\n  FitBoundsService.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: FitBoundsService,\n    factory: function factory(t) {\n      return FitBoundsService.ɵfac(t);\n    }\n  });\n  FitBoundsService = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_MapsAPILoader])], FitBoundsService);\n  return FitBoundsService;\n}();\n\nvar agm_core_AgmFitBounds = /*@__PURE__*/function () {\n  /**\n   * Adds the given directive to the auto fit bounds feature when the value is true.\n   * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n   * @example\n   * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n   */\n  var AgmFitBounds = /*#__PURE__*/function () {\n    function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmFitBounds);\n\n      this._fitBoundsAccessor = _fitBoundsAccessor;\n      this._fitBoundsService = _fitBoundsService;\n      /**\n       * If the value is true, the element gets added to the bounds of the map.\n       * Default: true.\n       */\n\n      this.agmFitBounds = true;\n      this._destroyed$ = new Subject[\"a\" /* Subject */]();\n      this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n\n\n    Object(createClass[\"a\" /* default */])(AgmFitBounds, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._updateBounds();\n      }\n      /**\n       * @internal\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this37 = this;\n\n        this._fitBoundsAccessor.getFitBoundsDetails$().pipe(Object(distinctUntilChanged[\"a\" /* distinctUntilChanged */])(function (x, y) {\n          return x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng;\n        }), Object(takeUntil[\"a\" /* takeUntil */])(this._destroyed$)).subscribe(function (details) {\n          return _this37._updateBounds(details);\n        });\n      }\n      /*\n       Either the location changed, or visible status changed.\n       Possible state changes are\n       invisible -> visible\n       visible -> invisible\n       visible -> visible (new location)\n      */\n\n    }, {\n      key: \"_updateBounds\",\n      value: function _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n          // true -> false -> true, in which case we still need old value cached here\n\n        }\n\n        if (newFitBoundsDetails) {\n          this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n\n        if (!this._latestFitBoundsDetails) {\n          return;\n        }\n\n        if (this.agmFitBounds === true) {\n          this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n      }\n      /**\n       * @internal\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed$.next();\n\n        this._destroyed$.complete();\n\n        if (this._latestFitBoundsDetails !== null) {\n          this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n      }\n    }]);\n\n    return AgmFitBounds;\n  }();\n\n  AgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) {\n    return new (t || AgmFitBounds)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_FitBoundsAccessor, 2), core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_FitBoundsService));\n  };\n\n  AgmFitBounds.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmFitBounds,\n    selectors: [[\"\", \"agmFitBounds\", \"\"]],\n    inputs: {\n      agmFitBounds: \"agmFitBounds\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmFitBounds = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__param\"])(0, Object(core[\"L\" /* Self */])()), Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_FitBoundsAccessor, agm_core_FitBoundsService])], AgmFitBounds);\n  return AgmFitBounds;\n}();\n\nvar agm_core_MarkerManager = /*@__PURE__*/function () {\n  var MarkerManager = /*#__PURE__*/function () {\n    function MarkerManager(_mapsWrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, MarkerManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._markers = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(MarkerManager, [{\n      key: \"convertAnimation\",\n      value: function convertAnimation(uiAnim) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n          return regenerator_default.a.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(uiAnim === null)) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", null);\n\n                case 4:\n                  return _context.abrupt(\"return\", this._mapsWrapper.getNativeMap().then(function () {\n                    return google.maps.Animation[uiAnim];\n                  }));\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"deleteMarker\",\n      value: function deleteMarker(marker) {\n        var _this38 = this;\n\n        var m = this._markers.get(marker);\n\n        if (m == null) {\n          // marker already deleted\n          return Promise.resolve();\n        }\n\n        return m.then(function (m) {\n          return _this38._zone.run(function () {\n            m.setMap(null);\n\n            _this38._markers.delete(marker);\n          });\n        });\n      }\n    }, {\n      key: \"updateMarkerPosition\",\n      value: function updateMarkerPosition(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setPosition({\n            lat: marker.latitude,\n            lng: marker.longitude\n          });\n        });\n      }\n    }, {\n      key: \"updateTitle\",\n      value: function updateTitle(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setTitle(marker.title);\n        });\n      }\n    }, {\n      key: \"updateLabel\",\n      value: function updateLabel(marker) {\n        return this._markers.get(marker).then(function (m) {\n          m.setLabel(marker.label);\n        });\n      }\n    }, {\n      key: \"updateDraggable\",\n      value: function updateDraggable(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setDraggable(marker.draggable);\n        });\n      }\n    }, {\n      key: \"updateIcon\",\n      value: function updateIcon(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setIcon(marker.iconUrl);\n        });\n      }\n    }, {\n      key: \"updateOpacity\",\n      value: function updateOpacity(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setOpacity(marker.opacity);\n        });\n      }\n    }, {\n      key: \"updateVisible\",\n      value: function updateVisible(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setVisible(marker.visible);\n        });\n      }\n    }, {\n      key: \"updateZIndex\",\n      value: function updateZIndex(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setZIndex(marker.zIndex);\n        });\n      }\n    }, {\n      key: \"updateClickable\",\n      value: function updateClickable(marker) {\n        return this._markers.get(marker).then(function (m) {\n          return m.setClickable(marker.clickable);\n        });\n      }\n    }, {\n      key: \"updateAnimation\",\n      value: function updateAnimation(marker) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n          var m;\n          return regenerator_default.a.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this._markers.get(marker);\n\n                case 2:\n                  m = _context2.sent;\n                  _context2.t0 = m;\n                  _context2.next = 6;\n                  return this.convertAnimation(marker.animation);\n\n                case 6:\n                  _context2.t1 = _context2.sent;\n\n                  _context2.t0.setAnimation.call(_context2.t0, _context2.t1);\n\n                case 8:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"addMarker\",\n      value: function addMarker(marker) {\n        var _this39 = this;\n\n        var markerPromise = new Promise(function (resolve) {\n          return Object(tslib_es6[\"__awaiter\"])(_this39, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n            return regenerator_default.a.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.t0 = this._mapsWrapper;\n                    _context3.t1 = {\n                      lat: marker.latitude,\n                      lng: marker.longitude\n                    };\n                    _context3.t2 = marker.label;\n                    _context3.t3 = marker.draggable;\n                    _context3.t4 = marker.iconUrl;\n                    _context3.t5 = marker.opacity;\n                    _context3.t6 = marker.visible;\n                    _context3.t7 = marker.zIndex;\n                    _context3.t8 = marker.title;\n                    _context3.t9 = marker.clickable;\n                    _context3.next = 12;\n                    return this.convertAnimation(marker.animation);\n\n                  case 12:\n                    _context3.t10 = _context3.sent;\n                    _context3.t11 = {\n                      position: _context3.t1,\n                      label: _context3.t2,\n                      draggable: _context3.t3,\n                      icon: _context3.t4,\n                      opacity: _context3.t5,\n                      visible: _context3.t6,\n                      zIndex: _context3.t7,\n                      title: _context3.t8,\n                      clickable: _context3.t9,\n                      animation: _context3.t10\n                    };\n                    return _context3.abrupt(\"return\", _context3.t0.createMarker.call(_context3.t0, _context3.t11).then(resolve));\n\n                  case 15:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3, this);\n          }));\n        });\n\n        this._markers.set(marker, markerPromise);\n      }\n    }, {\n      key: \"getNativeMarker\",\n      value: function getNativeMarker(marker) {\n        return this._markers.get(marker);\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, marker) {\n        var _this40 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this40._markers.get(marker).then(function (m) {\n            m.addListener(eventName, function (e) {\n              return _this40._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return MarkerManager;\n  }();\n\n  MarkerManager.ɵfac = function MarkerManager_Factory(t) {\n    return new (t || MarkerManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  MarkerManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: MarkerManager,\n    factory: function factory(t) {\n      return MarkerManager.ɵfac(t);\n    }\n  });\n  MarkerManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], MarkerManager);\n  return MarkerManager;\n}();\n\nvar agm_core_InfoWindowManager = /*@__PURE__*/function () {\n  var InfoWindowManager = /*#__PURE__*/function () {\n    function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\n      Object(classCallCheck[\"a\" /* default */])(this, InfoWindowManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._markerManager = _markerManager;\n      this._infoWindows = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(InfoWindowManager, [{\n      key: \"deleteInfoWindow\",\n      value: function deleteInfoWindow(infoWindow) {\n        var _this41 = this;\n\n        var iWindow = this._infoWindows.get(infoWindow);\n\n        if (iWindow == null) {\n          // info window already deleted\n          return Promise.resolve();\n        }\n\n        return iWindow.then(function (i) {\n          return _this41._zone.run(function () {\n            i.close();\n\n            _this41._infoWindows.delete(infoWindow);\n          });\n        });\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude\n          });\n        });\n      }\n    }, {\n      key: \"setZIndex\",\n      value: function setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setZIndex(infoWindow.zIndex);\n        });\n      }\n    }, {\n      key: \"open\",\n      value: function open(infoWindow) {\n        var _this42 = this;\n\n        return this._infoWindows.get(infoWindow).then(function (w) {\n          if (infoWindow.hostMarker != null) {\n            return _this42._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\n              return _this42._mapsWrapper.getNativeMap().then(function (map) {\n                return w.open(map, marker);\n              });\n            });\n          }\n\n          return _this42._mapsWrapper.getNativeMap().then(function (map) {\n            return w.open(map);\n          });\n        });\n      }\n    }, {\n      key: \"close\",\n      value: function close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (w) {\n          return w.close();\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then(function (i) {\n          return i.setOptions(options);\n        });\n      }\n    }, {\n      key: \"addInfoWindow\",\n      value: function addInfoWindow(infoWindow) {\n        var options = {\n          content: infoWindow.content,\n          maxWidth: infoWindow.maxWidth,\n          zIndex: infoWindow.zIndex,\n          disableAutoPan: infoWindow.disableAutoPan\n        };\n\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n          options.position = {\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude\n          };\n        }\n\n        var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n      }\n      /**\n       * Creates a Google Maps event listener for the given InfoWindow as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, infoWindow) {\n        var _this43 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this43._infoWindows.get(infoWindow).then(function (i) {\n            i.addListener(eventName, function (e) {\n              return _this43._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return InfoWindowManager;\n  }();\n\n  InfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) {\n    return new (t || InfoWindowManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]), core[\"fc\" /* ɵɵinject */](agm_core_MarkerManager));\n  };\n\n  InfoWindowManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: InfoWindowManager,\n    factory: function factory(t) {\n      return InfoWindowManager.ɵfac(t);\n    }\n  });\n  InfoWindowManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */], agm_core_MarkerManager])], InfoWindowManager);\n  return InfoWindowManager;\n}();\n\nvar AgmInfoWindow_1;\nvar infoWindowId = 0;\n\nvar agm_core_AgmInfoWindow = /*@__PURE__*/function () {\n  /**\n   * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  styles: [`\n   *    .agm-map-container {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n   *        <agm-info-window [disableAutoPan]=\"true\">\n   *          Hi, this is the content of the <strong>info window</strong>\n   *        </agm-info-window>\n   *      </agm-marker>\n   *    </agm-map>\n   *  `\n   * })\n   * ```\n   */\n  var AgmInfoWindow = AgmInfoWindow_1 = /*#__PURE__*/function () {\n    function AgmInfoWindow(_infoWindowManager, _el) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmInfoWindow);\n\n      this._infoWindowManager = _infoWindowManager;\n      this._el = _el;\n      /**\n       * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n       */\n\n      this.isOpen = false;\n      /**\n       * Emits an event when the info window is closed.\n       */\n\n      this.infoWindowClose = new core[\"o\" /* EventEmitter */]();\n      this._infoWindowAddedToManager = false;\n      this._id = (infoWindowId++).toString();\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmInfoWindow, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n\n        this._infoWindowManager.addInfoWindow(this);\n\n        this._infoWindowAddedToManager = true;\n\n        this._updateOpenState();\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n          return;\n        }\n\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {\n          this._infoWindowManager.setPosition(this);\n        }\n\n        if (changes['zIndex']) {\n          this._infoWindowManager.setZIndex(this);\n        }\n\n        if (changes['isOpen']) {\n          this._updateOpenState();\n        }\n\n        this._setInfoWindowOptions(changes);\n      }\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this44 = this;\n\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n          _this44.isOpen = false;\n\n          _this44.infoWindowClose.emit();\n        });\n      }\n    }, {\n      key: \"_updateOpenState\",\n      value: function _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n      }\n    }, {\n      key: \"_setInfoWindowOptions\",\n      value: function _setInfoWindowOptions(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        this._infoWindowManager.setOptions(this, options);\n      }\n      /**\n       * Opens the info window.\n       */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        return this._infoWindowManager.open(this);\n      }\n      /**\n       * Closes the info window.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        var _this45 = this;\n\n        return this._infoWindowManager.close(this).then(function () {\n          _this45.infoWindowClose.emit();\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'AgmInfoWindow-' + this._id.toString();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._infoWindowManager.deleteInfoWindow(this);\n      }\n    }]);\n\n    return AgmInfoWindow;\n  }();\n\n  AgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) {\n    return new (t || AgmInfoWindow)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_InfoWindowManager), core[\"Sb\" /* ɵɵdirectiveInject */](core[\"m\" /* ElementRef */]));\n  };\n\n  AgmInfoWindow.ɵcmp = core[\"Mb\" /* ɵɵdefineComponent */]({\n    type: AgmInfoWindow,\n    selectors: [[\"agm-info-window\"]],\n    inputs: {\n      isOpen: \"isOpen\",\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      disableAutoPan: \"disableAutoPan\",\n      zIndex: \"zIndex\",\n      maxWidth: \"maxWidth\"\n    },\n    outputs: {\n      infoWindowClose: \"infoWindowClose\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"agm-info-window-content\"]],\n    template: function AgmInfoWindow_Template(rf, ctx) {\n      if (rf & 1) {\n        core[\"rc\" /* ɵɵprojectionDef */]();\n        core[\"Yb\" /* ɵɵelementStart */](0, \"div\", 0);\n        core[\"qc\" /* ɵɵprojection */](1);\n        core[\"Xb\" /* ɵɵelementEnd */]();\n      }\n    },\n    encapsulation: 2\n  });\n  AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n  AgmInfoWindow = AgmInfoWindow_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_InfoWindowManager, core[\"m\" /* ElementRef */]])], AgmInfoWindow);\n  return AgmInfoWindow;\n}();\n\nvar agm_core_KmlLayerManager = /*@__PURE__*/function () {\n  /**\n   * Manages all KML Layers for a Google Map instance.\n   */\n  var KmlLayerManager = /*#__PURE__*/function () {\n    function KmlLayerManager(_wrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, KmlLayerManager);\n\n      this._wrapper = _wrapper;\n      this._zone = _zone;\n      this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n\n\n    Object(createClass[\"a\" /* default */])(KmlLayerManager, [{\n      key: \"addKmlLayer\",\n      value: function addKmlLayer(layer) {\n        var newLayer = this._wrapper.getNativeMap().then(function (m) {\n          return new google.maps.KmlLayer({\n            clickable: layer.clickable,\n            map: m,\n            preserveViewport: layer.preserveViewport,\n            screenOverlays: layer.screenOverlays,\n            suppressInfoWindows: layer.suppressInfoWindows,\n            url: layer.url,\n            zIndex: layer.zIndex\n          });\n        });\n\n        this._layers.set(layer, newLayer);\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(layer, options) {\n        this._layers.get(layer).then(function (l) {\n          return l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deleteKmlLayer\",\n      value: function deleteKmlLayer(layer) {\n        var _this46 = this;\n\n        this._layers.get(layer).then(function (l) {\n          l.setMap(null);\n\n          _this46._layers.delete(layer);\n        });\n      }\n      /**\n       * Creates a Google Maps event listener for the given KmlLayer as an Observable\n       */\n\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, layer) {\n        var _this47 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this47._layers.get(layer).then(function (m) {\n            m.addListener(eventName, function (e) {\n              return _this47._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }]);\n\n    return KmlLayerManager;\n  }();\n\n  KmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) {\n    return new (t || KmlLayerManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  KmlLayerManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: KmlLayerManager,\n    factory: function factory(t) {\n      return KmlLayerManager.ɵfac(t);\n    }\n  });\n  KmlLayerManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], KmlLayerManager);\n  return KmlLayerManager;\n}();\n\nvar AgmKmlLayer_1;\nvar layerId$2 = 0;\n\nvar agm_core_AgmKmlLayer = /*@__PURE__*/function () {\n  var AgmKmlLayer = AgmKmlLayer_1 = /*#__PURE__*/function () {\n    function AgmKmlLayer(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmKmlLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$2++).toString();\n      this._subscriptions = [];\n      /**\n       * If true, the layer receives mouse events. Default value is true.\n       */\n\n      this.clickable = true;\n      /**\n       * By default, the input map is centered and zoomed to the bounding box of the contents of the\n       * layer.\n       * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n       * were never set.\n       */\n\n      this.preserveViewport = false;\n      /**\n       * Whether to render the screen overlays. Default true.\n       */\n\n      this.screenOverlays = true;\n      /**\n       * Suppress the rendering of info windows when layer features are clicked.\n       */\n\n      this.suppressInfoWindows = false;\n      /**\n       * The URL of the KML document to display.\n       */\n\n      this.url = null;\n      /**\n       * The z-index of the layer.\n       */\n\n      this.zIndex = null;\n      /**\n       * This event is fired when a feature in the layer is clicked.\n       */\n\n      this.layerClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the KML layers default viewport has changed.\n       */\n\n      this.defaultViewportChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the KML layer has finished loading.\n       * At this point it is safe to read the status property to determine if the layer loaded\n       * successfully.\n       */\n\n      this.statusChange = new core[\"o\" /* EventEmitter */]();\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmKmlLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addKmlLayer(this);\n\n        this._addedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._addedToManager) {\n          return;\n        }\n\n        this._updatePolygonOptions(changes);\n      }\n    }, {\n      key: \"_updatePolygonOptions\",\n      value: function _updatePolygonOptions(changes) {\n        var options = Object.keys(changes).filter(function (k) {\n          return AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1;\n        }).reduce(function (obj, k) {\n          obj[k] = changes[k].currentValue;\n          return obj;\n        }, {});\n\n        if (Object.keys(options).length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this48 = this;\n\n        var listeners = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this48.layerClick.emit(ev);\n          }\n        }, {\n          name: 'defaultviewport_changed',\n          handler: function handler() {\n            return _this48.defaultViewportChange.emit();\n          }\n        }, {\n          name: 'status_changed',\n          handler: function handler() {\n            return _this48.statusChange.emit();\n          }\n        }];\n        listeners.forEach(function (obj) {\n          var os = _this48._manager.createEventObservable(obj.name, _this48).subscribe(obj.handler);\n\n          _this48._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmKmlLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmKmlLayer;\n  }();\n\n  AgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) {\n    return new (t || AgmKmlLayer)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_KmlLayerManager));\n  };\n\n  AgmKmlLayer.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmKmlLayer,\n    selectors: [[\"agm-kml-layer\"]],\n    inputs: {\n      clickable: \"clickable\",\n      preserveViewport: \"preserveViewport\",\n      screenOverlays: \"screenOverlays\",\n      suppressInfoWindows: \"suppressInfoWindows\",\n      url: \"url\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      layerClick: \"layerClick\",\n      defaultViewportChange: \"defaultViewportChange\",\n      statusChange: \"statusChange\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n  AgmKmlLayer = AgmKmlLayer_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_KmlLayerManager])], AgmKmlLayer);\n  return AgmKmlLayer;\n}();\n\nfunction createMVCEventObservable(array) {\n  var eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(function (handler) {\n    return eventNames.map(function (evName) {\n      return array.addListener(evName, function (index, previous) {\n        return handler.apply(array, [{\n          'newArr': array.getArray(),\n          evName: evName,\n          index: index,\n          previous: previous\n        }]);\n      });\n    });\n  }, function (_handler, evListeners) {\n    return evListeners.forEach(function (evListener) {\n      return evListener.remove();\n    });\n  });\n}\n\nvar agm_core_MvcArrayMock = /*#__PURE__*/function () {\n  function MvcArrayMock() {\n    Object(classCallCheck[\"a\" /* default */])(this, MvcArrayMock);\n\n    this.vals = [];\n    this.listeners = {\n      'remove_at': [],\n      'insert_at': [],\n      'set_at': []\n    };\n  }\n\n  Object(createClass[\"a\" /* default */])(MvcArrayMock, [{\n    key: \"clear\",\n    value: function clear() {\n      for (var i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n      }\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return Object(toConsumableArray[\"a\" /* default */])(this.vals);\n    }\n  }, {\n    key: \"getAt\",\n    value: function getAt(i) {\n      return this.vals[i];\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.vals.length;\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(i, elem) {\n      this.vals.splice(i, 0, elem);\n      this.listeners.insert_at.map(function (listener) {\n        return listener(i);\n      });\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var _this49 = this;\n\n      var deleted = this.vals.pop();\n      this.listeners.remove_at.map(function (listener) {\n        return listener(_this49.vals.length, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"push\",\n    value: function push(elem) {\n      var _this50 = this;\n\n      this.vals.push(elem);\n      this.listeners.insert_at.map(function (listener) {\n        return listener(_this50.vals.length - 1);\n      });\n      return this.vals.length;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(i) {\n      var deleted = this.vals.splice(i, 1)[0];\n      this.listeners.remove_at.map(function (listener) {\n        return listener(i, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"setAt\",\n    value: function setAt(i, elem) {\n      var deleted = this.vals[i];\n      this.vals[i] = elem;\n      this.listeners.set_at.map(function (listener) {\n        return listener(i, deleted);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this.vals.forEach(callback);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, handler) {\n      var listenerArr = this.listeners[eventName];\n      listenerArr.push(handler);\n      return {\n        remove: function remove() {\n          listenerArr.splice(listenerArr.indexOf(handler), 1);\n        }\n      };\n    }\n  }]);\n\n  return MvcArrayMock;\n}();\n\nvar agm_core_PolygonManager = /*@__PURE__*/function () {\n  var PolygonManager = /*#__PURE__*/function () {\n    function PolygonManager(_mapsWrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, PolygonManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._polygons = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(PolygonManager, [{\n      key: \"addPolygon\",\n      value: function addPolygon(path) {\n        var polygonPromise = this._mapsWrapper.createPolygon({\n          clickable: path.clickable,\n          draggable: path.draggable,\n          editable: path.editable,\n          fillColor: path.fillColor,\n          fillOpacity: path.fillOpacity,\n          geodesic: path.geodesic,\n          paths: path.paths,\n          strokeColor: path.strokeColor,\n          strokeOpacity: path.strokeOpacity,\n          strokeWeight: path.strokeWeight,\n          visible: path.visible,\n          zIndex: path.zIndex\n        });\n\n        this._polygons.set(path, polygonPromise);\n      }\n    }, {\n      key: \"updatePolygon\",\n      value: function updatePolygon(polygon) {\n        var _this51 = this;\n\n        var m = this._polygons.get(polygon);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this51._zone.run(function () {\n            l.setPaths(polygon.paths);\n          });\n        });\n      }\n    }, {\n      key: \"setPolygonOptions\",\n      value: function setPolygonOptions(path, options) {\n        return this._polygons.get(path).then(function (l) {\n          l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deletePolygon\",\n      value: function deletePolygon(paths) {\n        var _this52 = this;\n\n        var m = this._polygons.get(paths);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this52._zone.run(function () {\n            l.setMap(null);\n\n            _this52._polygons.delete(paths);\n          });\n        });\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath(polygon) {\n        return this._polygons.get(polygon).then(function (polygon) {\n          return polygon.getPath().getArray();\n        });\n      }\n    }, {\n      key: \"getPaths\",\n      value: function getPaths(polygon) {\n        return this._polygons.get(polygon).then(function (polygon) {\n          return polygon.getPaths().getArray().map(function (p) {\n            return p.getArray();\n          });\n        });\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, path) {\n        var _this53 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this53._polygons.get(path).then(function (l) {\n            l.addListener(eventName, function (e) {\n              return _this53._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"createPathEventObservable\",\n      value: function createPathEventObservable(agmPolygon) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee4() {\n          var polygon, paths, pathsChanges$;\n          return regenerator_default.a.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return this._polygons.get(agmPolygon);\n\n                case 2:\n                  polygon = _context4.sent;\n                  paths = polygon.getPaths();\n                  pathsChanges$ = createMVCEventObservable(paths);\n                  return _context4.abrupt(\"return\", pathsChanges$.pipe(Object(startWith[\"a\" /* startWith */])({\n                    newArr: paths.getArray()\n                  }), // in order to subscribe to them all\n                  Object(switchMap[\"a\" /* switchMap */])(function (parentMVEvent) {\n                    return merge[\"a\" /* merge */].apply(void 0, Object(toConsumableArray[\"a\" /* default */])( // rest parameter\n                    parentMVEvent.newArr.map(function (chMVC, index) {\n                      return createMVCEventObservable(chMVC).pipe(Object(map[\"a\" /* map */])(function (chMVCEvent) {\n                        return {\n                          parentMVEvent: parentMVEvent,\n                          chMVCEvent: chMVCEvent,\n                          pathIndex: index\n                        };\n                      }));\n                    }))).pipe(Object(startWith[\"a\" /* startWith */])({\n                      parentMVEvent: parentMVEvent,\n                      chMVCEvent: null,\n                      pathIndex: null\n                    }));\n                  }), // start the merged ob with an event signinifing change to parent\n                  skip(1), // skip the manually added event\n                  Object(map[\"a\" /* map */])(function (_ref) {\n                    var parentMVEvent = _ref.parentMVEvent,\n                        chMVCEvent = _ref.chMVCEvent,\n                        pathIndex = _ref.pathIndex;\n                    var retVal;\n\n                    if (!chMVCEvent) {\n                      retVal = {\n                        newArr: parentMVEvent.newArr.map(function (subArr) {\n                          return subArr.getArray().map(function (latLng) {\n                            return latLng.toJSON();\n                          });\n                        }),\n                        eventName: parentMVEvent.evName,\n                        index: parentMVEvent.index\n                      };\n\n                      if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                      }\n                    } else {\n                      retVal = {\n                        newArr: parentMVEvent.newArr.map(function (subArr) {\n                          return subArr.getArray().map(function (latLng) {\n                            return latLng.toJSON();\n                          });\n                        }),\n                        pathIndex: pathIndex,\n                        eventName: chMVCEvent.evName,\n                        index: chMVCEvent.index\n                      };\n\n                      if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                      }\n                    }\n\n                    return retVal;\n                  })));\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      }\n    }]);\n\n    return PolygonManager;\n  }();\n\n  PolygonManager.ɵfac = function PolygonManager_Factory(t) {\n    return new (t || PolygonManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  PolygonManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: PolygonManager,\n    factory: function factory(t) {\n      return PolygonManager.ɵfac(t);\n    }\n  });\n  PolygonManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], PolygonManager);\n  return PolygonManager;\n}();\n\nvar PolylineManager_1;\n\nvar agm_core_PolylineManager = /*@__PURE__*/function () {\n  var PolylineManager = PolylineManager_1 = /*#__PURE__*/function () {\n    function PolylineManager(_mapsWrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, PolylineManager);\n\n      this._mapsWrapper = _mapsWrapper;\n      this._zone = _zone;\n      this._polylines = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(PolylineManager, [{\n      key: \"addPolyline\",\n      value: function addPolyline(line) {\n        var _this54 = this;\n\n        var polylinePromise = this._mapsWrapper.getNativeMap().then(function () {\n          return [PolylineManager_1._convertPoints(line), PolylineManager_1._convertIcons(line)];\n        }).then(function (_ref2) {\n          var _ref3 = Object(slicedToArray[\"a\" /* default */])(_ref2, 2),\n              path = _ref3[0],\n              icons = _ref3[1];\n\n          return _this54._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path: path,\n            icons: icons\n          });\n        });\n\n        this._polylines.set(line, polylinePromise);\n      }\n    }, {\n      key: \"updatePolylinePoints\",\n      value: function updatePolylinePoints(line) {\n        var _this55 = this;\n\n        var path = PolylineManager_1._convertPoints(line);\n\n        var m = this._polylines.get(line);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this55._zone.run(function () {\n            l.setPath(path);\n          });\n        });\n      }\n    }, {\n      key: \"updateIconSequences\",\n      value: function updateIconSequences(line) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee5() {\n          var _this56 = this;\n\n          var icons, m;\n          return regenerator_default.a.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return this._mapsWrapper.getNativeMap();\n\n                case 2:\n                  icons = PolylineManager_1._convertIcons(line);\n                  m = this._polylines.get(line);\n\n                  if (!(m == null)) {\n                    _context5.next = 6;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 6:\n                  return _context5.abrupt(\"return\", m.then(function (l) {\n                    return _this56._zone.run(function () {\n                      return l.setOptions({\n                        icons: icons\n                      });\n                    });\n                  }));\n\n                case 7:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n      }\n    }, {\n      key: \"setPolylineOptions\",\n      value: function setPolylineOptions(line, options) {\n        return this._polylines.get(line).then(function (l) {\n          l.setOptions(options);\n        });\n      }\n    }, {\n      key: \"deletePolyline\",\n      value: function deletePolyline(line) {\n        var _this57 = this;\n\n        var m = this._polylines.get(line);\n\n        if (m == null) {\n          return Promise.resolve();\n        }\n\n        return m.then(function (l) {\n          return _this57._zone.run(function () {\n            l.setMap(null);\n\n            _this57._polylines.delete(line);\n          });\n        });\n      }\n    }, {\n      key: \"getMVCPath\",\n      value: function getMVCPath(agmPolyline) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee6() {\n          var polyline;\n          return regenerator_default.a.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return this._polylines.get(agmPolyline);\n\n                case 2:\n                  polyline = _context6.sent;\n                  return _context6.abrupt(\"return\", polyline.getPath());\n\n                case 4:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath(agmPolyline) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee7() {\n          return regenerator_default.a.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return this.getMVCPath(agmPolyline);\n\n                case 2:\n                  return _context7.abrupt(\"return\", _context7.sent.getArray());\n\n                case 3:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this);\n        }));\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, line) {\n        var _this58 = this;\n\n        return new Observable[\"a\" /* Observable */](function (observer) {\n          _this58._polylines.get(line).then(function (l) {\n            l.addListener(eventName, function (e) {\n              return _this58._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n        });\n      }\n    }, {\n      key: \"createPathEventObservable\",\n      value: function createPathEventObservable(line) {\n        return Object(tslib_es6[\"__awaiter\"])(this, void 0, void 0, /*#__PURE__*/regenerator_default.a.mark(function _callee8() {\n          var mvcPath;\n          return regenerator_default.a.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return this.getMVCPath(line);\n\n                case 2:\n                  mvcPath = _context8.sent;\n                  return _context8.abrupt(\"return\", createMVCEventObservable(mvcPath));\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n      }\n    }], [{\n      key: \"_convertPoints\",\n      value: function _convertPoints(line) {\n        var path = line._getPoints().map(function (point) {\n          return {\n            lat: point.latitude,\n            lng: point.longitude\n          };\n        });\n\n        return path;\n      }\n    }, {\n      key: \"_convertPath\",\n      value: function _convertPath(path) {\n        var symbolPath = google.maps.SymbolPath[path];\n\n        if (typeof symbolPath === 'number') {\n          return symbolPath;\n        } else {\n          return path;\n        }\n      }\n    }, {\n      key: \"_convertIcons\",\n      value: function _convertIcons(line) {\n        var icons = line._getIcons().map(function (agmIcon) {\n          return {\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n              anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n              fillColor: agmIcon.fillColor,\n              fillOpacity: agmIcon.fillOpacity,\n              path: PolylineManager_1._convertPath(agmIcon.path),\n              rotation: agmIcon.rotation,\n              scale: agmIcon.scale,\n              strokeColor: agmIcon.strokeColor,\n              strokeOpacity: agmIcon.strokeOpacity,\n              strokeWeight: agmIcon.strokeWeight\n            }\n          };\n        }); // prune undefineds;\n\n\n        icons.forEach(function (icon) {\n          Object.entries(icon).forEach(function (_ref4) {\n            var _ref5 = Object(slicedToArray[\"a\" /* default */])(_ref4, 2),\n                key = _ref5[0],\n                val = _ref5[1];\n\n            if (typeof val === 'undefined') {\n              delete icon[key];\n            }\n          });\n\n          if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {\n            delete icon.icon.anchor;\n          }\n        });\n        return icons;\n      }\n    }]);\n\n    return PolylineManager;\n  }();\n\n  PolylineManager.ɵfac = function PolylineManager_Factory(t) {\n    return new (t || PolylineManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  PolylineManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: PolylineManager,\n    factory: function factory(t) {\n      return PolylineManager.ɵfac(t);\n    }\n  });\n  PolylineManager = PolylineManager_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], PolylineManager);\n  return PolylineManager;\n}();\n\nvar agm_core_RectangleManager = /*@__PURE__*/function () {\n  var RectangleManager = /*#__PURE__*/function () {\n    function RectangleManager(_apiWrapper, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, RectangleManager);\n\n      this._apiWrapper = _apiWrapper;\n      this._zone = _zone;\n      this._rectangles = new Map();\n    }\n\n    Object(createClass[\"a\" /* default */])(RectangleManager, [{\n      key: \"addRectangle\",\n      value: function addRectangle(rectangle) {\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n          bounds: {\n            north: rectangle.north,\n            east: rectangle.east,\n            south: rectangle.south,\n            west: rectangle.west\n          },\n          clickable: rectangle.clickable,\n          draggable: rectangle.draggable,\n          editable: rectangle.editable,\n          fillColor: rectangle.fillColor,\n          fillOpacity: rectangle.fillOpacity,\n          strokeColor: rectangle.strokeColor,\n          strokeOpacity: rectangle.strokeOpacity,\n          strokePosition: rectangle.strokePosition,\n          strokeWeight: rectangle.strokeWeight,\n          visible: rectangle.visible,\n          zIndex: rectangle.zIndex\n        }));\n      }\n      /**\n       * Removes the given rectangle from the map.\n       */\n\n    }, {\n      key: \"removeRectangle\",\n      value: function removeRectangle(rectangle) {\n        var _this59 = this;\n\n        return this._rectangles.get(rectangle).then(function (r) {\n          r.setMap(null);\n\n          _this59._rectangles.delete(rectangle);\n        });\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setOptions(options);\n        });\n      }\n    }, {\n      key: \"getBounds\",\n      value: function getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.getBounds();\n        });\n      }\n    }, {\n      key: \"setBounds\",\n      value: function setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setBounds({\n            north: rectangle.north,\n            east: rectangle.east,\n            south: rectangle.south,\n            west: rectangle.west\n          });\n        });\n      }\n    }, {\n      key: \"setEditable\",\n      value: function setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setEditable(rectangle.editable);\n        });\n      }\n    }, {\n      key: \"setDraggable\",\n      value: function setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setDraggable(rectangle.draggable);\n        });\n      }\n    }, {\n      key: \"setVisible\",\n      value: function setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n          return r.setVisible(rectangle.visible);\n        });\n      }\n    }, {\n      key: \"createEventObservable\",\n      value: function createEventObservable(eventName, rectangle) {\n        var _this60 = this;\n\n        return Observable[\"a\" /* Observable */].create(function (observer) {\n          var listener = null;\n\n          _this60._rectangles.get(rectangle).then(function (r) {\n            listener = r.addListener(eventName, function (e) {\n              return _this60._zone.run(function () {\n                return observer.next(e);\n              });\n            });\n          });\n\n          return function () {\n            if (listener !== null) {\n              listener.remove();\n            }\n          };\n        });\n      }\n    }]);\n\n    return RectangleManager;\n  }();\n\n  RectangleManager.ɵfac = function RectangleManager_Factory(t) {\n    return new (t || RectangleManager)(core[\"fc\" /* ɵɵinject */](agm_core_GoogleMapsAPIWrapper), core[\"fc\" /* ɵɵinject */](core[\"B\" /* NgZone */]));\n  };\n\n  RectangleManager.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: RectangleManager,\n    factory: function factory(t) {\n      return RectangleManager.ɵfac(t);\n    }\n  });\n  RectangleManager = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_GoogleMapsAPIWrapper, core[\"B\" /* NgZone */]])], RectangleManager);\n  return RectangleManager;\n}();\n\nvar AgmMap_1;\n\nvar agm_core_AgmMap = /*@__PURE__*/function () {\n  /**\n   * AgmMap renders a Google Map.\n   * **Important note**: To be able see a map in the browser, you have to define a height for the\n   * element `agm-map`.\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  styles: [`\n   *    agm-map {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *    </agm-map>\n   *  `\n   * })\n   * ```\n   */\n  var AgmMap = AgmMap_1 = /*#__PURE__*/function () {\n    function AgmMap(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmMap);\n\n      this._elem = _elem;\n      this._mapsWrapper = _mapsWrapper;\n      this._platformId = _platformId;\n      this._fitBoundsService = _fitBoundsService;\n      this._zone = _zone;\n      /**\n       * The longitude that defines the center of the map.\n       */\n\n      this.longitude = 0;\n      /**\n       * The latitude that defines the center of the map.\n       */\n\n      this.latitude = 0;\n      /**\n       * The zoom level of the map. The default zoom level is 8.\n       */\n\n      this.zoom = 8;\n      /**\n       * Enables/disables if map is draggable.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = true;\n      /**\n       * Enables/disables zoom and center on double click. Enabled by default.\n       */\n\n      this.disableDoubleClickZoom = false;\n      /**\n       * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n       * value cannot get updated.\n       */\n\n      this.disableDefaultUI = false;\n      /**\n       * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n       */\n\n      this.scrollwheel = true;\n      /**\n       * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n       * enabled by default.\n       */\n\n      this.keyboardShortcuts = true;\n      /**\n       * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n       * modes, these styles will only apply to labels and geometry.\n       */\n\n      this.styles = [];\n      /**\n       * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n       * used to\n       * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n       */\n\n      this.usePanning = false;\n      /**\n       * Sets the viewport to contain the given bounds.\n       * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n       */\n\n      this.fitBounds = false;\n      /**\n       * The initial enabled/disabled state of the Scale control. This is disabled by default.\n       */\n\n      this.scaleControl = false;\n      /**\n       * The initial enabled/disabled state of the Map type control.\n       */\n\n      this.mapTypeControl = false;\n      /**\n       * The initial enabled/disabled state of the Pan control.\n       */\n\n      this.panControl = false;\n      /**\n       * The initial enabled/disabled state of the Rotate control.\n       */\n\n      this.rotateControl = false;\n      /**\n       * The initial enabled/disabled state of the Fullscreen control.\n       */\n\n      this.fullscreenControl = false;\n      /**\n       * The map mapTypeId. Defaults to 'roadmap'.\n       */\n\n      this.mapTypeId = 'roadmap';\n      /**\n       * When false, map icons are not clickable. A map icon represents a point of interest,\n       * also known as a POI. By default map icons are clickable.\n       */\n\n      this.clickableIcons = true;\n      /**\n       * A map icon represents a point of interest, also known as a POI.\n       * When map icons are clickable by default, an info window is displayed.\n       * When this property is set to false, the info window will not be shown but the click event\n       * will still fire\n       */\n\n      this.showDefaultInfoWindow = true;\n      /**\n       * This setting controls how gestures on the map are handled.\n       * Allowed values:\n       * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n       * - 'greedy'      (All touch gestures pan or zoom the map.)\n       * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n       * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n       */\n\n      this.gestureHandling = 'auto';\n      /**\n       * Controls the automatic switching behavior for the angle of incidence of\n       * the map. The only allowed values are 0 and 45. The value 0 causes the map\n       * to always use a 0° overhead view regardless of the zoom level and\n       * viewport. The value 45 causes the tilt angle to automatically switch to\n       * 45 whenever 45° imagery is available for the current zoom level and\n       * viewport, and switch back to 0 whenever 45° imagery is not available\n       * (this is the default behavior). 45° imagery is only available for\n       * satellite and hybrid map types, within some locations, and at some zoom\n       * levels. Note: getTilt returns the current tilt angle, not the value\n       * specified by this option. Because getTilt and this option refer to\n       * different things, do not bind() the tilt property; doing so may yield\n       * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n       */\n\n      this.tilt = 0;\n      this._observableSubscriptions = [];\n      /**\n       * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n       * marker or infoWindow).\n       */\n\n      this.mapClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n       * on a marker or infoWindow).\n       */\n\n      this.mapRightClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n       * on a marker or infoWindow).\n       */\n\n      this.mapDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter is fired when the map center changes.\n       */\n\n      this.centerChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the viewport bounds have changed.\n       */\n\n      this.boundsChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the mapTypeId property changes.\n       */\n\n      this.mapTypeIdChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the map becomes idle after panning or zooming.\n       */\n\n      this.idle = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the zoom level has changed.\n       */\n\n      this.zoomChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the google map is fully initialized.\n       * You get the google.maps.Map instance as a result of this EventEmitter.\n       */\n\n      this.mapReady = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the visible tiles have finished loading.\n       */\n\n      this.tilesLoaded = new core[\"o\" /* EventEmitter */]();\n    }\n    /** @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmMap, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (Object(common[\"D\" /* isPlatformServer */])(this._platformId)) {\n          // The code is running on the server, do nothing\n          return;\n        } // todo: this should be solved with a new component and a viewChild decorator\n\n\n        var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n\n        this._initMapInstance(container);\n      }\n    }, {\n      key: \"_initMapInstance\",\n      value: function _initMapInstance(el) {\n        var _this61 = this;\n\n        this._mapsWrapper.createMap(el, {\n          center: {\n            lat: this.latitude || 0,\n            lng: this.longitude || 0\n          },\n          zoom: this.zoom,\n          minZoom: this.minZoom,\n          maxZoom: this.maxZoom,\n          controlSize: this.controlSize,\n          disableDefaultUI: this.disableDefaultUI,\n          disableDoubleClickZoom: this.disableDoubleClickZoom,\n          scrollwheel: this.scrollwheel,\n          backgroundColor: this.backgroundColor,\n          draggable: this.draggable,\n          draggableCursor: this.draggableCursor,\n          draggingCursor: this.draggingCursor,\n          keyboardShortcuts: this.keyboardShortcuts,\n          styles: this.styles,\n          zoomControl: this.zoomControl,\n          zoomControlOptions: this.zoomControlOptions,\n          streetViewControl: this.streetViewControl,\n          streetViewControlOptions: this.streetViewControlOptions,\n          scaleControl: this.scaleControl,\n          scaleControlOptions: this.scaleControlOptions,\n          mapTypeControl: this.mapTypeControl,\n          mapTypeControlOptions: this.mapTypeControlOptions,\n          panControl: this.panControl,\n          panControlOptions: this.panControlOptions,\n          rotateControl: this.rotateControl,\n          rotateControlOptions: this.rotateControlOptions,\n          fullscreenControl: this.fullscreenControl,\n          fullscreenControlOptions: this.fullscreenControlOptions,\n          mapTypeId: this.mapTypeId,\n          clickableIcons: this.clickableIcons,\n          gestureHandling: this.gestureHandling,\n          tilt: this.tilt,\n          restriction: this.restriction\n        }).then(function () {\n          return _this61._mapsWrapper.getNativeMap();\n        }).then(function (map) {\n          return _this61.mapReady.emit(map);\n        }); // register event listeners\n\n\n        this._handleMapCenterChange();\n\n        this._handleMapZoomChange();\n\n        this._handleMapMouseEvents();\n\n        this._handleBoundsChange();\n\n        this._handleMapTypeIdChange();\n\n        this._handleTilesLoadedEvent();\n\n        this._handleIdleEvent();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        }); // remove all listeners from the map instance\n\n\n        this._mapsWrapper.clearInstanceListeners();\n\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n      }\n      /* @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n\n        this._updatePosition(changes);\n      }\n    }, {\n      key: \"_updateMapOptionsChanges\",\n      value: function _updateMapOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        this._mapsWrapper.setMapOptions(options);\n      }\n      /**\n       * Triggers a resize event on the google map instance.\n       * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n       * Returns a promise that gets resolved after the event was triggered.\n       */\n\n    }, {\n      key: \"triggerResize\",\n      value: function triggerResize() {\n        var _this62 = this;\n\n        var recenter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            return _this62._mapsWrapper.triggerMapEvent('resize').then(function () {\n              if (recenter) {\n                _this62.fitBounds != null ? _this62._fitBounds() : _this62._setCenter();\n              }\n\n              resolve();\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition(changes) {\n        if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {\n          // no position update needed\n          return;\n        } // we prefer fitBounds in changes\n\n\n        if ('fitBounds' in changes) {\n          this._fitBounds();\n\n          return;\n        }\n\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n          return;\n        }\n\n        this._setCenter();\n      }\n    }, {\n      key: \"_setCenter\",\n      value: function _setCenter() {\n        var newCenter = {\n          lat: this.latitude,\n          lng: this.longitude\n        };\n\n        if (this.usePanning) {\n          this._mapsWrapper.panTo(newCenter);\n        } else {\n          this._mapsWrapper.setCenter(newCenter);\n        }\n      }\n    }, {\n      key: \"_fitBounds\",\n      value: function _fitBounds() {\n        switch (this.fitBounds) {\n          case true:\n            this._subscribeToFitBoundsUpdates();\n\n            break;\n\n          case false:\n            if (this._fitBoundsSubscription) {\n              this._fitBoundsSubscription.unsubscribe();\n            }\n\n            break;\n\n          default:\n            this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n\n        }\n      }\n    }, {\n      key: \"_subscribeToFitBoundsUpdates\",\n      value: function _subscribeToFitBoundsUpdates() {\n        var _this63 = this;\n\n        this._zone.runOutsideAngular(function () {\n          _this63._fitBoundsSubscription = _this63._fitBoundsService.getBounds$().subscribe(function (b) {\n            _this63._zone.run(function () {\n              return _this63._updateBounds(b, _this63.fitBoundsPadding);\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updateBounds\",\n      value: function _updateBounds(bounds, padding) {\n        if (!bounds) {\n          return;\n        }\n\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n          var newBounds = new google.maps.LatLngBounds();\n          newBounds.union(bounds);\n          bounds = newBounds;\n        }\n\n        if (this.usePanning) {\n          this._mapsWrapper.panToBounds(bounds, padding);\n\n          return;\n        }\n\n        this._mapsWrapper.fitBounds(bounds, padding);\n      }\n    }, {\n      key: \"_isLatLngBoundsLiteral\",\n      value: function _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n      }\n    }, {\n      key: \"_handleMapCenterChange\",\n      value: function _handleMapCenterChange() {\n        var _this64 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\n          _this64._mapsWrapper.getCenter().then(function (center) {\n            _this64.latitude = center.lat();\n            _this64.longitude = center.lng();\n\n            _this64.centerChange.emit({\n              lat: _this64.latitude,\n              lng: _this64.longitude\n            });\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleBoundsChange\",\n      value: function _handleBoundsChange() {\n        var _this65 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\n          _this65._mapsWrapper.getBounds().then(function (bounds) {\n            _this65.boundsChange.emit(bounds);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapTypeIdChange\",\n      value: function _handleMapTypeIdChange() {\n        var _this66 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\n          _this66._mapsWrapper.getMapTypeId().then(function (mapTypeId) {\n            _this66.mapTypeIdChange.emit(mapTypeId);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapZoomChange\",\n      value: function _handleMapZoomChange() {\n        var _this67 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\n          _this67._mapsWrapper.getZoom().then(function (z) {\n            _this67.zoom = z;\n\n            _this67.zoomChange.emit(z);\n          });\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleIdleEvent\",\n      value: function _handleIdleEvent() {\n        var _this68 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () {\n          _this68.idle.emit(void 0);\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleTilesLoadedEvent\",\n      value: function _handleTilesLoadedEvent() {\n        var _this69 = this;\n\n        var s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(function () {\n          return _this69.tilesLoaded.emit(void 0);\n        });\n\n        this._observableSubscriptions.push(s);\n      }\n    }, {\n      key: \"_handleMapMouseEvents\",\n      value: function _handleMapMouseEvents() {\n        var _this70 = this;\n\n        var events = [{\n          name: 'click',\n          emitter: this.mapClick\n        }, {\n          name: 'rightclick',\n          emitter: this.mapRightClick\n        }, {\n          name: 'dblclick',\n          emitter: this.mapDblClick\n        }];\n        events.forEach(function (e) {\n          var s = _this70._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {\n            var value = {\n              coords: {\n                lat: event.latLng.lat(),\n                lng: event.latLng.lng()\n              },\n              placeId: event.placeId\n            }; // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n\n            if (value.placeId && !_this70.showDefaultInfoWindow) {\n              event.stop();\n            }\n\n            e.emitter.emit(value);\n          });\n\n          _this70._observableSubscriptions.push(s);\n        });\n      }\n    }]);\n\n    return AgmMap;\n  }();\n\n  AgmMap.ɵfac = function AgmMap_Factory(t) {\n    return new (t || AgmMap)(core[\"Sb\" /* ɵɵdirectiveInject */](core[\"m\" /* ElementRef */]), core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_GoogleMapsAPIWrapper), core[\"Sb\" /* ɵɵdirectiveInject */](core[\"D\" /* PLATFORM_ID */]), core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_FitBoundsService), core[\"Sb\" /* ɵɵdirectiveInject */](core[\"B\" /* NgZone */]));\n  };\n\n  AgmMap.ɵcmp = core[\"Mb\" /* ɵɵdefineComponent */]({\n    type: AgmMap,\n    selectors: [[\"agm-map\"]],\n    hostVars: 2,\n    hostBindings: function AgmMap_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        core[\"Kb\" /* ɵɵclassProp */](\"sebm-google-map-container\", true);\n      }\n    },\n    inputs: {\n      longitude: \"longitude\",\n      latitude: \"latitude\",\n      zoom: \"zoom\",\n      draggable: [\"mapDraggable\", \"draggable\"],\n      disableDoubleClickZoom: \"disableDoubleClickZoom\",\n      disableDefaultUI: \"disableDefaultUI\",\n      scrollwheel: \"scrollwheel\",\n      keyboardShortcuts: \"keyboardShortcuts\",\n      styles: \"styles\",\n      usePanning: \"usePanning\",\n      fitBounds: \"fitBounds\",\n      scaleControl: \"scaleControl\",\n      mapTypeControl: \"mapTypeControl\",\n      panControl: \"panControl\",\n      rotateControl: \"rotateControl\",\n      fullscreenControl: \"fullscreenControl\",\n      mapTypeId: \"mapTypeId\",\n      clickableIcons: \"clickableIcons\",\n      showDefaultInfoWindow: \"showDefaultInfoWindow\",\n      gestureHandling: \"gestureHandling\",\n      tilt: \"tilt\",\n      minZoom: \"minZoom\",\n      maxZoom: \"maxZoom\",\n      controlSize: \"controlSize\",\n      backgroundColor: \"backgroundColor\",\n      draggableCursor: \"draggableCursor\",\n      draggingCursor: \"draggingCursor\",\n      zoomControl: \"zoomControl\",\n      zoomControlOptions: \"zoomControlOptions\",\n      streetViewControl: \"streetViewControl\",\n      streetViewControlOptions: \"streetViewControlOptions\",\n      fitBoundsPadding: \"fitBoundsPadding\",\n      scaleControlOptions: \"scaleControlOptions\",\n      mapTypeControlOptions: \"mapTypeControlOptions\",\n      panControlOptions: \"panControlOptions\",\n      rotateControlOptions: \"rotateControlOptions\",\n      fullscreenControlOptions: \"fullscreenControlOptions\",\n      restriction: \"restriction\"\n    },\n    outputs: {\n      mapClick: \"mapClick\",\n      mapRightClick: \"mapRightClick\",\n      mapDblClick: \"mapDblClick\",\n      centerChange: \"centerChange\",\n      boundsChange: \"boundsChange\",\n      mapTypeIdChange: \"mapTypeIdChange\",\n      idle: \"idle\",\n      zoomChange: \"zoomChange\",\n      mapReady: \"mapReady\",\n      tilesLoaded: \"tilesLoaded\"\n    },\n    features: [core[\"Db\" /* ɵɵProvidersFeature */]([agm_core_CircleManager, agm_core_DataLayerManager, agm_core_DataLayerManager, agm_core_FitBoundsService, agm_core_GoogleMapsAPIWrapper, agm_core_InfoWindowManager, agm_core_KmlLayerManager, agm_core_LayerManager, agm_core_MarkerManager, agm_core_PolygonManager, agm_core_PolylineManager, agm_core_RectangleManager]), core[\"Cb\" /* ɵɵNgOnChangesFeature */]],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]],\n    template: function AgmMap_Template(rf, ctx) {\n      if (rf & 1) {\n        core[\"rc\" /* ɵɵprojectionDef */]();\n        core[\"Tb\" /* ɵɵelement */](0, \"div\", 0);\n        core[\"Yb\" /* ɵɵelementStart */](1, \"div\", 1);\n        core[\"qc\" /* ɵɵprojection */](2);\n        core[\"Xb\" /* ɵɵelementEnd */]();\n      }\n    },\n    styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"]\n  });\n  /**\n   * Map option attributes that can change over time\n   */\n\n  AgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl', 'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom', 'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions', 'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];\n  AgmMap = AgmMap_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__param\"])(2, Object(core[\"q\" /* Inject */])(core[\"D\" /* PLATFORM_ID */])), Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [core[\"m\" /* ElementRef */], agm_core_GoogleMapsAPIWrapper, Object, agm_core_FitBoundsService, core[\"B\" /* NgZone */]])], AgmMap);\n  return AgmMap;\n}();\n\nvar AgmMarker_1;\nvar markerId = 0;\n\nvar agm_core_AgmMarker = /*@__PURE__*/function () {\n  /**\n   * AgmMarker renders a map marker inside a {@link AgmMap}.\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  styles: [`\n   *    .agm-map-container {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n   *      </agm-marker>\n   *    </agm-map>\n   *  `\n   * })\n   * ```\n   */\n  var AgmMarker = AgmMarker_1 = /*#__PURE__*/function () {\n    function AgmMarker(_markerManager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmMarker);\n\n      this._markerManager = _markerManager;\n      /**\n       * If true, the marker can be dragged. Default value is false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If true, the marker is visible\n       */\n\n      this.visible = true;\n      /**\n       * Whether to automatically open the child info window when the marker is clicked.\n       */\n\n      this.openInfoWindow = true;\n      /**\n       * The marker's opacity between 0.0 and 1.0.\n       */\n\n      this.opacity = 1;\n      /**\n       * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n       * front of markers with lower values. By default, markers are displayed according to their\n       * vertical position on screen, with lower markers appearing in front of markers further up the\n       * screen.\n       */\n\n      this.zIndex = 1;\n      /**\n       * If true, the marker can be clicked. Default value is true.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.clickable = true;\n      /**\n       * This event is fired when the marker's animation property changes.\n       *\n       * @memberof AgmMarker\n       */\n\n      this.animationChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks on the marker.\n       */\n\n      this.markerClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks twice on the marker.\n       */\n\n      this.markerDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user rightclicks on the marker.\n       */\n\n      this.markerRightClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user starts dragging the marker.\n       */\n\n      this.dragStart = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is repeatedly fired while the user drags the marker.\n       */\n\n      this.drag = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user stops dragging the marker.\n       */\n\n      this.dragEnd = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user mouses over the marker.\n       */\n\n      this.mouseOver = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user mouses outside the marker.\n       */\n\n      this.mouseOut = new core[\"o\" /* EventEmitter */]();\n      /** @internal */\n\n      this.infoWindow = new core[\"F\" /* QueryList */]();\n      this._markerAddedToManger = false;\n      this._observableSubscriptions = [];\n      this._fitBoundsDetails$ = new ReplaySubject[\"a\" /* ReplaySubject */](1);\n      this._id = (markerId++).toString();\n    }\n    /* @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmMarker, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this71 = this;\n\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(function () {\n          return _this71.handleInfoWindowUpdate();\n        });\n      }\n    }, {\n      key: \"handleInfoWindowUpdate\",\n      value: function handleInfoWindowUpdate() {\n        var _this72 = this;\n\n        if (this.infoWindow.length > 1) {\n          throw new Error('Expected no more than one info window.');\n        }\n\n        this.infoWindow.forEach(function (marker) {\n          marker.hostMarker = _this72;\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n          this.latitude = Number(this.latitude);\n        }\n\n        if (typeof this.longitude === 'string') {\n          this.longitude = Number(this.longitude);\n        }\n\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n          return;\n        }\n\n        if (!this._markerAddedToManger) {\n          this._markerManager.addMarker(this);\n\n          this._updateFitBoundsDetails();\n\n          this._markerAddedToManger = true;\n\n          this._addEventListeners();\n\n          return;\n        }\n\n        if (changes['latitude'] || changes['longitude']) {\n          this._markerManager.updateMarkerPosition(this);\n\n          this._updateFitBoundsDetails();\n        }\n\n        if (changes['title']) {\n          this._markerManager.updateTitle(this);\n        }\n\n        if (changes['label']) {\n          this._markerManager.updateLabel(this);\n        }\n\n        if (changes['draggable']) {\n          this._markerManager.updateDraggable(this);\n        }\n\n        if (changes['iconUrl']) {\n          this._markerManager.updateIcon(this);\n        }\n\n        if (changes['opacity']) {\n          this._markerManager.updateOpacity(this);\n        }\n\n        if (changes['visible']) {\n          this._markerManager.updateVisible(this);\n        }\n\n        if (changes['zIndex']) {\n          this._markerManager.updateZIndex(this);\n        }\n\n        if (changes['clickable']) {\n          this._markerManager.updateClickable(this);\n        }\n\n        if (changes['animation']) {\n          this._markerManager.updateAnimation(this);\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"getFitBoundsDetails$\",\n      value: function getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n      }\n    }, {\n      key: \"_updateFitBoundsDetails\",\n      value: function _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({\n          latLng: {\n            lat: this.latitude,\n            lng: this.longitude\n          }\n        });\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this73 = this;\n\n        var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\n          if (_this73.openInfoWindow) {\n            _this73.infoWindow.forEach(function (infoWindow) {\n              return infoWindow.open();\n            });\n          }\n\n          _this73.markerClick.emit(_this73);\n        });\n\n        this._observableSubscriptions.push(cs);\n\n        var dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(function () {\n          _this73.markerDblClick.emit(null);\n        });\n\n        this._observableSubscriptions.push(dcs);\n\n        var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\n          _this73.markerRightClick.emit(null);\n        });\n\n        this._observableSubscriptions.push(rc);\n\n        var ds = this._markerManager.createEventObservable('dragstart', this).subscribe(function (e) {\n          _this73.dragStart.emit({\n            coords: {\n              lat: e.latLng.lat(),\n              lng: e.latLng.lng()\n            }\n          });\n        });\n\n        this._observableSubscriptions.push(ds);\n\n        var d = this._markerManager.createEventObservable('drag', this).subscribe(function (e) {\n          _this73.drag.emit({\n            coords: {\n              lat: e.latLng.lat(),\n              lng: e.latLng.lng()\n            }\n          });\n        });\n\n        this._observableSubscriptions.push(d);\n\n        var de = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {\n          _this73.dragEnd.emit({\n            coords: {\n              lat: e.latLng.lat(),\n              lng: e.latLng.lng()\n            }\n          });\n        });\n\n        this._observableSubscriptions.push(de);\n\n        var mover = this._markerManager.createEventObservable('mouseover', this).subscribe(function (e) {\n          _this73.mouseOver.emit({\n            coords: {\n              lat: e.latLng.lat(),\n              lng: e.latLng.lng()\n            }\n          });\n        });\n\n        this._observableSubscriptions.push(mover);\n\n        var mout = this._markerManager.createEventObservable('mouseout', this).subscribe(function (e) {\n          _this73.mouseOut.emit({\n            coords: {\n              lat: e.latLng.lat(),\n              lng: e.latLng.lng()\n            }\n          });\n        });\n\n        this._observableSubscriptions.push(mout);\n\n        var anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(function () {\n          _this73.animationChange.emit(_this73.animation);\n        });\n\n        this._observableSubscriptions.push(anChng);\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'AgmMarker-' + this._id.toString();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions\n\n\n        this._observableSubscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmMarker;\n  }();\n\n  AgmMarker.ɵfac = function AgmMarker_Factory(t) {\n    return new (t || AgmMarker)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_MarkerManager));\n  };\n\n  AgmMarker.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmMarker,\n    selectors: [[\"agm-marker\"]],\n    contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        core[\"Lb\" /* ɵɵcontentQuery */](dirIndex, agm_core_AgmInfoWindow, 0);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"jc\" /* ɵɵloadQuery */]()) && (ctx.infoWindow = _t);\n      }\n    },\n    inputs: {\n      latitude: \"latitude\",\n      longitude: \"longitude\",\n      title: \"title\",\n      label: \"label\",\n      draggable: [\"markerDraggable\", \"draggable\"],\n      iconUrl: \"iconUrl\",\n      openInfoWindow: \"openInfoWindow\",\n      opacity: \"opacity\",\n      visible: \"visible\",\n      zIndex: \"zIndex\",\n      animation: \"animation\",\n      clickable: [\"markerClickable\", \"clickable\"]\n    },\n    outputs: {\n      markerClick: \"markerClick\",\n      dragStart: \"dragStart\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      mouseOver: \"mouseOver\",\n      mouseOut: \"mouseOut\",\n      animationChange: \"animationChange\",\n      markerDblClick: \"markerDblClick\",\n      markerRightClick: \"markerRightClick\"\n    },\n    features: [core[\"Db\" /* ɵɵProvidersFeature */]([{\n      provide: agm_core_FitBoundsAccessor,\n      useExisting: Object(core[\"Y\" /* forwardRef */])(function () {\n        return AgmMarker_1;\n      })\n    }]), core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmMarker = AgmMarker_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_MarkerManager])], AgmMarker);\n  return AgmMarker;\n}();\n\nvar AgmPolygon_1;\n\nvar agm_core_AgmPolygon = /*@__PURE__*/function () {\n  /**\n   * AgmPolygon renders a polygon on a {@link AgmMap}\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  styles: [`\n   *    agm-map {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *      <agm-polygon [paths]=\"paths\">\n   *      </agm-polygon>\n   *    </agm-map>\n   *  `\n   * })\n   * export class MyMapCmp {\n   *   lat: number = 0;\n   *   lng: number = 0;\n   *   zoom: number = 10;\n   *   paths: Array<LatLngLiteral> = [\n   *     { lat: 0,  lng: 10 },\n   *     { lat: 0,  lng: 20 },\n   *     { lat: 10, lng: 20 },\n   *     { lat: 10, lng: 10 },\n   *     { lat: 0,  lng: 10 }\n   *   ]\n   *   // Nesting paths will create a hole where they overlap;\n   *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n   *     { lat: 0,  lng: 10 },\n   *     { lat: 0,  lng: 20 },\n   *     { lat: 10, lng: 20 },\n   *     { lat: 10, lng: 10 },\n   *     { lat: 0,  lng: 10 }\n   *   ], [\n   *     { lat: 0, lng: 15 },\n   *     { lat: 0, lng: 20 },\n   *     { lat: 5, lng: 20 },\n   *     { lat: 5, lng: 15 },\n   *     { lat: 0, lng: 15 }\n   *   ]]\n   * }\n   * ```\n   */\n  var AgmPolygon = AgmPolygon_1 = /*#__PURE__*/function () {\n    function AgmPolygon(_polygonManager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmPolygon);\n\n      this._polygonManager = _polygonManager;\n      /**\n       * Indicates whether this Polygon handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this shape over the map. The geodesic\n       * property defines the mode of dragging. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this shape by dragging the control\n       * points shown at the vertices and on each segment. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * When true, edges of the polygon are interpreted as geodesic and will\n       * follow the curvature of the Earth. When false, edges of the polygon are\n       * rendered as straight lines in screen space. Note that the shape of a\n       * geodesic polygon may appear to change when dragged, as the dimensions\n       * are maintained relative to the surface of the earth. Defaults to false.\n       */\n\n      this.geodesic = false;\n      /**\n       * The ordered sequence of coordinates that designates a closed loop.\n       * Unlike polylines, a polygon may consist of one or more paths.\n       *  As a result, the paths property may specify one or more arrays of\n       * LatLng coordinates. Paths are closed automatically; do not repeat the\n       * first vertex of the path as the last vertex. Simple polygons may be\n       * defined using a single array of LatLngs. More complex polygons may\n       * specify an array of arrays. Any simple arrays are converted into Arrays.\n       * Inserting or removing LatLngs from the Array will automatically update\n       * the polygon on the map.\n       */\n\n      this.paths = [];\n      /**\n       * This event is fired when the DOM click event is fired on the Polygon.\n       */\n\n      this.polyClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM dblclick event is fired on the Polygon.\n       */\n\n      this.polyDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is repeatedly fired while the user drags the polygon.\n       */\n\n      this.polyDrag = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user stops dragging the polygon.\n       */\n\n      this.polyDragEnd = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user starts dragging the polygon.\n       */\n\n      this.polyDragStart = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the Polygon.\n       */\n\n      this.polyMouseDown = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the Polygon.\n       */\n\n      this.polyMouseMove = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on Polygon mouseout.\n       */\n\n      this.polyMouseOut = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on Polygon mouseover.\n       */\n\n      this.polyMouseOver = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired whe the DOM mouseup event is fired on the Polygon\n       */\n\n      this.polyMouseUp = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the Polygon is right-clicked on.\n       */\n\n      this.polyRightClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired after Polygon first path changes.\n       */\n\n      this.polyPathsChange = new core[\"o\" /* EventEmitter */]();\n      this._polygonAddedToManager = false;\n      this._subscriptions = [];\n    }\n    /** @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmPolygon, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n          this._init();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n          this._init();\n\n          return;\n        }\n\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n      }\n    }, {\n      key: \"_init\",\n      value: function _init() {\n        this._polygonManager.addPolygon(this);\n\n        this._polygonAddedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this74 = this;\n\n        var handlers = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this74.polyClick.emit(ev);\n          }\n        }, {\n          name: 'dblclick',\n          handler: function handler(ev) {\n            return _this74.polyDblClick.emit(ev);\n          }\n        }, {\n          name: 'drag',\n          handler: function handler(ev) {\n            return _this74.polyDrag.emit(ev);\n          }\n        }, {\n          name: 'dragend',\n          handler: function handler(ev) {\n            return _this74.polyDragEnd.emit(ev);\n          }\n        }, {\n          name: 'dragstart',\n          handler: function handler(ev) {\n            return _this74.polyDragStart.emit(ev);\n          }\n        }, {\n          name: 'mousedown',\n          handler: function handler(ev) {\n            return _this74.polyMouseDown.emit(ev);\n          }\n        }, {\n          name: 'mousemove',\n          handler: function handler(ev) {\n            return _this74.polyMouseMove.emit(ev);\n          }\n        }, {\n          name: 'mouseout',\n          handler: function handler(ev) {\n            return _this74.polyMouseOut.emit(ev);\n          }\n        }, {\n          name: 'mouseover',\n          handler: function handler(ev) {\n            return _this74.polyMouseOver.emit(ev);\n          }\n        }, {\n          name: 'mouseup',\n          handler: function handler(ev) {\n            return _this74.polyMouseUp.emit(ev);\n          }\n        }, {\n          name: 'rightclick',\n          handler: function handler(ev) {\n            return _this74.polyRightClick.emit(ev);\n          }\n        }];\n        handlers.forEach(function (obj) {\n          var os = _this74._polygonManager.createEventObservable(obj.name, _this74).subscribe(obj.handler);\n\n          _this74._subscriptions.push(os);\n        });\n\n        this._polygonManager.createPathEventObservable(this).then(function (paths$) {\n          var os = paths$.subscribe(function (pathEvent) {\n            return _this74.polyPathsChange.emit(pathEvent);\n          });\n\n          _this74._subscriptions.push(os);\n        });\n      }\n    }, {\n      key: \"_updatePolygonOptions\",\n      value: function _updatePolygonOptions(changes) {\n        return Object.keys(changes).filter(function (k) {\n          return AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1;\n        }).reduce(function (obj, k) {\n          obj[k] = changes[k].currentValue;\n          return obj;\n        }, {});\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        return this._polygonManager.getPath(this);\n      }\n    }, {\n      key: \"getPaths\",\n      value: function getPaths() {\n        return this._polygonManager.getPaths(this);\n      }\n    }]);\n\n    return AgmPolygon;\n  }();\n\n  AgmPolygon.ɵfac = function AgmPolygon_Factory(t) {\n    return new (t || AgmPolygon)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_PolygonManager));\n  };\n\n  AgmPolygon.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmPolygon,\n    selectors: [[\"agm-polygon\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"polyDraggable\", \"draggable\"],\n      editable: \"editable\",\n      geodesic: \"geodesic\",\n      paths: \"paths\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      polyClick: \"polyClick\",\n      polyDblClick: \"polyDblClick\",\n      polyDrag: \"polyDrag\",\n      polyDragEnd: \"polyDragEnd\",\n      polyDragStart: \"polyDragStart\",\n      polyMouseDown: \"polyMouseDown\",\n      polyMouseMove: \"polyMouseMove\",\n      polyMouseOut: \"polyMouseOut\",\n      polyMouseOver: \"polyMouseOver\",\n      polyMouseUp: \"polyMouseUp\",\n      polyRightClick: \"polyRightClick\",\n      polyPathsChange: \"polyPathsChange\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];\n  AgmPolygon = AgmPolygon_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_PolygonManager])], AgmPolygon);\n  return AgmPolygon;\n}();\n\nvar agm_core_AgmPolylineIcon = /*@__PURE__*/function () {\n  /**\n   * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n   * or custom icons either along the entire line, or in a specific part of it.\n   * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n   *\n   * ### Example\n   * ```html\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *      <agm-polyline>\n   *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n   *          </agm-icon-sequence>\n   *      </agm-polyline>\n   *    </agm-map>\n   * ```\n   *\n   * @export\n   * @class AgmPolylineIcon\n   */\n  var AgmPolylineIcon = /*#__PURE__*/function () {\n    function AgmPolylineIcon() {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmPolylineIcon);\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmPolylineIcon, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.path == null) {\n          throw new Error('Icon Sequence path is required');\n        }\n      }\n    }]);\n\n    return AgmPolylineIcon;\n  }();\n\n  AgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) {\n    return new (t || AgmPolylineIcon)();\n  };\n\n  AgmPolylineIcon.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmPolylineIcon,\n    selectors: [[\"agm-icon-sequence\"]],\n    inputs: {\n      fixedRotation: \"fixedRotation\",\n      offset: \"offset\",\n      repeat: \"repeat\",\n      anchorX: \"anchorX\",\n      anchorY: \"anchorY\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      path: \"path\",\n      rotation: \"rotation\",\n      scale: \"scale\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\"\n    }\n  });\n  return AgmPolylineIcon;\n}();\n\nvar AgmPolylinePoint_1;\n\nvar agm_core_AgmPolylinePoint = /*@__PURE__*/function () {\n  /**\n   * AgmPolylinePoint represents one element of a polyline within a  {@link\n   * AgmPolyline}\n   */\n  var AgmPolylinePoint = AgmPolylinePoint_1 = /*#__PURE__*/function () {\n    function AgmPolylinePoint() {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmPolylinePoint);\n\n      /**\n       * This event emitter gets emitted when the position of the point changed.\n       */\n      this.positionChanged = new core[\"o\" /* EventEmitter */]();\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmPolylinePoint, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes['latitude'] || changes['longitude']) {\n          var position = {\n            lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n            lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude\n          };\n          this.positionChanged.emit(position);\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"getFitBoundsDetails$\",\n      value: function getFitBoundsDetails$() {\n        return this.positionChanged.pipe(Object(startWith[\"a\" /* startWith */])({\n          lat: this.latitude,\n          lng: this.longitude\n        }), Object(map[\"a\" /* map */])(function (position) {\n          return {\n            latLng: position\n          };\n        }));\n      }\n    }]);\n\n    return AgmPolylinePoint;\n  }();\n\n  AgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) {\n    return new (t || AgmPolylinePoint)();\n  };\n\n  AgmPolylinePoint.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmPolylinePoint,\n    selectors: [[\"agm-polyline-point\"]],\n    inputs: {\n      latitude: \"latitude\",\n      longitude: \"longitude\"\n    },\n    outputs: {\n      positionChanged: \"positionChanged\"\n    },\n    features: [core[\"Db\" /* ɵɵProvidersFeature */]([{\n      provide: agm_core_FitBoundsAccessor,\n      useExisting: Object(core[\"Y\" /* forwardRef */])(function () {\n        return AgmPolylinePoint_1;\n      })\n    }]), core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmPolylinePoint = AgmPolylinePoint_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [])], AgmPolylinePoint);\n  return AgmPolylinePoint;\n}();\n\nvar AgmPolyline_1;\nvar polylineId = 0;\n\nvar agm_core_AgmPolyline = /*@__PURE__*/function () {\n  /**\n   * AgmPolyline renders a polyline on a {@link AgmMap}\n   *\n   * ### Example\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *  selector: 'my-map-cmp',\n   *  styles: [`\n   *    .agm-map-container {\n   *      height: 300px;\n   *    }\n   * `],\n   *  template: `\n   *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n   *      <agm-polyline>\n   *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n   *          </agm-polyline-point>\n   *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n   *          </agm-polyline-point>\n   *      </agm-polyline>\n   *    </agm-map>\n   *  `\n   * })\n   * ```\n   */\n  var AgmPolyline = AgmPolyline_1 = /*#__PURE__*/function () {\n    function AgmPolyline(_polylineManager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmPolyline);\n\n      this._polylineManager = _polylineManager;\n      /**\n       * Indicates whether this Polyline handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this shape over the map. The geodesic property defines the\n       * mode of dragging. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this shape by dragging the control points shown at the\n       * vertices and on each segment. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n       * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n       * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n       * are maintained relative to the surface of the earth. Defaults to false.\n       */\n\n      this.geodesic = false;\n      /**\n       * Whether this polyline is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the DOM click event is fired on the Polyline.\n       */\n\n      this.lineClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM dblclick event is fired on the Polyline.\n       */\n\n      this.lineDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is repeatedly fired while the user drags the polyline.\n       */\n\n      this.lineDrag = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user stops dragging the polyline.\n       */\n\n      this.lineDragEnd = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user starts dragging the polyline.\n       */\n\n      this.lineDragStart = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the Polyline.\n       */\n\n      this.lineMouseDown = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the Polyline.\n       */\n\n      this.lineMouseMove = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on Polyline mouseout.\n       */\n\n      this.lineMouseOut = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on Polyline mouseover.\n       */\n\n      this.lineMouseOver = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired whe the DOM mouseup event is fired on the Polyline\n       */\n\n      this.lineMouseUp = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the Polyline is right-clicked on.\n       */\n\n      this.lineRightClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired after Polyline's path changes.\n       */\n\n      this.polyPathChange = new core[\"o\" /* EventEmitter */]();\n      this._polylineAddedToManager = false;\n      this._subscriptions = [];\n      this._id = (polylineId++).toString();\n    }\n    /** @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmPolyline, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this75 = this;\n\n        if (this.points.length) {\n          this.points.forEach(function (point) {\n            var s = point.positionChanged.subscribe(function () {\n              _this75._polylineManager.updatePolylinePoints(_this75);\n            });\n\n            _this75._subscriptions.push(s);\n          });\n        }\n\n        if (!this._polylineAddedToManager) {\n          this._init();\n        }\n\n        var pointSub = this.points.changes.subscribe(function () {\n          return _this75._polylineManager.updatePolylinePoints(_this75);\n        });\n\n        this._subscriptions.push(pointSub);\n\n        this._polylineManager.updatePolylinePoints(this);\n\n        var iconSub = this.iconSequences.changes.subscribe(function () {\n          return _this75._polylineManager.updateIconSequences(_this75);\n        });\n\n        this._subscriptions.push(iconSub);\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n          this._init();\n\n          return;\n        }\n\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          return options[k] = changes[k].currentValue;\n        });\n\n        this._polylineManager.setPolylineOptions(this, options);\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        return this._polylineManager.getPath(this);\n      }\n    }, {\n      key: \"_init\",\n      value: function _init() {\n        this._polylineManager.addPolyline(this);\n\n        this._polylineAddedToManager = true;\n\n        this._addEventListeners();\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this76 = this;\n\n        var handlers = [{\n          name: 'click',\n          handler: function handler(ev) {\n            return _this76.lineClick.emit(ev);\n          }\n        }, {\n          name: 'dblclick',\n          handler: function handler(ev) {\n            return _this76.lineDblClick.emit(ev);\n          }\n        }, {\n          name: 'drag',\n          handler: function handler(ev) {\n            return _this76.lineDrag.emit(ev);\n          }\n        }, {\n          name: 'dragend',\n          handler: function handler(ev) {\n            return _this76.lineDragEnd.emit(ev);\n          }\n        }, {\n          name: 'dragstart',\n          handler: function handler(ev) {\n            return _this76.lineDragStart.emit(ev);\n          }\n        }, {\n          name: 'mousedown',\n          handler: function handler(ev) {\n            return _this76.lineMouseDown.emit(ev);\n          }\n        }, {\n          name: 'mousemove',\n          handler: function handler(ev) {\n            return _this76.lineMouseMove.emit(ev);\n          }\n        }, {\n          name: 'mouseout',\n          handler: function handler(ev) {\n            return _this76.lineMouseOut.emit(ev);\n          }\n        }, {\n          name: 'mouseover',\n          handler: function handler(ev) {\n            return _this76.lineMouseOver.emit(ev);\n          }\n        }, {\n          name: 'mouseup',\n          handler: function handler(ev) {\n            return _this76.lineMouseUp.emit(ev);\n          }\n        }, {\n          name: 'rightclick',\n          handler: function handler(ev) {\n            return _this76.lineRightClick.emit(ev);\n          }\n        }];\n        handlers.forEach(function (obj) {\n          var os = _this76._polylineManager.createEventObservable(obj.name, _this76).subscribe(obj.handler);\n\n          _this76._subscriptions.push(os);\n        });\n\n        this._polylineManager.createPathEventObservable(this).then(function (ob$) {\n          var os = ob$.subscribe(function (pathEvent) {\n            return _this76.polyPathChange.emit(pathEvent);\n          });\n\n          _this76._subscriptions.push(os);\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"_getPoints\",\n      value: function _getPoints() {\n        if (this.points) {\n          return this.points.toArray();\n        }\n\n        return [];\n      }\n    }, {\n      key: \"_getIcons\",\n      value: function _getIcons() {\n        if (this.iconSequences) {\n          return this.iconSequences.toArray();\n        }\n\n        return [];\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions\n\n\n        this._subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }]);\n\n    return AgmPolyline;\n  }();\n\n  AgmPolyline.ɵfac = function AgmPolyline_Factory(t) {\n    return new (t || AgmPolyline)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_PolylineManager));\n  };\n\n  AgmPolyline.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmPolyline,\n    selectors: [[\"agm-polyline\"]],\n    contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        core[\"Lb\" /* ɵɵcontentQuery */](dirIndex, agm_core_AgmPolylinePoint, 0);\n        core[\"Lb\" /* ɵɵcontentQuery */](dirIndex, agm_core_AgmPolylineIcon, 0);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"jc\" /* ɵɵloadQuery */]()) && (ctx.points = _t);\n        core[\"Fc\" /* ɵɵqueryRefresh */](_t = core[\"jc\" /* ɵɵloadQuery */]()) && (ctx.iconSequences = _t);\n      }\n    },\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"polylineDraggable\", \"draggable\"],\n      editable: \"editable\",\n      geodesic: \"geodesic\",\n      visible: \"visible\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      strokeWeight: \"strokeWeight\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      lineClick: \"lineClick\",\n      lineDblClick: \"lineDblClick\",\n      lineDrag: \"lineDrag\",\n      lineDragEnd: \"lineDragEnd\",\n      lineDragStart: \"lineDragStart\",\n      lineMouseDown: \"lineMouseDown\",\n      lineMouseMove: \"lineMouseMove\",\n      lineMouseOut: \"lineMouseOut\",\n      lineMouseOver: \"lineMouseOver\",\n      lineMouseUp: \"lineMouseUp\",\n      lineRightClick: \"lineRightClick\",\n      polyPathChange: \"polyPathChange\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];\n  AgmPolyline = AgmPolyline_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_PolylineManager])], AgmPolyline);\n  return AgmPolyline;\n}();\n\nvar AgmRectangle_1;\n\nvar agm_core_AgmRectangle = /*@__PURE__*/function () {\n  var AgmRectangle = AgmRectangle_1 = /*#__PURE__*/function () {\n    function AgmRectangle(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmRectangle);\n\n      this._manager = _manager;\n      /**\n       * Indicates whether this Rectangle handles mouse events. Defaults to true.\n       */\n\n      this.clickable = true;\n      /**\n       * If set to true, the user can drag this rectangle over the map. Defaults to false.\n       */\n      // tslint:disable-next-line:no-input-rename\n\n      this.draggable = false;\n      /**\n       * If set to true, the user can edit this rectangle by dragging the control points shown at\n       * the center and around the circumference of the rectangle. Defaults to false.\n       */\n\n      this.editable = false;\n      /**\n       * The stroke position. Defaults to CENTER.\n       * This property is not supported on Internet Explorer 8 and earlier.\n       */\n\n      this.strokePosition = 'CENTER';\n      /**\n       * The stroke width in pixels.\n       */\n\n      this.strokeWeight = 0;\n      /**\n       * Whether this rectangle is visible on the map. Defaults to true.\n       */\n\n      this.visible = true;\n      /**\n       * This event is fired when the rectangle's is changed.\n       */\n\n      this.boundsChange = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks on the rectangle.\n       */\n\n      this.rectangleClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event emitter gets emitted when the user clicks on the rectangle.\n       */\n\n      this.rectangleDblClick = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is repeatedly fired while the user drags the rectangle.\n       */\n\n      this.drag = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user stops dragging the rectangle.\n       */\n\n      this.dragEnd = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the user starts dragging the rectangle.\n       */\n\n      this.dragStart = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousedown event is fired on the rectangle.\n       */\n\n      this.mouseDown = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mousemove event is fired on the rectangle.\n       */\n\n      this.mouseMove = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on rectangle mouseout.\n       */\n\n      this.mouseOut = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired on rectangle mouseover.\n       */\n\n      this.mouseOver = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the DOM mouseup event is fired on the rectangle.\n       */\n\n      this.mouseUp = new core[\"o\" /* EventEmitter */]();\n      /**\n       * This event is fired when the rectangle is right-clicked on.\n       */\n\n      this.rightClick = new core[\"o\" /* EventEmitter */]();\n      this._rectangleAddedToManager = false;\n      this._eventSubscriptions = [];\n    }\n    /** @internal */\n\n\n    Object(createClass[\"a\" /* default */])(AgmRectangle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._manager.addRectangle(this);\n\n        this._rectangleAddedToManager = true;\n\n        this._registerEventListeners();\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n          return;\n        }\n\n        if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {\n          this._manager.setBounds(this);\n        }\n\n        if (changes['editable']) {\n          this._manager.setEditable(this);\n        }\n\n        if (changes['draggable']) {\n          this._manager.setDraggable(this);\n        }\n\n        if (changes['visible']) {\n          this._manager.setVisible(this);\n        }\n\n        this._updateRectangleOptionsChanges(changes);\n      }\n    }, {\n      key: \"_updateRectangleOptionsChanges\",\n      value: function _updateRectangleOptionsChanges(changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) {\n          return AgmRectangle_1._mapOptions.indexOf(k) !== -1;\n        });\n        optionKeys.forEach(function (k) {\n          options[k] = changes[k].currentValue;\n        });\n\n        if (optionKeys.length > 0) {\n          this._manager.setOptions(this, options);\n        }\n      }\n    }, {\n      key: \"_registerEventListeners\",\n      value: function _registerEventListeners() {\n        var _this77 = this;\n\n        var events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n          _this77._eventSubscriptions.push(_this77._manager.createEventObservable(eventName, _this77).subscribe(function (value) {\n            switch (eventName) {\n              case 'bounds_changed':\n                _this77._manager.getBounds(_this77).then(function (bounds) {\n                  return eventEmitter.emit({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng()\n                  });\n                });\n\n                break;\n\n              default:\n                eventEmitter.emit({\n                  coords: {\n                    lat: value.latLng.lat(),\n                    lng: value.latLng.lng()\n                  }\n                });\n            }\n          }));\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n          s.unsubscribe();\n        });\n\n        this._eventSubscriptions = null;\n\n        this._manager.removeRectangle(this);\n      }\n      /**\n       * Gets the LatLngBounds of this Rectangle.\n       */\n\n    }, {\n      key: \"getBounds\",\n      value: function getBounds() {\n        return this._manager.getBounds(this);\n      }\n    }]);\n\n    return AgmRectangle;\n  }();\n\n  AgmRectangle.ɵfac = function AgmRectangle_Factory(t) {\n    return new (t || AgmRectangle)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_RectangleManager));\n  };\n\n  AgmRectangle.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmRectangle,\n    selectors: [[\"agm-rectangle\"]],\n    inputs: {\n      clickable: \"clickable\",\n      draggable: [\"rectangleDraggable\", \"draggable\"],\n      editable: \"editable\",\n      strokePosition: \"strokePosition\",\n      strokeWeight: \"strokeWeight\",\n      visible: \"visible\",\n      north: \"north\",\n      east: \"east\",\n      south: \"south\",\n      west: \"west\",\n      fillColor: \"fillColor\",\n      fillOpacity: \"fillOpacity\",\n      strokeColor: \"strokeColor\",\n      strokeOpacity: \"strokeOpacity\",\n      zIndex: \"zIndex\"\n    },\n    outputs: {\n      boundsChange: \"boundsChange\",\n      rectangleClick: \"rectangleClick\",\n      rectangleDblClick: \"rectangleDblClick\",\n      drag: \"drag\",\n      dragEnd: \"dragEnd\",\n      dragStart: \"dragStart\",\n      mouseDown: \"mouseDown\",\n      mouseMove: \"mouseMove\",\n      mouseOut: \"mouseOut\",\n      mouseOver: \"mouseOver\",\n      mouseUp: \"mouseUp\",\n      rightClick: \"rightClick\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n  AgmRectangle = AgmRectangle_1 = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_RectangleManager])], AgmRectangle);\n  return AgmRectangle;\n}();\n\nvar layerId$3 = 0;\n\nvar agm_core_AgmTransitLayer = /*@__PURE__*/function () {\n  /*\n   * This directive adds a transit layer to a google map instance\n   * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n   * */\n  var AgmTransitLayer = /*#__PURE__*/function () {\n    function AgmTransitLayer(_manager) {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmTransitLayer);\n\n      this._manager = _manager;\n      this._addedToManager = false;\n      this._id = (layerId$3++).toString();\n      /**\n       * Hide/show transit layer\n       */\n\n      this.visible = true;\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmTransitLayer, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this._addedToManager) {\n          return;\n        }\n\n        this._manager.addTransitLayer(this, {\n          visible: this.visible\n        });\n\n        this._addedToManager = true;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this._addedToManager) {\n          return;\n        }\n\n        if (changes['visible'] != null) {\n          this._manager.toggleLayerVisibility(this, {\n            visible: changes['visible'].currentValue\n          });\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"id\",\n      value: function id() {\n        return this._id;\n      }\n      /** @internal */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"AgmTransitLayer-\".concat(this._id.toString());\n      }\n      /** @internal */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._manager.deleteLayer(this);\n      }\n    }]);\n\n    return AgmTransitLayer;\n  }();\n\n  AgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) {\n    return new (t || AgmTransitLayer)(core[\"Sb\" /* ɵɵdirectiveInject */](agm_core_LayerManager));\n  };\n\n  AgmTransitLayer.ɵdir = core[\"Nb\" /* ɵɵdefineDirective */]({\n    type: AgmTransitLayer,\n    selectors: [[\"agm-transit-layer\"]],\n    inputs: {\n      visible: \"visible\"\n    },\n    features: [core[\"Cb\" /* ɵɵNgOnChangesFeature */]]\n  });\n  AgmTransitLayer = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_LayerManager])], AgmTransitLayer);\n  return AgmTransitLayer;\n}();\n\nvar google$1;\n\nvar SymbolPath = /*@__PURE__*/function (SymbolPath) {\n  SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\n  SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\n  SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\n  SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\n  SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\n  return SymbolPath;\n}({});\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\n\n\nvar ControlPosition = /*@__PURE__*/function (ControlPosition) {\n  ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\n  ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\n  ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n  ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\n  ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\n  ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\n  ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\n  ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\n  ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\n  ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\n  ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\n  ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\n  return ControlPosition;\n}({});\n\nvar MapTypeId = /*@__PURE__*/function (MapTypeId) {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\n  /** This map type displays a normal street map. */\n\n  MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\n  /** This map type displays satellite images. */\n\n  MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n\n  MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\n  return MapTypeId;\n}({});\n\nvar MapTypeControlStyle = /*@__PURE__*/function (MapTypeControlStyle) {\n  MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\n  MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\n  return MapTypeControlStyle;\n}({});\n\nvar ScaleControlStyle = /*@__PURE__*/function (ScaleControlStyle) {\n  ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  return ScaleControlStyle;\n}({});\n\nvar ZoomControlStyle = /*@__PURE__*/function (ZoomControlStyle) {\n  ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\n  ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\n  return ZoomControlStyle;\n}({});\n\nvar GeocoderLocationType = /*@__PURE__*/function (GeocoderLocationType) {\n  GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n  GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n  GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n  GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n  return GeocoderLocationType;\n}({});\n\nvar GeocoderStatus = /*@__PURE__*/function (GeocoderStatus) {\n  GeocoderStatus[\"ERROR\"] = \"ERROR\";\n  GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n  GeocoderStatus[\"OK\"] = \"OK\";\n  GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n  GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n  GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n  return GeocoderStatus;\n}({});\n\nvar agm_core_AgmGeocoder = /*@__PURE__*/function () {\n  var AgmGeocoder = /*#__PURE__*/function () {\n    function AgmGeocoder(loader) {\n      var _this78 = this;\n\n      Object(classCallCheck[\"a\" /* default */])(this, AgmGeocoder);\n\n      var connectableGeocoder$ = new Observable[\"a\" /* Observable */](function (subscriber) {\n        loader.load().then(function () {\n          return subscriber.next();\n        });\n      }).pipe(Object(map[\"a\" /* map */])(function () {\n        return _this78._createGeocoder();\n      }), Object(multicast[\"a\" /* multicast */])(new ReplaySubject[\"a\" /* ReplaySubject */](1)));\n      connectableGeocoder$.connect(); // ignore the subscription\n      // since we will remain subscribed till application exits\n\n      this.geocoder$ = connectableGeocoder$;\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmGeocoder, [{\n      key: \"geocode\",\n      value: function geocode(request) {\n        var _this79 = this;\n\n        return this.geocoder$.pipe(Object(switchMap[\"a\" /* switchMap */])(function (geocoder) {\n          return _this79._getGoogleResults(geocoder, request);\n        }));\n      }\n    }, {\n      key: \"_getGoogleResults\",\n      value: function _getGoogleResults(geocoder, request) {\n        var geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(Object(switchMap[\"a\" /* switchMap */])(function (_ref6) {\n          var _ref7 = Object(slicedToArray[\"a\" /* default */])(_ref6, 2),\n              results = _ref7[0],\n              status = _ref7[1];\n\n          if (status === GeocoderStatus.OK) {\n            return Object(of[\"a\" /* of */])(results);\n          }\n\n          return Object(throwError[\"a\" /* throwError */])(status);\n        }));\n      }\n    }, {\n      key: \"_createGeocoder\",\n      value: function _createGeocoder() {\n        return new google.maps.Geocoder();\n      }\n    }]);\n\n    return AgmGeocoder;\n  }();\n\n  AgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) {\n    return new (t || AgmGeocoder)(core[\"fc\" /* ɵɵinject */](agm_core_MapsAPILoader));\n  };\n\n  AgmGeocoder.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: AgmGeocoder,\n    factory: function factory(t) {\n      return AgmGeocoder.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n  AgmGeocoder.ngInjectableDef = Object(core[\"Ob\" /* ɵɵdefineInjectable */])({\n    factory: function AgmGeocoder_Factory() {\n      return new AgmGeocoder(Object(core[\"fc\" /* ɵɵinject */])(agm_core_MapsAPILoader));\n    },\n    token: AgmGeocoder,\n    providedIn: \"root\"\n  });\n  AgmGeocoder = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [agm_core_MapsAPILoader])], AgmGeocoder);\n  return AgmGeocoder;\n}();\n\nvar agm_core_WindowRef = /*#__PURE__*/function () {\n  function WindowRef() {\n    Object(classCallCheck[\"a\" /* default */])(this, WindowRef);\n  }\n\n  Object(createClass[\"a\" /* default */])(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      return window;\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nvar agm_core_DocumentRef = /*#__PURE__*/function () {\n  function DocumentRef() {\n    Object(classCallCheck[\"a\" /* default */])(this, DocumentRef);\n  }\n\n  Object(createClass[\"a\" /* default */])(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      return document;\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nvar BROWSER_GLOBALS_PROVIDERS = [agm_core_WindowRef, agm_core_DocumentRef];\n\nvar GoogleMapsScriptProtocol = /*@__PURE__*/function (GoogleMapsScriptProtocol) {\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n  return GoogleMapsScriptProtocol;\n}({});\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\n\n\nvar LAZY_MAPS_API_CONFIG = new core[\"s\" /* InjectionToken */]('angular-google-maps LAZY_MAPS_API_CONFIG');\n\nvar agm_core_LazyMapsAPILoader = /*@__PURE__*/function () {\n  var LazyMapsAPILoader = /*#__PURE__*/function (_MapsAPILoader) {\n    Object(inherits[\"a\" /* default */])(LazyMapsAPILoader, _MapsAPILoader);\n\n    var _super = Object(createSuper[\"a\" /* default */])(LazyMapsAPILoader);\n\n    function LazyMapsAPILoader() {\n      var _this80;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var w = arguments.length > 1 ? arguments[1] : undefined;\n      var d = arguments.length > 2 ? arguments[2] : undefined;\n      var localeId = arguments.length > 3 ? arguments[3] : undefined;\n\n      Object(classCallCheck[\"a\" /* default */])(this, LazyMapsAPILoader);\n\n      _this80 = _super.call(this);\n      _this80.localeId = localeId;\n      _this80._SCRIPT_ID = 'agmGoogleMapsApiScript';\n      _this80.callbackName = \"agmLazyMapsAPILoader\";\n      _this80._config = config || {};\n      _this80._windowRef = w;\n      _this80._documentRef = d;\n      return _this80;\n    }\n\n    Object(createClass[\"a\" /* default */])(LazyMapsAPILoader, [{\n      key: \"load\",\n      value: function load() {\n        var window = this._windowRef.getNativeWindow();\n\n        if (window.google && window.google.maps) {\n          // Google maps already loaded on the page.\n          return Promise.resolve();\n        }\n\n        if (this._scriptLoadingPromise) {\n          return this._scriptLoadingPromise;\n        } // this can happen in HMR situations or Stackblitz.io editors.\n\n\n        var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n\n        if (scriptOnPage) {\n          this._assignScriptLoadingPromise(scriptOnPage);\n\n          return this._scriptLoadingPromise;\n        }\n\n        var script = this._documentRef.getNativeDocument().createElement('script');\n\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n\n        this._assignScriptLoadingPromise(script);\n\n        this._documentRef.getNativeDocument().body.appendChild(script);\n\n        return this._scriptLoadingPromise;\n      }\n    }, {\n      key: \"_assignScriptLoadingPromise\",\n      value: function _assignScriptLoadingPromise(scriptElem) {\n        var _this81 = this;\n\n        this._scriptLoadingPromise = new Promise(function (resolve, reject) {\n          _this81._windowRef.getNativeWindow()[_this81.callbackName] = function () {\n            resolve();\n          };\n\n          scriptElem.onerror = function (error) {\n            reject(error);\n          };\n        });\n      }\n    }, {\n      key: \"_getScriptSrc\",\n      value: function _getScriptSrc(callbackName) {\n        var protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;\n        var protocol;\n\n        switch (protocolType) {\n          case GoogleMapsScriptProtocol.AUTO:\n            protocol = '';\n            break;\n\n          case GoogleMapsScriptProtocol.HTTP:\n            protocol = 'http:';\n            break;\n\n          case GoogleMapsScriptProtocol.HTTPS:\n            protocol = 'https:';\n            break;\n        }\n\n        var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        var queryParams = {\n          v: this._config.apiVersion || 'quarterly',\n          callback: callbackName,\n          key: this._config.apiKey,\n          client: this._config.clientId,\n          channel: this._config.channel,\n          libraries: this._config.libraries,\n          region: this._config.region,\n          language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null\n        };\n        var params = Object.keys(queryParams).filter(function (k) {\n          return queryParams[k] != null;\n        }).filter(function (k) {\n          // remove empty arrays\n          return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;\n        }).map(function (k) {\n          // join arrays as comma seperated strings\n          var i = queryParams[k];\n\n          if (Array.isArray(i)) {\n            return {\n              key: k,\n              value: i.join(',')\n            };\n          }\n\n          return {\n            key: k,\n            value: queryParams[k]\n          };\n        }).map(function (entry) {\n          return \"\".concat(entry.key, \"=\").concat(entry.value);\n        }).join('&');\n        return \"\".concat(protocol, \"//\").concat(hostAndPath, \"?\").concat(params);\n      }\n    }]);\n\n    return LazyMapsAPILoader;\n  }(agm_core_MapsAPILoader);\n\n  LazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) {\n    return new (t || LazyMapsAPILoader)(core[\"fc\" /* ɵɵinject */](LAZY_MAPS_API_CONFIG, 8), core[\"fc\" /* ɵɵinject */](agm_core_WindowRef), core[\"fc\" /* ɵɵinject */](agm_core_DocumentRef), core[\"fc\" /* ɵɵinject */](core[\"w\" /* LOCALE_ID */]));\n  };\n\n  LazyMapsAPILoader.ɵprov = core[\"Ob\" /* ɵɵdefineInjectable */]({\n    token: LazyMapsAPILoader,\n    factory: function factory(t) {\n      return LazyMapsAPILoader.ɵfac(t);\n    }\n  });\n  LazyMapsAPILoader = Object(tslib_es6[\"__decorate\"])([Object(tslib_es6[\"__param\"])(0, Object(core[\"C\" /* Optional */])()), Object(tslib_es6[\"__param\"])(0, Object(core[\"q\" /* Inject */])(LAZY_MAPS_API_CONFIG)), Object(tslib_es6[\"__param\"])(3, Object(core[\"q\" /* Inject */])(core[\"w\" /* LOCALE_ID */])), Object(tslib_es6[\"__metadata\"])(\"design:paramtypes\", [Object, agm_core_WindowRef, agm_core_DocumentRef, String])], LazyMapsAPILoader);\n  return LazyMapsAPILoader;\n}();\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\n\n\nvar agm_core_NoOpMapsAPILoader = /*#__PURE__*/function () {\n  function NoOpMapsAPILoader() {\n    Object(classCallCheck[\"a\" /* default */])(this, NoOpMapsAPILoader);\n  }\n\n  Object(createClass[\"a\" /* default */])(NoOpMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      if (!window.google || !window.google.maps) {\n        throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return NoOpMapsAPILoader;\n}(); // exported map types\n\n\nvar AgmCoreModule_1;\n/**\n * @internal\n */\n\nfunction coreDirectives() {\n  return [agm_core_AgmBicyclingLayer, agm_core_AgmCircle, agm_core_AgmDataLayer, agm_core_AgmFitBounds, agm_core_AgmInfoWindow, agm_core_AgmKmlLayer, agm_core_AgmMap, agm_core_AgmMarker, agm_core_AgmPolygon, agm_core_AgmPolyline, agm_core_AgmPolylineIcon, agm_core_AgmPolylinePoint, agm_core_AgmRectangle, agm_core_AgmTransitLayer];\n}\n\nvar agm_core_AgmCoreModule = /*@__PURE__*/function () {\n  /**\n   * The angular-google-maps core module. Contains all Directives/Services/Pipes\n   * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n   */\n  var AgmCoreModule = AgmCoreModule_1 = /*#__PURE__*/function () {\n    function AgmCoreModule() {\n      Object(classCallCheck[\"a\" /* default */])(this, AgmCoreModule);\n    }\n\n    Object(createClass[\"a\" /* default */])(AgmCoreModule, null, [{\n      key: \"forRoot\",\n\n      /**\n       * Please use this method when you register the module at the root level.\n       */\n      value: function forRoot(lazyMapsAPILoaderConfig) {\n        return {\n          ngModule: AgmCoreModule_1,\n          providers: [].concat(BROWSER_GLOBALS_PROVIDERS, [{\n            provide: agm_core_MapsAPILoader,\n            useClass: agm_core_LazyMapsAPILoader\n          }, {\n            provide: LAZY_MAPS_API_CONFIG,\n            useValue: lazyMapsAPILoaderConfig\n          }])\n        };\n      }\n    }]);\n\n    return AgmCoreModule;\n  }();\n\n  AgmCoreModule.ɵmod = core[\"Qb\" /* ɵɵdefineNgModule */]({\n    type: AgmCoreModule\n  });\n  AgmCoreModule.ɵinj = core[\"Pb\" /* ɵɵdefineInjector */]({\n    factory: function AgmCoreModule_Factory(t) {\n      return new (t || AgmCoreModule)();\n    }\n  });\n  return AgmCoreModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"Nc\" /* ɵɵsetNgModuleScope */](agm_core_AgmCoreModule, {\n    declarations: [agm_core_AgmBicyclingLayer, agm_core_AgmCircle, agm_core_AgmDataLayer, agm_core_AgmFitBounds, agm_core_AgmInfoWindow, agm_core_AgmKmlLayer, agm_core_AgmMap, agm_core_AgmMarker, agm_core_AgmPolygon, agm_core_AgmPolyline, agm_core_AgmPolylineIcon, agm_core_AgmPolylinePoint, agm_core_AgmRectangle, agm_core_AgmTransitLayer],\n    exports: [agm_core_AgmBicyclingLayer, agm_core_AgmCircle, agm_core_AgmDataLayer, agm_core_AgmFitBounds, agm_core_AgmInfoWindow, agm_core_AgmKmlLayer, agm_core_AgmMap, agm_core_AgmMarker, agm_core_AgmPolygon, agm_core_AgmPolyline, agm_core_AgmPolylineIcon, agm_core_AgmPolylinePoint, agm_core_AgmRectangle, agm_core_AgmTransitLayer]\n  });\n})(); // main modules\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}