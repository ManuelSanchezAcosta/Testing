/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxSpinnerService = /** @class */ (function () {
    /**
     * Creates an instance of NgxSpinnerService.
     * @memberof NgxSpinnerService
     */
    function NgxSpinnerService() {
        /**
         * Spinner observable
         *
         * \@memberof NgxSpinnerService
         */
        this.spinnerObservable = new Subject();
    }
    /**
     * To show spinner
     *
     * @memberof NgxSpinnerService
     */
    /**
     * To show spinner
     *
     * \@memberof NgxSpinnerService
     * @return {?}
     */
    NgxSpinnerService.prototype.show = /**
     * To show spinner
     *
     * \@memberof NgxSpinnerService
     * @return {?}
     */
    function () {
        this.spinnerObservable.next(true);
    };
    /**
     * To hide spinner
     *
     * @memberof NgxSpinnerService
     */
    /**
     * To hide spinner
     *
     * \@memberof NgxSpinnerService
     * @return {?}
     */
    NgxSpinnerService.prototype.hide = /**
     * To hide spinner
     *
     * \@memberof NgxSpinnerService
     * @return {?}
     */
    function () {
        this.spinnerObservable.next(false);
    };
    /** @nocollapse */
    NgxSpinnerService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxSpinnerService.ngInjectableDef = i0.defineInjectable({ factory: function NgxSpinnerService_Factory() { return new NgxSpinnerService(); }, token: NgxSpinnerService, providedIn: "root" });
NgxSpinnerService.ɵfac = function NgxSpinnerService_Factory(t) { return new (t || NgxSpinnerService)(); };
NgxSpinnerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxSpinnerService, factory: function (t) { return NgxSpinnerService.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxSpinnerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return NgxSpinnerService;
}());
export { NgxSpinnerService };
if (false) {
    /**
     * Spinner observable
     *
     * \@memberof NgxSpinnerService
     * @type {?}
     */
    NgxSpinnerService.prototype.spinnerObservable;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmd4LXNwaW5uZXIvbGliL25neC1zcGlubmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQjs7QUFHQztBQUdXLElBS1Y7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUU7QUFFSztBQUFZO0FBRUk7QUFDdEI7QUFFdUI7QUFBWSxpQ0FaUCxJQUFJLE9BQU8sRUFBVztBQUNuRCxLQUltQjtBQUNuQixJQUFFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMO0FBQVE7QUFDWTtBQUFPO0FBR2I7QUFFUDtBQUFRLElBTmIsZ0NBQUk7QUFDSjtBQUF1QjtBQUFPO0FBR2I7QUFFUDtBQUFRLElBTmxCO0FBQ0csUUFBRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLEtBQUc7QUFDRixJQUFDO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMO0FBQVE7QUFDWTtBQUFPO0FBR1Y7QUFBbUI7QUFBUSxJQUoxQyxnQ0FBSTtBQUNKO0FBQXVCO0FBQU87QUFHVjtBQUFtQjtBQUFRLElBSi9DO0FBQ0csUUFBRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLEtBQUcsQ0EzQk87QUFBQzs4QkFIVixVQUFVLFNBQUMsakRBSVg7SUFIQyxVQUFVLEVBQUUsTUFBTSxrQkFDbkIseENBTUQ7Ozs7Ozs7O2dEQVVTO0FBQUMsNEJBckJWO0FBQUU7QUFBTSxTQU1LLGlCQUFpQjtBQUM3QjtBQUNPO0FBQVE7QUFFSDtBQUFPO0FBRUg7QUFBaUI7QUFBUTtBQUVSOztBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBWUEsQUFHQSxBQUNBLEFBTEEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUNBLEFBSUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUE5QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUxBLEFBTUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4U3Bpbm5lclNlcnZpY2Uge1xuICAvKipcbiAgICogU3Bpbm5lciBvYnNlcnZhYmxlXG4gICAqXG4gICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyU2VydmljZVxuICAgKi9cbiAgcHVibGljIHNwaW5uZXJPYnNlcnZhYmxlID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTmd4U3Bpbm5lclNlcnZpY2UuXG4gICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyU2VydmljZVxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7IH1cbiAgLyoqXG4gICAqIFRvIHNob3cgc3Bpbm5lclxuICAgKlxuICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lclNlcnZpY2VcbiAgICovXG4gIHNob3coKSB7XG4gICAgdGhpcy5zcGlubmVyT2JzZXJ2YWJsZS5uZXh0KHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBUbyBoaWRlIHNwaW5uZXJcbiAgICpcbiAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJTZXJ2aWNlXG4gICAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMuc3Bpbm5lck9ic2VydmFibGUubmV4dChmYWxzZSk7XG4gIH1cbn1cbiJdfQ==