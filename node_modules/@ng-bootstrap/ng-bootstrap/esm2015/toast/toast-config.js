/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Interface used to type all toast config options. See `NgbToastConfig`.
 *
 * \@since 5.0.0
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbToastOptions() { }
if (false) {
    /**
     * Specify if the toast component should emit the `hide()` output
     * after a certain `delay` in ms.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.autohide;
    /**
     * Delay in ms after which the `hide()` output should be emitted.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.delay;
    /**
     * Type of aria-live attribute to be used.
     *
     * Could be one of these 2 values (as string):
     * - `polite` (default)
     * - `alert`
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.ariaLive;
}
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * \@since 5.0.0
 */
export class NgbToastConfig {
    constructor() {
        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
    }
}
NgbToastConfig.ɵfac = function NgbToastConfig_Factory(t) { return new (t || NgbToastConfig)(); };
NgbToastConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbToastConfig, factory: NgbToastConfig.ɵfac, providedIn: 'root' });
/** @nocollapse */ NgbToastConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgbToastConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgbToastConfig.prototype.autohide;
    /** @type {?} */
    NgbToastConfig.prototype.delay;
    /** @type {?} */
    NgbToastConfig.prototype.ariaLive;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29uZmlnLmpzIiwic291cmNlcyI6WyJAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcC90b2FzdC90b2FzdC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekM7QUFFZ0M7QUFBSTtBQUl2QjtBQUFHO0FBQWlCO0FBRTlCOztBQUZILHFDQW9CQztBQUNEO0FBRVE7QUFBUTtBQUFzRTtBQUM5RTtBQUEyQjtBQUFRLElBbkJ6QyxtQ0FBbUI7QUFDckI7QUFFQztBQUNFO0FBR0U7QUFDRSxJQUhMLGdDQUFlO0FBQ2pCO0FBRUM7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKO0FBQTJCO0FBSWhDLElBSkUsbUNBQThCO0FBQ2hDO0FBQ0E7QUFDRztBQUNnSDtBQUNKO0FBQ2hHO0FBQ2I7QUFFRjtBQUVBLE1BQU0sT0FBTyxjQUFjO0FBQUcsSUFEOUI7QUFBZ0IsUUFFZCxhQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLFFBQUUsVUFBSyxHQUFHLEdBQUcsQ0FBQztBQUNkLFFBQUUsYUFBUSxHQUF1QixRQUFRLENBQUM7QUFDMUMsS0FBQztBQUNEOzBDQU5DLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7OEhBQzNCO0FBQUM7Ozs7Z0RBSzhEO0FBQUM7QUFBYTtBQUFxQixJQUpyRyxrQ0FBZ0I7QUFDbEI7QUFDTSxJQURKLCtCQUFZO0FBQ2Q7QUFBcUIsSUFBbkIsa0NBQXdDO0FBQzFDO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEludGVyZmFjZSB1c2VkIHRvIHR5cGUgYWxsIHRvYXN0IGNvbmZpZyBvcHRpb25zLiBTZWUgYE5nYlRvYXN0Q29uZmlnYC5cbiAqXG4gKiBAc2luY2UgNS4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZ2JUb2FzdE9wdGlvbnMge1xuICAvKipcbiAgICogU3BlY2lmeSBpZiB0aGUgdG9hc3QgY29tcG9uZW50IHNob3VsZCBlbWl0IHRoZSBgaGlkZSgpYCBvdXRwdXRcbiAgICogYWZ0ZXIgYSBjZXJ0YWluIGBkZWxheWAgaW4gbXMuXG4gICAqL1xuICBhdXRvaGlkZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERlbGF5IGluIG1zIGFmdGVyIHdoaWNoIHRoZSBgaGlkZSgpYCBvdXRwdXQgc2hvdWxkIGJlIGVtaXR0ZWQuXG4gICAqL1xuICBkZWxheT86IG51bWJlcjtcblxuICAvKipcbiAgICogVHlwZSBvZiBhcmlhLWxpdmUgYXR0cmlidXRlIHRvIGJlIHVzZWQuXG4gICAqXG4gICAqIENvdWxkIGJlIG9uZSBvZiB0aGVzZSAyIHZhbHVlcyAoYXMgc3RyaW5nKTpcbiAgICogLSBgcG9saXRlYCAoZGVmYXVsdClcbiAgICogLSBgYWxlcnRgXG4gICAqL1xuICBhcmlhTGl2ZT86ICdwb2xpdGUnIHwgJ2FsZXJ0Jztcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBOZ2JUb2FzdCBjb21wb25lbnQuIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsXG4gKiBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW4gb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSB0b2FzdHMgdXNlZCBpbiB0aGVcbiAqIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBzaW5jZSA1LjAuMFxuICovXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBOZ2JUb2FzdENvbmZpZyBpbXBsZW1lbnRzIE5nYlRvYXN0T3B0aW9ucyB7XG4gIGF1dG9oaWRlID0gdHJ1ZTtcbiAgZGVsYXkgPSA1MDA7XG4gIGFyaWFMaXZlOiAncG9saXRlJyB8ICdhbGVydCcgPSAncG9saXRlJztcbn1cbiJdfQ==