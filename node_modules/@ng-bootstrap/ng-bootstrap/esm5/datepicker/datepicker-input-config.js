/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgbDatepickerConfig } from './datepicker-config';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbDatepickerInput`](#/components/datepicker/api#NgbDatepicker) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the datepicker inputs used in the application.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
var NgbInputDatepickerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(NgbInputDatepickerConfig, _super);
    function NgbInputDatepickerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autoClose = true;
        _this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
        _this.restoreFocus = true;
        return _this;
    }
    /** @nocollapse */ NgbInputDatepickerConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbInputDatepickerConfig_Factory() { return new NgbInputDatepickerConfig(); }, token: NgbInputDatepickerConfig, providedIn: "root" });
NgbInputDatepickerConfig.ɵfac = function NgbInputDatepickerConfig_Factory(t) { return ɵNgbInputDatepickerConfig_BaseFactory(t || NgbInputDatepickerConfig); };
NgbInputDatepickerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbInputDatepickerConfig, factory: function (t) { return NgbInputDatepickerConfig.ɵfac(t); }, providedIn: 'root' });
var ɵNgbInputDatepickerConfig_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NgbInputDatepickerConfig);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgbInputDatepickerConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
    return NgbInputDatepickerConfig;
}(NgbDatepickerConfig));
export { NgbInputDatepickerConfig };
if (false) {
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.autoClose;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.container;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.positionTarget;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.placement;
    /** @type {?} */
    NgbInputDatepickerConfig.prototype.restoreFocus;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnB1dC1jb25maWcuanMiLCJzb3VyY2VzIjpbIkBuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci1pbnB1dC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hEO0FBQXFDO0FBQUk7QUFHdUQ7QUFBRztBQUVIO0FBQ3RCO0FBQUc7QUFFNUU7O0FBRUQ7QUFDZ0MsSUFBYyxvREFBbUI7QUFBQyxJQURsRTtBQUNJLFFBREoscUVBT0M7QUFDRCxRQU5FLGVBQVMsR0FBbUMsSUFBSSxDQUFDO0FBQ25ELFFBRUUsZUFBUyxHQUFtQixDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZGLFFBQUUsa0JBQVksR0FBZ0MsSUFBSSxDQUFDO0FBQ25EO0FBQ29CLEtBRG5CLEFBTlE7NERBRFIsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyxyR0FDdEI7Ozs7Ozs7MEJBSXNEO0FBQUMsbUNBbEJqRTtBQUFFLENBb0JELEFBUEQsQ0FDOEMsbUJBQW1CLEdBTWhFO0FBQ0QsU0FQYSx3QkFBd0I7QUFBSTtBQUFhO0FBQy9DLElBQUwsNkNBQWlEO0FBQ25EO0FBQXFCLElBQW5CLDZDQUF5QjtBQUMzQjtBQUFxQixJQUFuQixrREFBcUM7QUFDdkM7QUFBcUIsSUFBbkIsNkNBQXFGO0FBQ3ZGO0FBQXFCLElBQW5CLGdEQUFpRDtBQUNuRDtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtOZ2JEYXRlcGlja2VyQ29uZmlnfSBmcm9tICcuL2RhdGVwaWNrZXItY29uZmlnJztcbmltcG9ydCB7UGxhY2VtZW50QXJyYXl9IGZyb20gJy4uL3V0aWwvcG9zaXRpb25pbmcnO1xuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JEYXRlcGlja2VySW5wdXRgXSgjL2NvbXBvbmVudHMvZGF0ZXBpY2tlci9hcGkjTmdiRGF0ZXBpY2tlcikgY29tcG9uZW50LlxuICpcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSBkYXRlcGlja2VyIGlucHV0cyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAc2luY2UgNS4yLjBcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTmdiSW5wdXREYXRlcGlja2VyQ29uZmlnIGV4dGVuZHMgTmdiRGF0ZXBpY2tlckNvbmZpZyB7XG4gIGF1dG9DbG9zZTogYm9vbGVhbiB8ICdpbnNpZGUnIHwgJ291dHNpZGUnID0gdHJ1ZTtcbiAgY29udGFpbmVyOiBudWxsIHwgJ2JvZHknO1xuICBwb3NpdGlvblRhcmdldDogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XG4gIHBsYWNlbWVudDogUGxhY2VtZW50QXJyYXkgPSBbJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXTtcbiAgcmVzdG9yZUZvY3VzOiB0cnVlIHwgSFRNTEVsZW1lbnQgfCBzdHJpbmcgPSB0cnVlO1xufVxuIl19