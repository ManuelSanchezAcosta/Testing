/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbNav`](#/components/nav/api#NgbNav) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the navs used in the application.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
var NgbNavConfig = /** @class */ (function () {
    function NgbNavConfig() {
        this.destroyOnHide = true;
        this.orientation = 'horizontal';
        this.roles = 'tablist';
    }
    /** @nocollapse */ NgbNavConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbNavConfig_Factory() { return new NgbNavConfig(); }, token: NgbNavConfig, providedIn: "root" });
NgbNavConfig.ɵfac = function NgbNavConfig_Factory(t) { return new (t || NgbNavConfig)(); };
NgbNavConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbNavConfig, factory: function (t) { return NgbNavConfig.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgbNavConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return NgbNavConfig;
}());
export { NgbNavConfig };
if (false) {
    /** @type {?} */
    NgbNavConfig.prototype.destroyOnHide;
    /** @type {?} */
    NgbNavConfig.prototype.orientation;
    /** @type {?} */
    NgbNavConfig.prototype.roles;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWNvbmZpZy5qcyIsInNvdXJjZXMiOlsiQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvbmF2L25hdi1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekM7QUFFZ0M7QUFBSTtBQUVIO0FBQUc7QUFDQTtBQUl2QjtBQUFHO0FBQWlCOztBQUFqQztBQUNjLElBRGQ7QUFBMEIsUUFFeEIsa0JBQWEsR0FBRyxJQUFJLENBQUM7QUFDdkIsUUFBRSxnQkFBVyxHQUE4QixZQUFZLENBQUM7QUFDeEQsUUFBRSxVQUFLLEdBQXNCLFNBQVMsQ0FBQztBQUN2QyxLQUFDLEFBSlE7Z0RBRFIsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyx6RkFDdEI7Ozs7OztnREFLMkM7QUFBQyx1QkFoQnREO0FBQUUsQ0FlRCxBQUxELElBS0M7QUFDRCxTQUxhLFlBQVk7QUFDeEI7QUFBYTtBQUNILElBRFQscUNBQXFCO0FBQ3ZCO0FBQXFCLElBQW5CLG1DQUFzRDtBQUN4RDtBQUFxQixJQUFuQiw2QkFBcUM7QUFDdkM7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYk5hdmBdKCMvY29tcG9uZW50cy9uYXYvYXBpI05nYk5hdikgY29tcG9uZW50LlxuICpcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSBuYXZzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBzaW5jZSA1LjIuMFxuICovXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBOZ2JOYXZDb25maWcge1xuICBkZXN0cm95T25IaWRlID0gdHJ1ZTtcbiAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCcgPSAnaG9yaXpvbnRhbCc7XG4gIHJvbGVzOiAndGFibGlzdCcgfCBmYWxzZSA9ICd0YWJsaXN0Jztcbn1cbiJdfQ==