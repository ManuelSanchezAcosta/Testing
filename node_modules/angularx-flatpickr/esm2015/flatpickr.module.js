/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { FlatpickrDirective } from './flatpickr.directive';
import { FlatpickrDefaults } from './flatpickr-defaults.service';
import * as ɵngcc0 from '@angular/core';
export const /** @type {?} */ USER_DEFAULTS = new InjectionToken('flatpickr defaults');
/**
 * @param {?} userDefaults
 * @return {?}
 */
export function defaultsFactory(userDefaults) {
    const /** @type {?} */ defaults = new FlatpickrDefaults();
    Object.assign(defaults, userDefaults);
    return defaults;
}
export class FlatpickrModule {
    /**
     * @param {?=} userDefaults
     * @return {?}
     */
    static forRoot(userDefaults = {}) {
        return {
            ngModule: FlatpickrModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults
                },
                {
                    provide: FlatpickrDefaults,
                    useFactory: defaultsFactory,
                    deps: [USER_DEFAULTS]
                }
            ]
        };
    }
}
FlatpickrModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FlatpickrModule });
FlatpickrModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FlatpickrModule_Factory(t) { return new (t || FlatpickrModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FlatpickrModule, { declarations: function () { return [FlatpickrDirective]; }, exports: function () { return [FlatpickrDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrModule, [{
        type: NgModule,
        args: [{
                declarations: [FlatpickrDirective],
                exports: [FlatpickrDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHBpY2tyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiYW5ndWxhcngtZmxhdHBpY2tyL2ZsYXRwaWNrci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxRQUFRLEVBRVIsY0FBYyxFQUVmLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFDTCxpQkFBaUIsRUFFbEIsTUFBTSw4QkFBOEIsQ0FBQzs7QUFFdEMsTUFBTSxDQUFDLHVCQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3RFO0FBQ0c7QUFBMkI7QUFDbEI7QUFEWixNQUFNLDBCQUNKLFlBQXdDO0FBQ3ZDLElBQ0QsdUJBQU0sUUFBUSxHQUFzQixJQUFJLGlCQUFpQixFQUFFLENBQUM7QUFDOUQsSUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN4QyxJQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQU1ELE1BQU07QUFDTjtBQUFRO0FBQ2M7QUFBbUI7QUFBUSxJQUQvQyxNQUFNLENBQUMsT0FBTyxDQUNaLGVBQTJDLEVBQUU7QUFDOUMsUUFDQyxNQUFNLENBQUM7QUFDWCxZQUFNLFFBQVEsRUFBRSxlQUFlO0FBQy9CLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGFBQWE7QUFDaEMsb0JBQVUsUUFBUSxFQUFFLFlBQVk7QUFDaEMsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxpQkFBaUI7QUFDcEMsb0JBQVUsVUFBVSxFQUFFLGVBQWU7QUFDckMsb0JBQVUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQy9CLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLEtBQUc7QUFDSDsyQ0F2QkMsUUFBUSxTQUFDO0dBQ1IsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUMsa0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDLGNBQzlCOzs7Ozs7OzswQkFDSzs7QUExQkEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUF0QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBOZ01vZHVsZSxcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIFByb3ZpZGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmxhdHBpY2tyRGlyZWN0aXZlIH0gZnJvbSAnLi9mbGF0cGlja3IuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIEZsYXRwaWNrckRlZmF1bHRzLFxuICBGbGF0cGlja3JEZWZhdWx0c0ludGVyZmFjZVxufSBmcm9tICcuL2ZsYXRwaWNrci1kZWZhdWx0cy5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFVTRVJfREVGQVVMVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ2ZsYXRwaWNrciBkZWZhdWx0cycpO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdHNGYWN0b3J5KFxuICB1c2VyRGVmYXVsdHM6IEZsYXRwaWNrckRlZmF1bHRzSW50ZXJmYWNlXG4pOiBGbGF0cGlja3JEZWZhdWx0cyB7XG4gIGNvbnN0IGRlZmF1bHRzOiBGbGF0cGlja3JEZWZhdWx0cyA9IG5ldyBGbGF0cGlja3JEZWZhdWx0cygpO1xuICBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCB1c2VyRGVmYXVsdHMpO1xuICByZXR1cm4gZGVmYXVsdHM7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0ZsYXRwaWNrckRpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtGbGF0cGlja3JEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIEZsYXRwaWNrck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KFxuICAgIHVzZXJEZWZhdWx0czogRmxhdHBpY2tyRGVmYXVsdHNJbnRlcmZhY2UgPSB7fVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEZsYXRwaWNrck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVVNFUl9ERUZBVUxUUyxcbiAgICAgICAgICB1c2VWYWx1ZTogdXNlckRlZmF1bHRzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBGbGF0cGlja3JEZWZhdWx0cyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBkZWZhdWx0c0ZhY3RvcnksXG4gICAgICAgICAgZGVwczogW1VTRVJfREVGQVVMVFNdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=